<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>What is translation and why it&#39;s important</title>
      <link href="/blog/what-is-translation/"/>
      <url>/blog/what-is-translation/</url>
      
        <content type="html"><![CDATA[<p><img src="what-is-translation.webp" alt="What is translation"></p><p>In a globally networked world, cultural communication is becoming a strategic success factor for companies that operate worldwide. While there are countless methods of translation, the central goal always remains to convey content accurately and engagingly to the target audience. </p><p><strong>Translation should therefore be seen as an integral part of a comprehensive <a href="../localization-strategy/" title="localization strategy">localization strategy</a></strong> and not as an isolated process.But what exactly are translations, what types are there and what factors are important in localization translation?</p><h2 id="What-is-translation"><a href="#What-is-translation" class="headerlink" title="What is translation?"></a>What is translation?</h2><p>Translation is the process of transmitting text or <a href="https://en.wikipedia.org/wiki/Spoken_language#:~:text=A%20spoken%20language%20is%20a,opposed%20to%20a%20written%20language." target="__blank" title="spoken language">spoken language</a> from one language to another while preserving the original meaning, tone and intent as accurately as possible. Translation requires not only a comprehensive understanding of the source and target languages, but also in-depth cultural knowledge to correctly capture nuances and idiomatic expressions. It therefore goes far beyond a literal translation and aims to render the content authentically and comprehensibly in the new language context.</p><h2 id="Why-are-translations-so-important-for-international-companies"><a href="#Why-are-translations-so-important-for-international-companies" class="headerlink" title="Why are translations so important for international companies"></a>Why are translations so important for international companies</h2><p>For global companies, localization translation is essential to overcome <a href="https://en.wikipedia.org/wiki/Language_barrier#:~:text=A%20language%20barrier%20is%20a,even%20dialects%20in%20some%20cases." target="__blank" title="language barriers">language barriers</a> and effectively address customers in their own language. Professional translations promote customer loyalty and market acceptance, while inaccurate translations can jeopardize a company&#39;s reputation and cause costly misunderstandings.</p><p>Through professional translations, companies have the opportunity to present their products, services and brand messages clearly and persuasively in different languages to build trust and loyalty among international customers. </p><blockquote>In addition, a good translation ensures that cultural nuances and regional characteristics are taken into account to avoid misunderstandings and increase credibility. </blockquote><p>In areas such as marketing, the drafting of legal documents or the development of technical manuals, an accurate and culturally appropriate translation must always be available to avoid errors and ensure the international success and image of the company.</p><h2 id="What-are-the-different-types-of-localization-translation"><a href="#What-are-the-different-types-of-localization-translation" class="headerlink" title="What are the different types of localization translation?"></a>What are the different types of localization translation?</h2><p>There are different types of translation, each tailored to specific needs and content.These include the following:</p><h3 id="Specialist-translation"><a href="#Specialist-translation" class="headerlink" title="Specialist translation"></a>Specialist translation</h3><p>Specialist translations are specialized in certain subject areas such as medicine, law, technology or business. They require a deep understanding of the specialist language and terminology to ensure accurate and error-free translations.</p><h3 id="Business-translation"><a href="#Business-translation" class="headerlink" title="Business translation"></a>Business translation</h3><p>The term business translation covers the transfer of content between two languages that supports international business activities. This includes various documents, marketing materials and digital resources.</p><h3 id="Document-translation"><a href="#Document-translation" class="headerlink" title="Document translation"></a>Document translation</h3><p>Document translation involves the creation of business translations, business correspondence, internal communications, manuals, contracts, technical specifications and other important documents. The challenges here often lie in the large volume and fragmented structure of the documents, as well as the need to maintain consistent terminology throughout the text.</p><h3 id="Literary-translation"><a href="#Literary-translation" class="headerlink" title="Literary translation"></a>Literary translation</h3><p>This is the translation of books, poems and other literary works. The aim is to preserve not only the meaning, but also the style, tone and cultural nuances of the original.</p><h3 id="Legal-translation"><a href="#Legal-translation" class="headerlink" title="Legal translation"></a>Legal translation</h3><p>Whether contracts, deeds, patents or other legal documents, legal translations place high demands on the translator. As these are binding, they must be accurate and comply with the legal standards of both countries. Translations of court and legal documentation are another sub-category of this specialty area. </p><p>Arrest warrants, registrations, certificates, declarations, affidavits, patents, trademarks, proceedings, lawsuits, decrees, contracts and insurance policies are just a few examples of legal documents that need to be translated.</p><h3 id="Marketing-and-advertisement-translation"><a href="#Marketing-and-advertisement-translation" class="headerlink" title="Marketing and advertisement translation"></a>Marketing and advertisement translation</h3><p><a href="../localization-marketing/" title=" marketing localization">Marketing</a> and advertising translation often requires a creative translation that adapts the message to the cultural and emotional expectations of the target audience. The translation should achieve the same feeling and effect as the original.</p><h3 id="Medical-translation"><a href="#Medical-translation" class="headerlink" title="Medical translation"></a>Medical translation</h3><p>Medical translation is subject to strict requirements and includes clinical trial protocols, patient information, regulatory documents and other critical texts. Due to the potentially vital consequences, this type of translation requires specialized expertise, the utmost precision and special attention to detail.</p><h3 id="E-commerce-translation"><a href="#E-commerce-translation" class="headerlink" title="E-commerce translation"></a>E-commerce translation</h3><p>In global e-commerce, multilingualism is important to appeal to customers in different markets. Landing pages, product descriptions, customer reviews and blog articles must be translated into the respective target market language. It is important to find a balance between precision and SEO optimization and to take cultural nuances into account.</p><h3 id="Technical-translation"><a href="#Technical-translation" class="headerlink" title="Technical translation"></a>Technical translation</h3><p>This includes translations of technical documents such as manuals, instructions and technical specifications. Accurate, clear and comprehensible terminology is particularly important here to ensure that products are used correctly.</p><h3 id="Localization-translation"><a href="#Localization-translation" class="headerlink" title="Localization translation"></a>Localization translation</h3><p>Localization involves the comprehensive adaptation of a product or service to the cultural and linguistic conditions of a target market. This form of translation is often used for software, websites or games and takes regional characteristics into account.</p><h2 id="What-factors-play-a-role-in-localization-translation"><a href="#What-factors-play-a-role-in-localization-translation" class="headerlink" title="What factors play a role in localization translation?"></a>What factors play a role in localization translation?</h2><p>Let&#39;s take a closer look at localization translation and take a closer look at this type of translation. Several important factors are required to ensure that the content is not only linguistically but also culturally adapted to the target market.</p><ul><li>Localization translation goes beyond mere translation and takes into account cultural characteristics such as regional holidays, country-specific symbols, colors and images, which can have different meanings depending on the culture.<br><br></li><li>The language is adapted to local dialects, language variants and idioms in order to sound authentic and understandable. This is particularly important in order to address the target group at eye level and create a personal connection.<br><br></li><li>Content must be adapted to the legal requirements of the target market, especially for legal documents, product descriptions and data protection guidelines, to ensure compliance.<br><br></li><li>Information such as currencies, units of measurement (e.g. inches instead of centimeters) and date formats (e.g. day, month, year) need to be converted to avoid misunderstandings and create a familiar user experience.<br><br></li><li>The tone and style of the translation should be adapted to the expectations of the target audience. For example, a more formal approach may be preferred in some countries, while other markets may expect more casual, informal language.<br><br></li><li>For software and websites, technical adaptations play a role, such as supporting different characters, text lengths and layout changes to ensure the application displays correctly on all devices and platforms in the target market.<br><br></li><li>For digital content, it is important to adapt <a href="https://en.wikipedia.org/wiki/Keyword" target="__blank" title="keywords">keywords</a> to local search terms in order to remain visible in search engines. Localization therefore also includes optimization for the respective language and region.<br><br></li><li>Images, symbols and graphics should be adapted to cultural expectations. An image that evokes positive associations in one region could be interpreted differently or even be perceived as inappropriate in another region.</li></ul><h2 id="How-can-translations-be-implemented"><a href="#How-can-translations-be-implemented" class="headerlink" title="How can translations be implemented?"></a>How can translations be implemented?</h2><p>Localization translations can be implemented through a combination of strategies and technologies that together ensure that the content is translated into the target languages in an accurate and culturally appropriate way.The first step is to find and select professional translators or specialized translation agencies who have the necessary expertise and understanding of the target culture. The experts then produce an initial translation.To increase efficiency, modern translation tools such as <a href="../tms/" title="what is a translation management system">translation management systems</a> are usually used, which store previously translated segments and reuse them as required. </p><p>This maintains consistency and speeds up the translation process considerably. Other core tools include CAT tools (computer-aided translation), which help translators to translate content even more accurately through automation.Key functions of CAT tools include</p><ul><li>Translation memory: saves segments for consistent reuse to save working time.</li><li>Glossaries: Allow the management of terminological specifications to ensure consistent terms.</li><li>Quality assurance: Automated checks detect errors and promote accuracy.</li></ul><p><img src="localization-translation-process.webp" alt="localization translation process?"></p><p>A translation management system (TMS) extends these functions even further and usually includes additional project and workflow management. It therefore facilitates the coordination of complex projects and can be linked to CMS, CRM or e-commerce platforms. In this way, TMS platforms support companies in efficiently integrating their translations into existing business processes and ensuring the quality of international communication.</p><p>However, experienced localization experts or specialized tools are essential for localization, i.e. adapting to cultural peculiarities. They not only translate, but also adapt the content to the cultural and legal requirements of the target market.</p><blockquote>The growing importance of speech-to-text technology in the translation industry is highlighted by <a href="https://slator.com/microsoft-previews-ai-speech-translation-app/" title="Microsoft's announcement" target="__blank" >Microsoft's announcement</a> of a standalone app for speech-to-text.</blockquote><h3 id="Machine-translation-vs-human-translation-which-is-better"><a href="#Machine-translation-vs-human-translation-which-is-better" class="headerlink" title="Machine translation vs. human translation: which is better?"></a>Machine translation vs. human translation: which is better?</h3><p>Machine translation and human translation each have their strengths and are suitable for different requirements. The choice between the two depends heavily on factors such as quality, speed, cost and the required understanding of cultural nuances.</p><p>Machine translation is useful when large volumes of text need to be translated quickly and rough comprehensibility is sufficient. Modern machine translations, supported by artificial intelligence, offer high speed and are often more cost-effective than human translations. They are well suited to simple or standardized texts, such as simple manuals or internal documents, where the risk of misunderstandings is low. However, machines often reach their limits with creative, emotional or culturally sensitive texts. Nuances, wordplay or contextual subtleties are difficult or even impossible to translate correctly.</p><p>Human translation, on the other hand, is particularly superior for demanding, creative or culturally complex texts. Professional translators have a deep understanding of the subtleties and cultural context of a language, which is crucial for high-quality, authentic and emotionally appealing translations. This enables them to accurately convey not only the meaning, but also the intention and style of the original. For marketing materials, literary texts and legal documents, these differences are simply indispensable.</p><p>In many cases, however, a combination of the two is also useful: machine translations can be created as a first version and then checked and adapted by human translators. This approach, known as “post-editing”, utilizes the speed of the machine while ensuring quality through human sensitivity.Do you need a high-quality and fast translation of your documents in order to grow internationally? We would be happy to support you.</p><p>➡️ Register for our Translation Management System <a href="https://www.locize.app/register">here</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Localization </tag>
            
            <tag> Business </tag>
            
            <tag> Globalization </tag>
            
            <tag> Software Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Translation &amp; Localization Companies: What Most People Overlook</title>
      <link href="/blog/translation-and-localization-companies/"/>
      <url>/blog/translation-and-localization-companies/</url>
      
        <content type="html"><![CDATA[<p><img src="translation_and_localization_companies.webp" alt="Translation and Localization Companies"></p><h2 id="How-to-Find-the-Best-Translation-Agency-–-and-What-Most-People-Overlook"><a href="#How-to-Find-the-Best-Translation-Agency-–-and-What-Most-People-Overlook" class="headerlink" title="How to Find the Best Translation Agency – and What Most People Overlook"></a>How to Find the Best Translation Agency – and What Most People Overlook</h2><p>Successful localization can dramatically increase your business&#39;s reach – achieving a <a href="https://slator.com/how-localization-automation-can-get-companies-a-345-percent-roi/">ROI of over 300%</a> by partnering with a professional translation and localization provider is not uncommon.</p><p>Although translation agencies are plentiful on the market today, the quality varies significantly when you take a closer look. In the end, it’s not always easy to find a Translation and Localization Company that meets your expectations.</p><p>This article will cover exactly that: How do you find professional Translation and Localization Companies, why is it so important, and what options are available?</p><h2 id="What-is-a-Translation-and-Localization-Company"><a href="#What-is-a-Translation-and-Localization-Company" class="headerlink" title="What is a Translation and Localization Company?"></a>What is a Translation and Localization Company?</h2><p>Translation and Localization Companies are service providers specializing in translating content from one language to another. However, their services go beyond traditional translation bureaus. These companies also ensure that content aligns with the cultural, legal, and regional specifics of the target market.</p><p>While translation focuses solely on the language aspect, <a href="https://locize.com/blog/localization/" title="localization">localization</a> ensures that texts and other content are relevant and understandable within the specific cultural context.</p><p>What does this look like in practice? A Translation and Localization Company doesn’t just adapt the language of a product manual, for example; it also considers local units of measurement, date and currency formats, legal requirements, and cultural preferences.</p><h2 id="Benefits-of-Working-with-a-Translation-and-Localization-Company"><a href="#Benefits-of-Working-with-a-Translation-and-Localization-Company" class="headerlink" title="Benefits of Working with a Translation and Localization Company"></a>Benefits of Working with a Translation and Localization Company</h2><p>Working with Translation and Localization Companies offers several advantages. The most important is the professional quality and accuracy a Translation and Localization Company provides. Qualified native speakers and experts work together to consider every small cultural nuance of the target market, reducing the risk of misunderstandings and increasing relevance.</p><p>For companies offering products in other countries, managing translations can be time-consuming and labor-intensive. A Translation and Localization Company reduces the workload and ensures timely project completion.</p><p>Thanks to automated <a href="https://locize.com/?lng=en" title="software localization tools">software localization tools</a> and resources, established Translation and Localization Companies can localize extensive content, such as entire websites or software applications, in a short time. This saves time, especially when rapid market entry in multiple countries is required.</p><p>Other advantages of working with Translation and Localization Companies include scalability, technological support, legal compliance, and cost savings. Ultimately, the goal is to deliver tailored content to the market to enhance the user experience and increase the likelihood of product purchases or service bookings. For any globally operating company, a Translation and Localization Company can provide considerable competitive advantages.</p><h2 id="Who-Needs-a-Translation-and-Localization-Company"><a href="#Who-Needs-a-Translation-and-Localization-Company" class="headerlink" title="Who Needs a Translation and Localization Company?"></a>Who Needs a Translation and Localization Company?</h2><p>Primarily, Translation and Localization Companies are aimed at companies and organizations looking to expand internationally or establish themselves in various markets. Industries such as e-commerce, software, technology, marketing, healthcare, law, and tourism particularly benefit from Translation and Localization Companies, as these areas require content to be adapted for diverse languages and cultures. Besides global players, small and medium-sized businesses entering new markets to maximize their international success potential can also benefit from these services.</p><h2 id="How-to-Find-a-Good-Translation-and-Localization-Company"><a href="#How-to-Find-a-Good-Translation-and-Localization-Company" class="headerlink" title="How to Find a Good Translation and Localization Company"></a>How to Find a Good Translation and Localization Company</h2><p>Finding a high-quality Translation and Localization Company is not as easy as it may seem. A strategic approach to the search is highly recommended.</p><p><strong>Important</strong>: Define your requirements for the Translation and Localization Company. Here are some questions that may help:</p><ul><li>Which languages and regions need to be covered?</li><li>What type of content (e.g., <a href="https://locize.com/blog/website-localization/" title="website localization">website localization</a> , software- or marketing materials-) should be translated and localized?</li><li>Do you need industry-specific expertise (e.g., medical, technical, or legal knowledge)?</li><li>Are technical tools such as Translation Memory, machine translation, or terminology databases required for your project?</li></ul><p>The clearer your needs, the easier it will be to find a suitable provider.</p><p>Moreover, a Translation and Localization Company should be able to showcase several successful projects. Experience in this specialized niche is essential. Ideally, the company holds awards or ISO certifications. Also, ensure that either qualified, experienced translators or, even better, professional native speakers work at the Translation and Localization Company. The use of modern tools such as Translation Memory (TM) or Machine Translation (MT) further enhances efficiency.</p><p><strong>Don&#39;t Forget</strong>:</p><ul><li>Good communication and reliable customer support with dedicated contacts</li><li>Transparent pricing without hidden costs</li><li>Flexibility to handle urgent requests when needed</li><li>Punctuality and reliability with adherence to all deadlines</li></ul><p>A company’s website, listed references, and customer reviews on independent platforms can provide a solid first impression of Translation and Localization Companies. Ideally, the Translation and Localization Company will offer a test project, allowing you to assess their skills and service in detail. Ultimately, the goal is to establish a long-term partnership with the Translation and Localization Company, so take your time in choosing wisely.</p><h2 id="Why-Finding-the-Right-Partner-Can-Be-Difficult"><a href="#Why-Finding-the-Right-Partner-Can-Be-Difficult" class="headerlink" title="Why Finding the Right Partner Can Be Difficult"></a>Why Finding the Right Partner Can Be Difficult</h2><p>As we have often mentioned, finding a professional Translation and Localization Company is not always straightforward. But why is that? Because there is no clear definition, and essentially anyone offering translation, interpretation, subtitling, dubbing, and localization can call themselves a Translation and Localization Company.</p><p>Additionally, there is a wide range of providers, from small specialized agencies to large global service providers. You’ll quickly notice that the quality of translations and localizations varies significantly. Often, the first attempt to find a suitable Translation and Localization Company fails because there seems to be no provider with the required industry-specific knowledge, or the pricing structure is vague. The latter is often a sign of unprofessional companies.</p><p>Yes, finding the right Translation and Localization Companies requires some effort. However, investing time in this process will pay off when you can work with a professional company in the long term.</p><h2 id="The-World’s-Top-10-Translation-and-Localization-Companies"><a href="#The-World’s-Top-10-Translation-and-Localization-Companies" class="headerlink" title="The World’s Top 10 Translation and Localization Companies"></a>The World’s Top 10 Translation and Localization Companies</h2><p>Did you know there are around 18,000 Translation and Localization Companies worldwide? To help keep track, some consumer associations and independent market research firms evaluate Translation and Localization Companies. Below, we have compiled the top five translation and localization providers worldwide along with other recommended options.</p><h3 id="1-Supertext"><a href="#1-Supertext" class="headerlink" title="1. Supertext"></a>1. <strong>Supertext</strong></h3><p><img src="supertext.webp" alt="Supertext"></p><ul><li>Top-class localization solutions, Swiss made since 2005.</li><li>Price: $0.16 - $0.24 per word.</li><li>Over 3,000 professional translators and copywriters, ideal for app developers and SaaS companies.</li><li>Local teams in Zurich, Berlin, and Los Angeles support projects every step of the way.</li></ul><h3 id="2-TextMaster"><a href="#2-TextMaster" class="headerlink" title="2. TextMaster"></a>2. <strong>TextMaster</strong></h3><p><img src="textmaster.webp" alt="TextMaster"></p><ul><li>SaaS translation service suitable for simple web content to complex documents.</li><li>Price: $0.066 - $0.132 per word.</li><li>Offers specialized translations, including financial, technical, and legal.</li></ul><h3 id="3-BLEND"><a href="#3-BLEND" class="headerlink" title="3. BLEND"></a>3. <strong>BLEND</strong></h3><p><img src="blend.webp" alt="BLEND"></p><ul><li>End-to-end localization solutions focused on cultural nuances and consumer behavior.</li><li>Price: $0.079 - $0.139 per word.</li><li>A global community of over 25,000 translators and language experts.</li><li>BLEND Express as a self-service platform for personal and business projects.</li></ul><h3 id="4-Translated"><a href="#4-Translated" class="headerlink" title="4. Translated"></a>4. <strong>Translated</strong></h3><p><img src="translated.webp" alt="Translated"></p><ul><li>Professional language solutions with a mix of human expertise and AI.</li><li>Pricing varies based on contract.</li><li>Supports over 200 languages and serves various industries, including legal, <a href="https://locize.com/blog/localization-marketing/" title="marketing localization">marketing</a>, and technical.</li></ul><h3 id="5-TransPerfect"><a href="#5-TransPerfect" class="headerlink" title="5. TransPerfect"></a>5. <strong>TransPerfect</strong></h3><p><img src="transperfect.webp" alt="TransPerfect"></p><ul><li>Global company with over 5,000 experts and offices in more than 90 countries.</li><li>Supports over 170 languages with specialized services such as website and <a href="https://locize.com/blog/what-is-software-localization/" title="software localization">software localization</a>.</li><li>Utilizes the <a href="https://locize.com/blog/tms/" title="Translation Management System">Translation Management System</a> and GlobalLink to improve quality and efficiency.</li></ul><h3 id="6-LanguageLine-Solutions"><a href="#6-LanguageLine-Solutions" class="headerlink" title="6. LanguageLine Solutions"></a>6. <strong>LanguageLine Solutions</strong></h3><p><img src="language-solutions.webp" alt="LanguageLine Solutions"></p><ul><li>Leader in healthcare, covering over 160 languages.</li><li>Provides specialized language services in digital and print formats.</li><li>Continuously expanding into new sectors like gaming and media localization.</li></ul><h3 id="7-RWS"><a href="#7-RWS" class="headerlink" title="7. RWS"></a>7. <strong>RWS</strong></h3><p><img src="rws.webp" alt="RWS"></p><ul><li>Over 60 years of experience in translation and localization.</li><li>Focused on advanced technology and a global team, especially in tech, pharma, and automotive industries.</li><li>Over 3,000 employees and 35 offices worldwide.</li></ul><h3 id="8-Keywords-Studios"><a href="#8-Keywords-Studios" class="headerlink" title="8. Keywords Studios"></a>8. <strong>Keywords Studios</strong></h3><p><img src="keyword-studios.webp" alt="Keywords Studios"></p><ul><li>Focused on gaming and multimedia localization.</li><li>Offers a range of services: website, software, and <a href="https://locize.com/blog/what-is-mobile-app-localization/" title="app localization">app localization</a>, content creation, voice-over, and subtitling.</li><li>Supports machine translation (MT) via the KantanMT platform.</li></ul><h3 id="9-LionBridge-Technologies-LLC"><a href="#9-LionBridge-Technologies-LLC" class="headerlink" title="9. LionBridge Technologies LLC"></a>9. <strong>LionBridge Technologies LLC</strong></h3><p><img src="lionbridge.webp" alt="Lionbridge"></p><ul><li>Global language services for businesses and individuals.</li><li>Services include technical writing, multimedia localization, and creative transcreation.</li><li>Uses modern translation management systems based on AI and machine learning.</li></ul><p>After learning what to look for when evaluating Translation and Localization Companies and getting to know the top ten providers, you may be considering whether to continue managing translations internally to avoid the extensive search.</p><p>We offer a simpler solution. Just reach out to us!</p><h3 id="The-Comprehensive-Solution"><a href="#The-Comprehensive-Solution" class="headerlink" title="The Comprehensive Solution"></a>The Comprehensive Solution</h3><p>We are a modern platform for managing localization projects with an integrated translation service, delivering the highest standards of professionalism and reliability. Sounds good?</p><p>➡️ Register for our Translation Management System <a href="https://www.locize.app/register">here</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> Localization </tag>
            
            <tag> Business </tag>
            
            <tag> Globalization </tag>
            
            <tag> Software Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Get to know Enterprise Translation Management System</title>
      <link href="/blog/enterprise-translation-management-system/"/>
      <url>/blog/enterprise-translation-management-system/</url>
      
        <content type="html"><![CDATA[<p><img src="enterprise-translation-management-system.webp" alt="Enterprise Translation Management System"></p><h2 id="Enterprise-Translation-Management-System"><a href="#Enterprise-Translation-Management-System" class="headerlink" title="Enterprise Translation Management System"></a>Enterprise Translation Management System</h2><p>An Enterprise Translation Management System automates translation processes for product information, eliminating tedious and repetitive manual tasks.</p><p>An Enterprise Translation Management System provides you with a comprehensive way to manage your translation processes, ensuring closer collaboration within the team and significantly increasing efficiency.</p><p>Additionally, the centralization of all linguistic resources ensures greater transparency across the entire translation chain, which is crucial for optimizing translation workflows within your company.</p><p>Why the use of Enterprise Translation Management Systems is important, what advantages the software solution offers, and what it is, will be explained in the following article.</p><h2 id="What-is-an-Enterprise-Translation-Management-System"><a href="#What-is-an-Enterprise-Translation-Management-System" class="headerlink" title="What is an Enterprise Translation Management System?"></a>What is an Enterprise Translation Management System?</h2><p>An Enterprise Translation Management System is a specialized software solution that helps your company efficiently manage and automate your translation and localization processes.</p><p>The systems provide a central platform for:</p><ul><li>Organizing all translation projects</li><li>Storing and managing texts</li><li>Collaborating with translators and language service providers</li><li>Managing terminology</li><li>Integrating translation tools like Translation Memories and machine translation services</li></ul><p>An Enterprise Translation Management System allows a company to standardize all translation work, improve the quality and consistency of translations, save time and costs, and increase the efficiency of localization processes. It is particularly suitable for companies with large translation needs or complex multilingual projects.</p><h2 id="What-is-the-difference-between-a-Translation-Management-System-for-Enterprises-and-Translation-Management-Systems"><a href="#What-is-the-difference-between-a-Translation-Management-System-for-Enterprises-and-Translation-Management-Systems" class="headerlink" title="What is the difference between a Translation Management System for Enterprises and Translation Management Systems?"></a>What is the difference between a Translation Management System for Enterprises and Translation Management Systems?</h2><p>A Translation Management System is designed to manage translation projects.</p><p>It includes basic functions such as assigning translation tasks, tracking progress, managing Translation Memories and terminology databases, and integrating machine translation tools.</p><p>A <a href="../tms/">Translation Management System</a> is typically intended for small to mid-sized companies or translation agencies looking for a central platform to organize their translation work but with no need for extensive or complex features.</p><p>A Translation Management System for Enterprises, on the other hand, is an enhanced version of a Translation Management System specifically aimed at large companies with complex multilingual translation requirements.</p><p>It includes all the basic functions of a Translation Management System but is additionally tailored to the needs of large, globally operating companies.</p><p>It comes with extended features such as integration with other enterprise systems (e.g., content management systems, e-commerce platforms, product information management), enhanced security features, detailed reporting and analytics options, as well as the ability to manage large amounts of content and collaborate with numerous translators and teams worldwide.</p><p><img src="../enterprise-translation-management-system/translation-management-systems-for-enterprises.webp" alt="translation management systems for enterprises"></p><h2 id="What-are-the-advantages-of-a-Translation-Management-System-for-Enterprises"><a href="#What-are-the-advantages-of-a-Translation-Management-System-for-Enterprises" class="headerlink" title="What are the advantages of a Translation Management System for Enterprises?"></a>What are the advantages of a Translation Management System for Enterprises?</h2><p>If your company is one of those that needs an organizational tool for translation processes, using one comes with several notable advantages:</p><p><strong>Central platform</strong> where all translation projects can be organized and managed, facilitating coordination between different teams, translators, and service providers, as all parties have access to current documents and resources at any time.</p><p><strong>Through the automation of translation processes</strong> the time required to manage translation projects is significantly reduced.</p><p><strong>Localized products and services</strong> can be brought to market faster.</p><p><strong>An Enterprise Translation Management System</strong> helps companies save costs by utilizing Translation Memories. Translation Memories store already translated segments that can be reused for future projects, eliminating the need for repeated translations and reducing translation costs.</p><p><strong>Through the use of central terminology databases and style guides</strong> an Enterprise Translation Management System ensures that translations are consistent and of high quality.</p><p><strong>Detailed insights</strong> into the status and progress of translation projects ensure better control and planning.</p><p>For companies operating in multiple markets and working with different languages, an Enterprise Translation Management System is especially advantageous. It can easily scale to meet growing demands, whether by supporting additional languages or integrating with other enterprise systems like content management systems or product information management tools.</p><h2 id="What-does-an-Enterprise-Translation-Management-System-cost"><a href="#What-does-an-Enterprise-Translation-Management-System-cost" class="headerlink" title="What does an Enterprise Translation Management System cost?"></a>What does an Enterprise Translation Management System cost?</h2><p>The cost of an Enterprise Translation Management System can vary significantly and depends on several factors, including the range of functions, the number of users, integration options with other systems, and the type of implementation (cloud-based or on-premise).</p><p>In general, you can expect the following costs for an Enterprise Translation Management System:</p><p><strong>License fees</strong> depending on the provider and chosen features, ranging from a few thousand to several tens of thousands of euros per year.</p><p><strong>Setup and implementation costs</strong> such as system configuration, integration with existing enterprise applications, workflow customization, and possibly the migration of existing data.</p><p><strong>Training and support</strong> to ensure uniform application across the team and quick access to support in case of problems.</p><p><strong>Additional modules and integrations</strong> if you need special integrations, extended reporting functions, additional security measures, or machine translation services.</p><p><strong>Cloud-based vs. On-premise</strong> where cloud-based solutions often have lower setup fees and usage-based billing, while on-premise solutions require higher initial investments for hardware and IT infrastructure but may have lower ongoing costs in the long run.</p><p>➡️ Create a <a href="https://www.locize.app/register">free account</a> to explore our software for your business.</p>]]></content>
      
      
      
        <tags>
            
            <tag> translation </tag>
            
            <tag> tms </tag>
            
            <tag> software </tag>
            
            <tag> enterprise </tag>
            
            <tag> software development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L10n – What is it? | Locize</title>
      <link href="/blog/l10n/"/>
      <url>/blog/l10n/</url>
      
        <content type="html"><![CDATA[<p><img src="l10n-definition.webp" alt="L10n"></p><h2 id="L10n-–-What-You-Need-to-Know"><a href="#L10n-–-What-You-Need-to-Know" class="headerlink" title="L10n – What You Need to Know"></a>L10n – What You Need to Know</h2><p>Maybe you&#39;ve come across the terms L10n and i18n and are wondering what they mean.</p><p>These abbreviations stand for Localization (L10n) and <a href="/blog/what-is-i18n" title="Internationalization (i18n)">Internationalization (i18n)</a> in the context of software development.</p><p>They are crucial if you plan to offer your products or services in multiple countries, as they ensure that your offerings are linguistically and culturally adapted to the respective markets.</p><p>They help you tailor your offerings to the cultural and linguistic requirements of your target markets, enabling you to successfully enter new markets.</p><h2 id="What-is-L10n"><a href="#What-is-L10n" class="headerlink" title="What is L10n?"></a>What is L10n?</h2><p>L10n is short for &quot;Localization,&quot; where the &quot;L&quot; stands for the first and the &quot;n&quot; for the last letter of the English word &quot;Localization,&quot; while the number &quot;10&quot; represents the number of letters between the two.</p><p>Localization refers to adapting a product or service to meet the cultural, linguistic, and other local requirements of a specific market or region.</p><p>It’s not just about translating text but comprehensively adjusting to cultural norms, local laws, currency units, date and time formats, measurement units, and many other aspects to make your offerings accessible and relevant to your target audience.</p><p>L10n, and thus localization, is an essential part of globalization as it enables you and your company to reach an international audience by maximizing the user experience.</p><p><img src="guy-working-on-localization-l10n.webp" alt="man works at l10n with locize" title="Man working on L10n with Locize"></p><h3 id="An-Example"><a href="#An-Example" class="headerlink" title="An Example:"></a>An Example:</h3><p>With Localization L10n, you don’t just translate all the content of your website for the UK market, but you also adjust graphics, colors, and symbols that may have different meanings in the UK than in other countries.</p><p>Moreover, you add legal notices and privacy policies that comply with British laws.</p><p>Another critical aspect of L10n is cultural sensitivity. This means designing your content to respect and reflect the values, beliefs, and practices of your target audience.</p><p>For example, certain images or symbols considered polite in one culture might be viewed as rude or offensive in another. It may also be necessary to change or remove specific topics or content that are acceptable in one culture but not in another.</p><h2 id="Advantages-of-L10n"><a href="#Advantages-of-L10n" class="headerlink" title="Advantages of L10n"></a>Advantages of L10n</h2><p>Now that you know what L10n is, let&#39;s briefly discuss the advantages of localization before we move on to i18n.</p><p>Your benefits with L10n:</p><ul><li>You can enter new markets and expand the reach of your offerings.</li><li>You ensure a better user experience and increase customer satisfaction.</li><li>You gain a competitive edge as localized sites appear more professional and appealing to target audiences.</li><li>Your market perception becomes more positive as you cater to the needs and preferences of your international customers.</li><li>You build a foundation for better market positioning, increasing sales and revenue.</li><li>You ensure compliance with all local legal and regulatory requirements, reducing the risk of penalties.</li></ul><h2 id="What-Is-Needed-for-L10n"><a href="#What-Is-Needed-for-L10n" class="headerlink" title="What Is Needed for L10n?"></a>What Is Needed for L10n?</h2><p>To successfully implement L10n, you&#39;ll first need a professional translator and linguist who not only perfectly understands the target market’s language but also has an understanding of cultural nuances and local customs.</p><h3 id="Just-as-important"><a href="#Just-as-important" class="headerlink" title="Just as important:"></a>Just as important:</h3><p>Use appropriate tools and technologies that support the localization process. These include <a href="/blog/tms/" title="Translation Management Systems">Translation Management Systems</a> that store and reuse already translated texts and software that manages the entire terminology, ensuring consistent use of technical terms.</p><p>Also necessary is a structured, internationalized codebase to adapt to different languages and regions without requiring extensive technical changes.</p><p>To fully leverage the benefits of L10n, multiple departments need to collaborate, including developers, designers, product managers, and marketing experts. This ensures that all aspects of the product – from the user interface to technical functionality to marketing messages – are fully aligned with the needs of your target market.</p><p>Finally, don’t forget to establish quality assurance measures to ensure a local, accessible experience.</p><h2 id="What-is-the-Difference-Between-i18n-and-L10n"><a href="#What-is-the-Difference-Between-i18n-and-L10n" class="headerlink" title="What is the Difference Between i18n and L10n?"></a>What is the Difference Between i18n and L10n?</h2><p>i18n and L10n are two related but different concepts in adapting products and services for various markets. i18n stands for &quot;Internationalization&quot; (from the English &quot;Internationalization&quot;), with the &quot;i&quot; and &quot;n&quot; representing the first and last letters of the word, and the number &quot;18&quot; indicating the number of letters between them.</p><p>Internationalization refers to designing a product or service so that it can easily be adapted for different languages and regions without requiring significant code changes.</p><p>This includes separating linguistic content from the program code, supporting multiple writing systems, and adapting functions to accommodate different cultural, legal, and technical requirements.</p><h2 id="L10n-or-quot-Localization-quot-as-previously-defined-refers-to-the-actual-adaptation-of-the-product-or-service-to-the-specific-linguistic-cultural-and-legal-requirements-of-a-particular-market"><a href="#L10n-or-quot-Localization-quot-as-previously-defined-refers-to-the-actual-adaptation-of-the-product-or-service-to-the-specific-linguistic-cultural-and-legal-requirements-of-a-particular-market" class="headerlink" title="L10n, or &quot;Localization,&quot; as previously defined, refers to the actual adaptation of the product or service to the specific linguistic, cultural, and legal requirements of a particular market."></a>L10n, or &quot;Localization,&quot; as previously defined, refers to the actual adaptation of the product or service to the specific linguistic, cultural, and legal requirements of a particular market.</h2><p>While internationalization creates the framework for localization to take place, localization focuses on the actual implementation of these adjustments for a specific market.</p><h2 id="Simply-put-Internationalization-is-the-preparation-and-localization-is-the-execution"><a href="#Simply-put-Internationalization-is-the-preparation-and-localization-is-the-execution" class="headerlink" title="Simply put: Internationalization is the preparation, and localization is the execution."></a>Simply put: Internationalization is the preparation, and localization is the execution.</h2><h3 id="Additional-Resources"><a href="#Additional-Resources" class="headerlink" title="Additional Resources"></a>Additional Resources</h3><p>➡️ Create a <a href="https://www.locize.app/register">free account</a> to explore our software for your business.</p><p>➡️ Learn more about the concept of <a href="../localization/">Localization</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> software development </tag>
            
            <tag> globalization </tag>
            
            <tag> L10n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI in localization and its future role</title>
      <link href="/blog/ai-in-localization/"/>
      <url>/blog/ai-in-localization/</url>
      
        <content type="html"><![CDATA[<p><img src="ai-in-localization.webp" alt="ai in localization"></p><p>AI in localization has a significant impact on brands worldwide by enabling the translation of just ten languages to reach 90% of the target market.</p><p>This is particularly noteworthy, given that there are more than 7,000 languages globally.</p><p>However, even localizing into five languages is a substantial undertaking that requires the adaptation of extensive content.</p><p>The traditional manual process is time-consuming and costly.</p><p>AI and machine learning now offer a more efficient approach that is revolutionizing the localization process.</p><p>As a result, the field of language localization is currently undergoing a significant transformation, driven by advancements in <a href="https://en.wikipedia.org/wiki/Artificial_intelligence">artificial intelligence (AI)</a> and <a href="https://docs.locize.com/whats-inside/auto-machine-translation">machine translation (MT)</a>, which eliminate misunderstandings and enhance efficiency.</p><h2 id="What-Exactly-Does-Localization-in-AI-Mean"><a href="#What-Exactly-Does-Localization-in-AI-Mean" class="headerlink" title="What Exactly Does Localization in AI Mean?"></a>What Exactly Does Localization in AI Mean?</h2><p>AI in localization refers to the integration of artificial intelligence into the localization process to optimize translations and cultural adaptations of content, apps, software, and websites.</p><p>The technology enhances the efficiency, accuracy, and impact of the entire localization workflow through machine learning and <a href="https://www.techtarget.com/searchenterpriseai/definition/natural-language-processing-NLP">natural language processing (NLP)</a></p><p>AI systems utilize translation memories, glossaries, and feedback loops not only to refine translation quality but also to accelerate review and project management tasks.</p><p>Through the data-driven approach of AI in localization, AI-based systems can make context-sensitive content adaptations on an unprecedented scale.</p><p>The comprehensive localization process includes the adaptation of language, brand voices, visual elements, user interfaces, and date, time, measurement, and number formats to ensure cultural relevance and appropriateness.</p><p>This also considers currencies and payment methods to guarantee a complete transformation of meaning that fosters understanding and acceptance in new regions or target audiences.</p><h2 id="The-evolution-of-AI-in-localization"><a href="#The-evolution-of-AI-in-localization" class="headerlink" title="The evolution of AI in localization"></a>The evolution of AI in localization</h2><p>To understand the current landscape of translation technology, it is important to trace its evolution. </p><p>From the first rule-based systems to the groundbreaking introduction of statistical machine translation (SMT) and the more recent neural machine translation (NMT), the field has made remarkable progress. </p><p>All developments have enabled not only more efficient but also more accurate translation methods, laying the foundation for AI in localization.</p><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><h3 style="color:orange;"> ChatGPT for Localization?</h3><p style="color:grey;">Although ChatGPT has attracted a lot of attention for its ability to generate conversational-like text, its role as AI in localization is overestimated.   <br>  ChatGPT is primarily focused on generating human-like text and is therefore particularly suitable for creative content and customer interactions.  <br>  However, the limitations of this technology become apparent when precision, accuracy and domain-specific expertise are required, as is typical for AI in localization. </p> </div><p>➡️ <a href="https://www.locize.app/register">Create a new user account for free and start with AI localization immediately</a></p><p><img src="chatgpt-debunked.jpg" alt="chatgpt"></p><h2 id="What-role-does-AI-play-in-localization"><a href="#What-role-does-AI-play-in-localization" class="headerlink" title="What role does AI play in localization?"></a>What role does AI play in localization?</h2><p>AI-driven tools are revolutionizing the management of localization projects by automating repetitive tasks, streamlining workflows and providing predictive analytics to improve decision-making. </p><p>AI in Localization increases the quality of deliverables, accelerates time-to-market and increases consistency across languages and platforms, making the process faster, more accurate and more cost-effective.</p><p>Within AI in Localization, there are three specific sub-fields that are of particular importance in localization:</p><h3 id="Machine-learning-ML"><a href="#Machine-learning-ML" class="headerlink" title="Machine learning (ML)"></a>Machine learning (ML)</h3><p>The algorithms, trained on extensive data sets, improve the accuracy of translations and automate quality assessments by translation management systems.</p><h3 id="Deep-Learning-DL"><a href="#Deep-Learning-DL" class="headerlink" title="Deep Learning (DL)"></a>Deep Learning (DL)</h3><p>An advanced form of machine learning, deep learning algorithms mimic the way the human brain works, enabling more accurate translations through neural machine translation (NMT).</p><h3 id="Natural-language-processing-NLP"><a href="#Natural-language-processing-NLP" class="headerlink" title="Natural language processing (NLP)"></a>Natural language processing (NLP)</h3><p>NLP enables computers to understand and use human language, improving <a href="/blog/localization" title="localization">localization</a> processes and the automated insertion of glossary terms.</p><p>Advanced AI in localization brings significant benefits to the localization industry by not only simplifying workflows but also significantly improving the quality of localization results. </p><p>In particular, machine learning and deep learning make it possible to analyze complex data and derive more precise linguistic patterns, which are essential for more effective translations.</p><p>AI in Localization changes numerous localization projects:</p><ul><li>Increased efficiency: automation of routine tasks speeds up the process.</li><li>Improved decision-making: Using predictive analytics to optimize project management.</li><li>Increased accuracy: ensuring consistency and quality across languages and platforms.</li></ul><p>In addition, natural language processing (NLP) enables deeper interaction with text by capturing nuanced aspects of language that are essential to human communication.</p><h2 id="What-makes-AI-so-interesting-for-companies-besides-AI-in-localization"><a href="#What-makes-AI-so-interesting-for-companies-besides-AI-in-localization" class="headerlink" title="What makes AI so interesting for companies besides AI in localization?"></a>What makes AI so interesting for companies besides AI in localization?</h2><p>The importance and impact of AI on companies is remarkable given the rapid pace of technological development. </p><p>Numerous brands from a wide range of industries have the opportunity to use artificial intelligence to improve their operations, increase efficiency and promote growth.</p><p>But what impact can the use of AI really have?</p><h3 id="Sales-growth"><a href="#Sales-growth" class="headerlink" title="Sales growth"></a>Sales growth</h3><p>Companies using AI report high average revenue growth compared to companies without AI. This shows the positive correlation between AI usage and increased revenue.</p><h3 id="Profitability"><a href="#Profitability" class="headerlink" title="Profitability"></a>Profitability</h3><p>Companies implementing AI experience a greater average increase in profitability compared to those without AI, emphasizing the efficiency of AI in operations and decision making.</p><h3 id="Productivity"><a href="#Productivity" class="headerlink" title="Productivity"></a>Productivity</h3><p>AI users report a significant increase in productivity, compared to a much smaller increase for non-AI users, highlighting the effectiveness of AI in optimizing business processes.</p><p>All points illustrate how AI not only improves operational efficiency, but also creates financial and strategic benefits for organizations.</p><h2 id="AI-localization-vs-traditional-localization-What-are-the-differences"><a href="#AI-localization-vs-traditional-localization-What-are-the-differences" class="headerlink" title="AI localization vs. traditional localization: What are the differences?"></a>AI localization vs. traditional localization: What are the differences?</h2><p>AI in Localization is currently overtaking traditional translation processes through the use of automated systems that perform routine tasks and conduct extensive data analysis to ensure consistency and recommend content. </p><p>Unlike traditional methods, which rely heavily on the skills of individual translators, AI in Localization uses historical data and continuous learning to improve the quality and speed of translations. </p><p>AI adapts to feedback and evolving language usage, complementing human skills and making the translation process more efficient.</p><p>AI in Localization can also process large volumes of content quickly. This results in significant time and cost savings, as machine translation (MT) is significantly cheaper than human translation services. </p><p>In addition, translation memory promotes consistency and further reduces costs by storing and reusing previously translated content.</p><p>Scalability is another benefit of AI in localization, as AI-driven systems can quickly adapt to new markets without the extensive manual work traditionally required. </p><p>Localization in AI also enables greater personalization through technologies such as conversational AI chatbots that handle customer queries with personalized, human-like responses.</p><h2 id="The-human-touch-in-localization"><a href="#The-human-touch-in-localization" class="headerlink" title="The human touch in localization"></a>The human touch in localization</h2><p>Although AI is superior in localization in many aspects, quality remains an important consideration. Native translators and linguists are essential to capture linguistic and cultural nuances that AI can sometimes miss. </p><p>Nevertheless, the quality and accuracy of AI-based translations has improved significantly with advances in neural machine translation and is expected to continue to do so. </p><p>A balanced approach to the use of AI that takes into account both human expertise and automated efficiency is therefore essential.</p><p>AI in localization therefore requires a deep understanding of cultural nuances, linguistic subtleties and industry-specific terminology. </p><p>Human translators are essential for accurate and culturally appropriate translations as they can capture context and bring creativity. </p><p>Direct communication with human translators minimizes the risk of missed project targets and reduces revisions.</p><p>There is a common misconception that AI can completely replace human translators. In reality, AI complements the translation process by automating repetitive and time-consuming tasks. </p><p>This allows companies to manage their resources more efficiently, while human translators can focus on more complex and challenging tasks.</p><h2 id="The-advantages-of-AI-in-localization"><a href="#The-advantages-of-AI-in-localization" class="headerlink" title="The advantages of AI in localization"></a>The advantages of AI in localization</h2><p><a href="https://research.google/pubs/googles-neural-machine-translation-system-bridging-the-gap-between-human-and-machine-translation/" target="__blank" title="Neural machine translation (NMT)">Neural machine translation (NMT)</a> in particular has played a significant role in enabling us to use AI in localization today. </p><p>Unlike ChatGPT, which is designed for general text generation, NMT systems offer specialized, scalable and cost-effective translation solutions. </p><p>The integration of NMT into <a href="../tms/" title="translation management systems">translation management system</a> significantly improves the efficiency and quality of the localization process.</p><p>Best practices for AI in localization:</p><h3 id="Define-goals"><a href="#Define-goals" class="headerlink" title="Define goals"></a>Define goals</h3><p>Set clear objectives for localization projects to maximize the relevance and engagement of content and ensure it fits the business strategy.</p><h3 id="Select-suitable-tools"><a href="#Select-suitable-tools" class="headerlink" title="Select suitable tools"></a>Select suitable tools</h3><p>Select the most suitable AI solutions based on accuracy, scalability and integration capabilities.</p><h3 id="Combine-automation-and-human-expertise"><a href="#Combine-automation-and-human-expertise" class="headerlink" title="Combine automation and human expertise"></a>Combine automation and human expertise</h3><p>Combine technological efficiency with human insight to capture cultural nuances and achieve the highest quality localized content.</p><h3 id="Continuous-monitoring-and-optimization"><a href="#Continuous-monitoring-and-optimization" class="headerlink" title="Continuous monitoring and optimization"></a>Continuous monitoring and optimization</h3><p>Regular evaluation and adjustment of AI in Localization to keep pace with linguistic and cultural developments and ensure the effectiveness of localization.</p><p>Good to know: Translation and <a href="https://locize.com/" title="localization platforms">localization platforms</a> seamlessly integrate NMT and support multiple languages, enabling real-time collaboration and efficient project management. This integration ensures organized workflows, scalability and meets various translation requirements.</p><h2 id="A-look-into-the-future-of-AI-in-localization"><a href="#A-look-into-the-future-of-AI-in-localization" class="headerlink" title="A look into the future of AI in localization"></a>A look into the future of AI in localization</h2><p>A look into the future already clearly shows that the competition between the AI giants Google and OpenAI will continue to intensify. </p><p>While OpenAI&#39;s ChatGPT excels in language generation, Google and DeepL are characterized by continuous optimization of their translation models. </p><p>The strengths of Google Translate and DeepL lie in their high translation quality and domain-specific expertise.</p><p>AI in Localization has created a completely new basis for the expansion of companies in international markets. Read more under <a href="/blog/market-expansion/" title="market expansion strategy">market expansion strategy</a>.Google, Microsoft and Amazon have already successfully integrated AI in Localization to improve user experience and expand global reach.</p><p>For example, Google Translate uses AI algorithms for accurate translations in multiple languages, while Amazon Alexa uses AI to understand and respond to user commands in different languages.</p><h2 id="Translation-management-systems-with-machine-translation-are-fit-for-the-future"><a href="#Translation-management-systems-with-machine-translation-are-fit-for-the-future" class="headerlink" title="Translation management systems with machine translation are fit for the future"></a>Translation management systems with machine translation are fit for the future</h2><p>It is clear that ChatGPT&#39;s strengths, despite its impressive capabilities, do not lie in its accuracy and scalability for translation tasks. </p><p>If AI in localization is desired, the focus should be on machine translation (MT), especially when integrated with translation management systems (TMS). </p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/9cWiivvy_zs" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>➡️ <a href="https://www.locize.app/register">Create a new user account for free and start with AI localization immediately</a></p><p>The combination of human expertise and AI-driven MT is the foundation for realizing the full potential of AI in localization.</p><p>AI in Localization represents a significant advance by offering scalability, efficiency and improved global reach. </p><p>Implementing AI in localization processes enables companies to remain competitive and relevant in the global marketplace. </p><p>By utilizing advanced AI tools and practices, businesses can successfully overcome the challenges of international expansion and achieve new levels of global engagement and customer satisfaction.</p>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> l10n </tag>
            
            <tag> translation </tag>
            
            <tag> tms </tag>
            
            <tag> machine translation </tag>
            
            <tag> international strategy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is i18n and what is its purpose (2024)</title>
      <link href="/blog/what-is-i18n/"/>
      <url>/blog/what-is-i18n/</url>
      
        <content type="html"><![CDATA[<p><img src="what-is-i18n.webp" alt="What is i18n"></p><p>Today you&#39;re going to be introduced to a topic every growing business should be aware of.</p><p>Find out more about the popular Big Mac from McDonald&#39;s and how it relates to this topic.</p><p>In fact, this is the same topic that has helped many of our clients in growing even faster.</p><div id="term-i18n" style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><h2 style="color:orange;"> i18n</h2><p>The number 18 stands for the letters in 'internationalization' between 'i' and 'n,' making 'i18n.' It helps adapt products for global markets, including different languages and cultural preferences.</p>It's a way to shorten the word 'internationalization' for quicker and more efficient writing.</div><p><img src="i18n-term.webp" alt="i18n term"></p><p>There is an easy way to master all your needs for i18n in relation to software.</p><p>The best part?</p><p>You don&#39;t need to make a huge investment in a technology stack.</p><p>Let&#39;s get started.</p><h3 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h3><ul><li><a href="#intro">What is internationalization</a></li><li><a href="#industry">How the industry treat it</a></li><li><a href="#fields">The different steps during internationalization</a></li><li><a href="#misconceptions">Misconceptions of i18n</a></li><li><a href="#benefits">The benefits of i18n-localization</a></li><li><a href="#developers">How are developers affected from it</a></li><li><a href="#measure">How to measure the success</a></li><li><a href="#conclusion">Conclusion</a></li><li><a href="#links">Additional links</a></li></ul><h3 id="What-is-internationalization"><a href="#What-is-internationalization" class="headerlink" title="What is internationalization "></a>What is internationalization <a name="intro"></a></h3><p>In general, it refers to the process of bringing businesses into international markets. Usually, a company like this is run by a leader who thinks worldwide and knows a lot about different cultures. If you want to take your company global, there&#39;s a big need to adapt your app, website, or documents for local markets. </p><p>During this business transformation, the managers of those businesses must consider the new culture, region, and language. &#39;i18n&#39; as word is well known in the software industry.</p><p>We&#39;re in a digital age that&#39;s speeding up. The software business has its way of working, helping with digital tasks as it moves into new areas.</p><p>This help is often called <a href="/blog/localization/">localization</a>. The words &#39;internationalization&#39; and &#39;making software global&#39; mean the same thing. So, &#39;i18n&#39; is just a short way to say a business is going global.</p><p><img src="international-business.jpg" alt="international business"></p><h3 id="It-is-not-always-given-the-attention-it-deserves"><a href="#It-is-not-always-given-the-attention-it-deserves" class="headerlink" title="It is not always given the attention it deserves "></a>It is not always given the attention it deserves <a name="industry"></a></h3><p>In our opinion, the process of managing software to support local circumstances is in growing companies still a manual procedure. In this stage the company is in, a professional way is appreciated for the clients. Here are some interesting <a href="https://ec.europa.eu/commission/presscorner/detail/en/ip_21_5481" title="facts about internet surfers in Europe">facts about internet surfers in Europe</a> that showing how important localization is:</p><ul><li>Only a fraction of enterprises uses advanced digital technologies</li><li>56% of individuals in the EU have at least basic digital skills</li></ul><p>This demonstrates that only a few businesses are utilizing technology as they should today. According to the article, many more people will develop digital skills over the next decade.</p><p>If you are a growing international business, i18n can assist you in meeting the needs of internet users. Similarly, using advanced digital technologies will help you enhance the quality of your products or services.</p><p><a href="https://www.bea.gov/data/intl-trade-investment/international-services-expanded" title="data">Data</a> from the US Bureau of Economic Analysis shows that US companies are serving more customers from other countries. Over the last few years, there&#39;s been an increase of over 15%</p><p>These figures show that every company must be aware of the internationalization of its operations, particularly its software. The software can be viewed as the primary means of achieving digital transformation. This leads us to the next subject on which you should brush up on your internationalization knowledge:</p><h3 id="The-different-steps-during-internationalization"><a href="#The-different-steps-during-internationalization" class="headerlink" title="The different steps during internationalization  "></a>The different steps during internationalization  <a name="fields"></a></h3><p>This can serve as a step-by-step guide:</p><ul><li>Build your team</li><li>Evaluate the right translation management software</li><li>Preparing your software (date, time, strings, languages, etc.)</li><li>Take care of compliance</li><li>Optimize marketing in app store and search engines</li><li>Test your localization</li><li>Learn and amend your solution</li></ul><p>During the process, you can use an i18n framework to get your software ready. In our ecosystem we have the <a href="https://www.i18next.com/" title="i18next">i18next-framework</a> which is more than just a collection of basic i18n functionalities (plurals, context, interpolation, format). It offers a comprehensive solution for localizing your product from the web to mobile and desktop.</p><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><h3 style="color:orange;"> Bonus Tip</h3><p style="color:grey;">Who better to understand a culture than those who live within it? Make use of local specialists in each of your target markets. As a result, your team will be able to provide users with the most accurate, user-experience possible.   <br><br>  This is definitely a key part of the i18n strategy. Using a translation marketplace can quickly get you a translator, making your i18n much more successful.</p></div><h3 id="Misconceptions-of-i18n"><a href="#Misconceptions-of-i18n" class="headerlink" title="Misconceptions of i18n "></a>Misconceptions of i18n <a name="misconceptions"></a></h3><h4 id="Myth-1-i18n-Is-Only-Important-for-Multinational-Companies"><a href="#Myth-1-i18n-Is-Only-Important-for-Multinational-Companies" class="headerlink" title="Myth 1: i18n Is Only Important for Multinational Companies"></a>Myth 1: i18n Is Only Important for Multinational Companies</h4><p>Some think i18n is just for big global companies, but that&#39;s not true. Nowadays, even small businesses can gain from i18n. By offering your app in different languages, you can reach more customers and boost your income. Who wouldn&#39;t like that?</p><h4 id="Myth-2-i18n-Is-Just-Translation"><a href="#Myth-2-i18n-Is-Just-Translation" class="headerlink" title="Myth 2: i18n Is Just Translation"></a>Myth 2: i18n Is Just Translation</h4><p>Many people wrongly believe that i18n is just translating text. But it&#39;s much more. It includes changing user interfaces, date and time formats, and even adapting to local customs like currency symbols and measurement units. So, i18n isn&#39;t just about using <a href="../google-translate-accuracy/">Google Translate</a>. It&#39;s about making your product fit for different cultures.</p><h4 id="Myth-3-i18n-Is-Too-Expensive-and-Time-Consuming"><a href="#Myth-3-i18n-Is-Too-Expensive-and-Time-Consuming" class="headerlink" title="Myth 3: i18n Is Too Expensive and Time-Consuming"></a>Myth 3: i18n Is Too Expensive and Time-Consuming</h4><p>Some developers believe that implementing i18n in their application is too expensive and time-consuming. Sure, it may take some extra effort up front, but the benefits far outweigh the costs. By making your application available to users around the world, you can reach new markets and increase your profits. And with <a href="../tms/">translation management system</a>, like locize, implementing i18n has never been easier or more affordable.</p><h4 id="Myth-4-i18n-Is-Only-Relevant-to-Certain-Industries"><a href="#Myth-4-i18n-Is-Only-Relevant-to-Certain-Industries" class="headerlink" title="Myth 4: i18n Is Only Relevant to Certain Industries"></a>Myth 4: i18n Is Only Relevant to Certain Industries</h4><p>Some think i18n matters only for specific fields like e-commerce or travel, but that&#39;s incorrect. Almost every app can use i18n, from social networks to games. Everyone should get to use an app in their language and cultural context. <a href="../is-your-software-ready-for-localization/">Play the game</a> and see how you can prepare your app for localization!</p><h4 id="Myth-5-i18n-Is-Only-Relevant-to-Non-English-Languages"><a href="#Myth-5-i18n-Is-Only-Relevant-to-Non-English-Languages" class="headerlink" title="Myth 5: i18n Is Only Relevant to Non-English Languages"></a>Myth 5: i18n Is Only Relevant to Non-English Languages</h4><p>Some people believe that i18n is only relevant to non-English languages, but that&#39;s not true. i18n is crucial for English apps too. Not everyone speaks English as their first language, and English-speaking countries have their own cultures and language styles. With i18n, your app can work well for all English speakers, no matter where they are from</p><h3 id="The-benefits-of-i18n-localization"><a href="#The-benefits-of-i18n-localization" class="headerlink" title="The benefits of i18n-localization "></a>The benefits of i18n-localization <a name="benefits"></a></h3><p>By picking the right partner, you can offer complete localization automation that fits seamlessly into your ongoing delivery process.</p><ul><li>Increase your consumer base</li><li>Increase internet users&#39; contentment (user-experience)</li><li>Enter new markets quickly and strategically</li><li>Reduce your time, money, and effort</li><li>All languages&#39; source code is centralized, making future modifications simple</li><li>The internet market&#39;s reach is rapidly expanding</li><li>Use global marketing to your advantage</li></ul><p>Businesses should study local consumer behaviors to tailor their product offerings and marketing strategies.</p><p>Using the Big Mac Index as an example, it gives a basic way to see how prices vary worldwide, because the Big Mac is standardized globally.</p><p><img src="bigmac.jpg" alt="big mac"></p><blockquote><p>, compared to the U.S. ($5.58) and the Euro area ($5.82), highlights the significance of adapting product pricing and strategies through internationalization (i18n) to account for local market conditions and consumer purchasing power. </p></blockquote><p>The fact that a <a href="https://www.statista.com/statistics/274326/big-mac-index-global-prices-for-a-big-mac/" title="Big Mac costs">Big Mac costs</a> $7.73 in Switzerland, versus $5.58 in the U.S. and $5.82 in the Euro area, shows how important it is to adjust prices and strategies for different markets through internationalization (i18n). This takes into account the local market situations and how much people can pay.</p><p>But it&#39;s not just about changing prices. Localization also means changing products, marketing, and the customer experience to fit local cultures and expectations. Companies need to understand these cultural differences and customize their products and services to meet them.</p><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><h3 style="color:orange;"> Grow global with locize</h3>We at locize are specialists to make your internationalization a success story.<br />➡️ Check out the features of our <a href="https://locize.com/#features" title="localization management platform">localization management platform</a></div><h3 id="How-are-developers-affected-from-it"><a href="#How-are-developers-affected-from-it" class="headerlink" title="How are developers affected from it "></a>How are developers affected from it <a name="developers"></a></h3><p>This is where localization, or l10n, comes into play. It&#39;s a part of making software global, or internationalization (i18n), focusing on adapting software or services for different markets. The developers working on this are key to the success of making your product global.</p><p>i18n is how developers get software ready for use in countries outside where the company is based.</p><p>They also play a role in how well your content does in search engines like Google. If your website offers content in various languages or for different places, you can improve how it shows up in Google searches.</p><p>This <a href="https://developers.google.com/search/docs/advanced/crawling/managing-multi-regional-sites?visit_id=637780250358013835-1550662745&rd=1" title="guide">guide</a>  will help you on that.</p><h4 id="What-is-software-localization"><a href="#What-is-software-localization" class="headerlink" title="What is software-localization"></a>What is software-localization</h4><p>When adapting a web product to a new customer base in a different region, a developer must take care of <a href="../what-is-software-localization/">software localization</a>. Typically, the process necessitates the complete modification of text and multimedia for a software product.</p><p>Since JavaScript and its frameworks are among the most popular programming languages today, it&#39;s important to explore how JavaScript applications can be adapted for a global audience.</p><p>Following three main points with JavaScript are very well for localizing any application or website:</p><ul><li>JavaScript can detect the user’s preferred locale before giving them the option to manually select their own. This increases the user-experience and will result in more trust for your brand.</li><li>There are functions help to handle right to left languages like Arabic or Persian. This ensures to expand also to countries with right-to-left language.</li><li>If you don&#39;t want to reinvent the wheel, you can select a library that includes plugins for almost every situation. For example, <a href="https://www.i18next.com/">i18next</a> is an excellent choice for medium and large applications that require a significant amount of internationalization.</li></ul><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><h3 style="color:orange;">Find your way of i18n</h3>This guide of <a href="/javascript-localization.html" title="javascript localization">JavaScript localization</a> helps you find the right solution for your software-localization need with JavaScript. In this guide, you'll also find details on managing locales in applications using React, Vue, Angular, and other supported frameworks like Flutter and Rails, among others.  </div><p><img src="puzzle.png" title="The key pieces to localize your software project"><img src="puzzle_specific.png" title="The key pieces to localize your software project"></p><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem">  <h3 style="color:orange; margin-bottom: 0px;">More information</h3>  <p style="color:grey; margin-top: 5px;">In this guide we help you to understand i18n and <a href="../is-your-software-ready-for-localization/" title="Is your software ready for localization?">here you can check if your software is ready for localization</a>.</p></div><p>To answer the questions about i18n, you will finally probably use a corresponding i18n framework that meets your needs.</p><div style="border-left: 0.5px solid limegreen;padding: 0.5rem 2rem">  <h3 style="color:limegreen; margin-bottom: 0px;">Advice</h3>  <p style="color:grey; margin-top: 5px;">When it comes to web localization, one of the most popular i18n frameworks is <a href="https://www.i18next.com" title="i18next - The best i18n frameworks for JavaScript">i18next</a>.  <br />  <a href="https://www.i18next.com" title="i18next - The best i18n frameworks for JavaScript">    <img src="i18next-logo.png" />  </a>  </p></div><p>The biggest mistake one can do is looking on software localization as it’s only based on instrumenting your code and extract texts into resource files so you can translate them later.</p><p>The requirements are clear: enable the application to be translated later but without time to think more about it. It ends with reaching the release day with an application ready to be published in one language.</p><h2 id="t9n-translation"><a href="#t9n-translation" class="headerlink" title="t9n - translation "></a>t9n - translation <a name="t9n"></a></h2><p>When the code is ready to be localized, someone needs to translate the content.</p><p>You can have your translation done by freelancers, agencies or in-house employees. You can also start with some machine translation, but a translator should at least proofread the machine translated texts.</p><div style="border-left: 0.5px solid limegreen;padding: 0.5rem 2rem">  <h3 style="color:limegreen; margin-bottom: 0px;">Advice</h3>  <p style="color:grey; margin-top: 5px;">Use one of the <a href="/services.html#translationservices" title="Integrated professional translation partners">integrated services</a> to order the translations from a third party.  </p></div><p>Text translations are just one element in the localization process. You may also think of images, documents that differs not only for different languages, but also for different countries or regions.</p><div style="border-left: 0.5px solid limegreen;padding: 0.5rem 2rem">  <h3 style="color:limegreen; margin-bottom: 0px;">Next Steps</h3>  <p style="color:grey; margin-top: 5px;">After having internationalized the code and knowing how the content is translated, how will these 2 parts interact with each other?  </p></div><h2 id="What-is-Translation-Management"><a href="#What-is-Translation-Management" class="headerlink" title="What is Translation Management "></a>What is Translation Management <a name="tms"></a></h2><p> Translation management is the systematic process and automation that manages translations and other digital assets, eliminating repetitive and laborious manual tasks while enabling progress overview and control, increasing collaboration and delivering greater efficiency.</p></p><h3 id="Is-manually-merging-the-translation-files-the-best-approach"><a href="#Is-manually-merging-the-translation-files-the-best-approach" class="headerlink" title="Is manually merging the translation files the best approach?"></a>Is manually merging the translation files the best approach?</h3><p>Before release, the localization team will request resource files from the developer for translation. Despite knowing changes will occur before and after the release, the developer provides the files.</p><p>Weeks later, translated files are returned, but many terms have changed or are new, leading to discrepancies. This situation highlights the need for effective translation management system.</p><p>Exporting, importing, and merging files amidst ongoing content changes can be chaotic. </p><p>There it is good to choose a TMS that best fits your needs to streamline this process.</p><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem">  <h3 style="color:orange; margin-bottom: 0px;">TMS with continuous localization</h3>  <p style="color:grey; margin-top: 5px;">Not every continuous localization offered by the various translation management systems is the same. Check out the main differences <a href="../modern-continuous-localization/" title="Continuous Localization vs. Continuous Localization">here</a>.</p></div><p>New content in your application should instantly be available in your translation management tool, and finished translations should be integrated without developer intervention.</p><p>Since software development is continuous, your localization process should match this pace. </p><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem">  <h3 style="color:orange; margin-bottom: 0px;">This is key</h3>  <p style="color:grey; margin-top: 5px;">Translation files should be deployable independently from the software, allowing updates and management without new releases.</p></div> <p>Maintain multiple translation versions: </p><ul><li>one for the current release and one for the development branch. </li></ul><p>This enables translators to manage updates from day one and adapt to changes easily, allowing for translation updates without needing a new software release.</p><div style="border-left: 0.5px solid limegreen;padding: 0.5rem 2rem">  <h3 style="color:limegreen; margin-bottom: 0px;">Advice</h3>  <p style="color:grey; margin-top: 5px;">locize ends translation headaches. No more software delays due to missing translations.   </p>  <p style="color:grey; margin-top: 5px;">Translators update from day one, seamlessly integrating changes. Continuous localization matches your development pace, with independent deployment and management of translation files.  </p>  <p style="color:grey; margin-top: 5px;">Maintain multiple versions for releases and development branches. locize ensures your localization process meets business demands effortlessly.  </p></div><h3 id="How-to-measure-the-success"><a href="#How-to-measure-the-success" class="headerlink" title="How to measure the success "></a>How to measure the success <a name="measure"></a></h3><p>You might be wondering how to monitor your project&#39;s internationalization progress. Questions may arise: How many translations remain incomplete? Are visitors accessing localized content on the website? Is the code meeting quality standards?</p><p><img src="locize-dashboard.png" alt="locize"></p><p>The integration of locize brings you the extra level of tracking and support. Accessing crucial project data through the locize dashboard saves you countless hours otherwise spent on localization tasks.</p><p>locize help to measure the progress:</p><ul><li>Allows for continuous localization</li><li>Reporting on progress</li><li>Reporting on usage</li><li>Keep track of new translations</li><li>Discover translated, fuzzy, warning, or untranslated keys.</li><li>Obtains your missing keys and sends them directly to the project</li><li>Track user metrics on individual level (e.g. words)</li><li>Review workflow when user changes language data as well as history of it</li><li>Detect issues in the translation-keys</li></ul><p>Find out more at the <a href="https://docs.locize.com/issues" title="locize documentation for checks">locize documentation for issue detection</a>.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion "></a>Conclusion <a name="conclusion"></a></h3><p>How do you handle internationalization for your application?Let us know by sending an email to <a href="mailto:support@locize.com" title="support@locize.com">support@locize.com</a> or leaving a comment on <a href="https://twitter.com/locize" title="X">X</a> or <a href="https://www.facebook.com/locize" title="facebook locize">facebook</a>.</p><p>The term &quot;i18n&quot; is commonly linked with the software industry.It involves the operational procedures required when a company expands into new markets or countries.i18n involves a full-fledged industry that emerged to assist clients in adapting their software, websites, or video games.If you want to learn more about &quot;what is i18n,&quot; the following links may be helpful.</p><h3 id="Additional-links"><a href="#Additional-links" class="headerlink" title="Additional links "></a>Additional links <a name="links"></a></h3><p>➡️ Create a free new <a href="https://www.locize.app/register">user account</a> for advanced i18n-experience with locize</p><p>➡️ Check out real examples at <a href="../website-localization/">website-localization</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> internationalization </tag>
            
            <tag> i18n </tag>
            
            <tag> website internationalization </tag>
            
            <tag> best practices </tag>
            
            <tag> web app translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Say Hello to CAT (Computer-Assisted Translation): The Personal Translator in Your Pocket</title>
      <link href="/blog/cat/"/>
      <url>/blog/cat/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>Welcome to the world of CAT Tools, or Computer-Assisted Translation Software!</p><h3 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h3><ul><li><a href="#what">What are CAT tools?</a></li><li><a href="#features">What computer assisted translation tools can do?</a></li><li><a href="#benefits">Benefits of using CAT tools for translation</a></li><li><a href="#locize">Locize CAT</a></li><li><a href="#tms">TMS and CAT tools, what is different?</a></li><li><a href="#choosing">Choosing the right CAT tool: a buyer&#39;s guide</a></li><li><a href="#conclusion">Conclusion</a></li></ul><h2 id="What-are-CAT-tools"><a href="#What-are-CAT-tools" class="headerlink" title="What are CAT tools? "></a>What are CAT tools? <a name="what"></a></h2><p>These handy little programs are like having a personal translator in your pocket (or on your computer, whichever you prefer).</p><p>But what exactly is a <a href="https://en.wikipedia.org/wiki/Computer-assisted_translation">CAT</a>, you ask? Well, it&#39;s pretty much exactly what it sounds like. It&#39;s software that helps you translate text from one language to another. Think of it like having a bilingual friend who you can text whenever you come across a word or phrase you don&#39;t understand.</p><p>Now, I know what you might be thinking: &quot;But wait, don&#39;t we already have <a href="../google-translate-accuracy/">Google Translate</a>?&quot; And yes, you&#39;re right! Google Translate is a great tool for quick and easy translations. But CATs are a bit different. Unlike typical web translators, CAT tools are significantly more robust and tailored specifically to meet the needs of professional translators and businesses, ensuring enhanced efficiency, accuracy, and overall quality in translations.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/l6NCrY2Ad9o" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="What-computer-assisted-translation-tools-can-do"><a href="#What-computer-assisted-translation-tools-can-do" class="headerlink" title="What computer assisted translation tools can do? "></a>What computer assisted translation tools can do? <a name="features"></a></h2><p>Computer-assisted translation tools offer a range of capabilities to streamline and enhance the translation process:</p><h3 id="Glossary-Management"><a href="#Glossary-Management" class="headerlink" title="Glossary Management"></a>Glossary Management</h3><p>One of the most important features of CATs is their ability to &quot;remember&quot; translations. So, if you&#39;re working on a big project and you keep coming across the <a href="https://docs.locize.com/whats-inside/glossary">same phrase</a> over and over again, the CAT will remember how you translated it the first time and will automatically use the same translation for all future instances. This can save you a lot of time and make your translations much more consistent.</p><h3 id="Translation-Memory"><a href="#Translation-Memory" class="headerlink" title="Translation Memory"></a>Translation Memory</h3><p>Another great feature of CATs is their ability to work with &quot;<a href="https://docs.locize.com/whats-inside/translation-memory">translation memories</a>&quot;. These are databases of previously translated text, which can be used to help speed up the translation process and ensure consistency. So, if you&#39;re translating a document and you come across a sentence that&#39;s already been translated before, the CAT will pull up the previous translation and suggest it to you. Pretty cool, right?</p><h3 id="Machine-Translation"><a href="#Machine-Translation" class="headerlink" title="Machine Translation"></a>Machine Translation</h3><p>Among the most crucial capabilities of CATs is their adeptness at memorizing translations. Picture this: amidst a large-scale project, encountering recurring phrases is inevitable. Here&#39;s where CAT tools shine. They diligently store these translations, committing them to memory. So, the next time you stumble upon that same phrase, fear not! Your trusty CAT tool will recall precisely how you translated it the first time. Seamlessly, it will apply the same translation across all subsequent instances, sparing you valuable time and ensuring impeccable consistency throughout your translations.</p><h3 id="Collaboration"><a href="#Collaboration" class="headerlink" title="Collaboration"></a>Collaboration</h3><p>In the realm of CATs, the ability to collaborate seamlessly stands out as a cornerstone feature. Imagine this scenario: you&#39;re part of a dynamic translation team, dispersed across different locations, yet working towards a common goal. CAT tools serve as the virtual hub where translators, editors, and stakeholders converge in real-time. Through robust collaboration tools, communication flows effortlessly, files are shared effortlessly, and version control is maintained meticulously. Whether you&#39;re providing feedback, making revisions, or simply brainstorming ideas, these tools ensure that every member of the team remains synchronized and empowered to contribute their expertise. As a result, collaboration becomes not just a process but a catalyst for achieving unparalleled translation outcomes.</p><h2 id="Locize-CAT"><a href="#Locize-CAT" class="headerlink" title="Locize CAT "></a>Locize CAT <a name="locize"></a></h2><p>Within Locize there is an ready-to-go CAT tool comprising three distinct views.<br /></p><h3 id="Global-View"><a href="#Global-View" class="headerlink" title="Global View"></a>Global View</h3><p>The global view provides an overview of all segments. Read more in the <a href="https://docs.locize.com/different-views/global">global view docs</a>.<br /><br /><img src="global.webp"><br /></p><h3 id="Focus-View"><a href="#Focus-View" class="headerlink" title="Focus View"></a>Focus View</h3><p>You can work effectively on a single namespace in a single language with the focus view. Read more in the <a href="https://docs.locize.com/different-views/focus">focus view docs</a>.<br /><br /><img src="focus.webp"><br /></p><h3 id="In-Context-View"><a href="#In-Context-View" class="headerlink" title="In-Context View"></a>In-Context View</h3><p>Your website, where the content is displayed, is always the best context. Therefore there is also an <a href="https://docs.locize.com/different-views/incontext">in-context view</a>.<br /><br /><img src="incontext.webp"></p><h2 id="Benefits-of-using-CAT-tools-for-translation"><a href="#Benefits-of-using-CAT-tools-for-translation" class="headerlink" title="Benefits of using CAT tools for translation "></a>Benefits of using CAT tools for translation <a name="benefits"></a></h2><p>So, to sum it up, CATs are like having your own personal translator who never forgets anything and can access a vast library of translations. If you&#39;re a professional translator, they&#39;re an absolute must-have tool. And if you&#39;re not, they can still be a handy tool to have around for those times when you need to translate something quickly and easily.</p><p>However, what precisely are these amazing technologies capable of, and how might they help you? Let us examine the various benefits and features of computer-assisted translation as we go deeper into this field.</p><h3 id="Efficiency"><a href="#Efficiency" class="headerlink" title="Efficiency"></a>Efficiency</h3><p>There is an unmatched efficiency in the field of CAT tools. Imagine being able to move quickly through projects by reusing previously translated segments thanks to the power of translation memory. This simplified procedure not only expedites your work but also frees up valuable time to concentrate on polishing your translations to excellence.</p><h3 id="Accuracy"><a href="#Accuracy" class="headerlink" title="Accuracy"></a>Accuracy</h3><p>CAT tools are known for their precision. Think about this: you have a vast array of automated recommendations at your disposal as you utilize the machine translation integration. However, the final translation is guided by your perceptive eye, making sure that every word conveys the intended meaning. Accuracy is not only an objective when you have CAT tools on your side; it is a standard that is steadfastly maintained.</p><h3 id="Time-Savings"><a href="#Time-Savings" class="headerlink" title="Time Savings"></a>Time Savings</h3><p>CAT tools are a match for time, that elusive resource. Imagine this: you can translate words with never-before-seen speed as you take use of glossary management and translation memory. What used to take hours now only takes minutes, allowing you to spend more time refining your craft without worrying about running out of time.</p><h3 id="Cost-Savings"><a href="#Cost-Savings" class="headerlink" title="Cost Savings"></a>Cost Savings</h3><p>When it comes to CAT instruments, precision and efficiency work together to produce substantial cost savings. Think about this: more productive workflows reduce the need for time-consuming manual translations. Every translation project becomes an accomplishment to the wise investment made in CAT tools as you maximize your resources and reduce the margin for mistake, opening you a world of unmatched value and affordability.</p><h2 id="TMS-and-CAT-tools-what-is-different"><a href="#TMS-and-CAT-tools-what-is-different" class="headerlink" title="TMS and CAT tools, what is different? "></a>TMS and CAT tools, what is different? <a name="tms"></a></h2><p>TMS and CAT tools play distinct roles in translation workflows, with CAT often being a component of TMS. <a href="../tms/" title="Translation management systems (TMS)">Translation management systems (TMS)</a> oversee project logistics, while Computer-Assisted Translation (CAT) tools provide specialized support to translators. CAT tools, commonly integrated within TMS platforms, offer features like translation memory and glossary management, enhancing efficiency and consistency in translation tasks.</p><h2 id="Choosing-the-right-CAT-tool-a-buyer-39-s-guide"><a href="#Choosing-the-right-CAT-tool-a-buyer-39-s-guide" class="headerlink" title="Choosing the right CAT tool: a buyer&#39;s guide "></a>Choosing the right CAT tool: a buyer&#39;s guide <a name="choosing"></a></h2><p>When selecting a Computer-Assisted Translation (CAT) tool, consider the following factors to ensure it aligns with your needs:</p><h3 id="Translation-Needs"><a href="#Translation-Needs" class="headerlink" title="Translation Needs:"></a>Translation Needs:</h3><p>Assess your translation requirements, including languages, file formats, and volume, to ensure the CAT tool can accommodate them.</p><p><strong>Why choose Locize:</strong> Locize supports multiple languages and file formats, ensuring compatibility with diverse translation needs and volumes.</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features:"></a>Features:</h3><p>Look for essential features such as translation memory, glossary management, and integration with machine translation, as well as advanced capabilities like terminology extraction and quality assurance checks.</p><p><strong>Why choose Locize:</strong> Locize provides essential features such as translation memory and glossary management, ensuring consistency and efficiency in translations. Additionally, its advanced capabilities like in-context editing and version control enhance collaboration and streamline the translation process.</p><h3 id="User-Interface"><a href="#User-Interface" class="headerlink" title="User Interface:"></a>User Interface:</h3><p>Evaluate the user interface for intuitiveness and ease of use, as a user-friendly interface can enhance productivity and reduce learning curves.</p><p><strong>Why choose Locize:</strong> Locize boasts an intuitive and user-friendly interface, making it easy for translators and project managers to navigate and utilize its features effectively.</p><h3 id="Compatibility"><a href="#Compatibility" class="headerlink" title="Compatibility:"></a>Compatibility:</h3><p>Ensure compatibility with your existing systems and workflows, such as content management systems (CMS) or project management tools, to facilitate seamless integration.</p><p><strong>Why choose Locize:</strong> Locize seamlessly integrates with popular content management systems (CMS) and development frameworks, allowing for seamless integration into existing workflows.</p><h3 id="Support-and-Training"><a href="#Support-and-Training" class="headerlink" title="Support and Training"></a>Support and Training</h3><p>Consider the level of customer support and training provided by the CAT tool vendor, including documentation, tutorials, and technical assistance, to ensure smooth implementation and ongoing usage.</p><p><strong>Why choose Locize:</strong> Locize provides comprehensive documentation, tutorials, and responsive customer support to assist users during implementation and ongoing usage.</p><h3 id="Scalability"><a href="#Scalability" class="headerlink" title="Scalability"></a>Scalability</h3><p>Choose a CAT tool that can scale with your business growth, accommodating increasing translation volumes and evolving requirements over time.</p><p><strong>Why choose Locize:</strong> Locize is designed to scale with your business, accommodating growing translation volumes and expanding requirements effortlessly.</p><h3 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h3><p>Prioritize security features such as data encryption, access controls, and compliance with industry standards (e.g., GDPR) to safeguard sensitive information.</p><p><strong>Why choose Locize:</strong> Locize prioritizes data security, employing robust encryption protocols and adhering to strict compliance standards to safeguard sensitive information.</p><h3 id="Cost-and-Licensing"><a href="#Cost-and-Licensing" class="headerlink" title="Cost and Licensing"></a>Cost and Licensing</h3><p>Evaluate the pricing structure and licensing options, including subscription-based or perpetual licenses, to determine the most cost-effective solution for your budget and usage needs.</p><p><strong>Why choose Locize:</strong> Locize offers flexible pricing plans tailored to fit different budgetary constraints and usage needs, ensuring cost-effectiveness and value for money.</p><h3 id="Trial-Period"><a href="#Trial-Period" class="headerlink" title="Trial Period"></a>Trial Period</h3><p>Take advantage of trial periods or demo versions offered by CAT tool vendors to assess the software firsthand and ensure it meets your expectations before making a commitment.</p><p><strong>Why choose Locize:</strong> Locize provides a <a href="https://www.locize.app/register">free trial</a> period, allowing users to experience the platform firsthand and assess its suitability before making a commitment.</p><h3 id="More-than-a-CAT-Tool"><a href="#More-than-a-CAT-Tool" class="headerlink" title="More than a CAT Tool"></a>More than a CAT Tool</h3><p>Consider if the CAT tool integrates well with Translation Management Systems (TMS) if your workflow requires it.</p><p><strong>Why choose Locize:</strong> Locize offers seamless integration with TMS platforms, ensuring smooth collaboration and streamlined workflows for translation projects.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion "></a>Conclusion <a name="conclusion"></a></h2><p>In conclusion, CATs are the perfect tool for professional translators and anyone who needs a helping hand with translations! So, don&#39;t be shy, give them a try!</p>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> l10n </tag>
            
            <tag> translation </tag>
            
            <tag> machine translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Market Expansion Strategy – this is how you proceed</title>
      <link href="/blog/market-expansion/"/>
      <url>/blog/market-expansion/</url>
      
        <content type="html"><![CDATA[<p><img src="market-expansion-strategy.webp" alt="market expansion strategy"></p><p>Expansion can bring many benefits. Ultimately, it aims to penetrate a new market or address a new target group. </p><p>By expanding your business activities, you lay the foundation for sustainable growth and increasing sales of your products or services. </p><p>However, before you start your project, you need good preparation. And this is where the Market Expansion Strategy comes into play. Without it, it will be difficult to expand successfully.</p><p>But what does a market expansion strategy look like, what advantages does it bring and what options do you have? </p><p>Let&#39;s get started.</p><h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul><li><a href="#what">What is a market expansion strategy?</a></li><li><a href="#why">Why consider market expansion?</a></li><li><a href="#advantages">What are the advantages of a market expansion strategy?</a></li><li><a href="#strategies">What market expansion strategies are there?</a></li><li><a href="#howto">How to go about developing a market expansion strategy?</a></li><li><a href="#failure">What if the market expansion strategy fails?</a></li></ul><h2 id="What-is-a-market-expansion-strategy"><a href="#What-is-a-market-expansion-strategy" class="headerlink" title="What is a market expansion strategy? "></a>What is a market expansion strategy? <a name="what"></a></h2><p>A market expansion strategy is a strategic plan to expand your business into a new market. You are tapping into a customer segment that you have not previously addressed with your products or services. Overall, market expansion strategies are actually your maps that show you the way, be it geographically and/or in relation to a target group, to growth, increased sales and market placement.</p><h2 id="Why-consider-market-expansion"><a href="#Why-consider-market-expansion" class="headerlink" title="Why consider market expansion? "></a>Why consider market expansion? <a name="why"></a></h2><p>There are various reasons why a company decides to expand its market. One of the most frequently mentioned is increasing sales. </p><p>Especially if your own market is saturated, it is worth thinking outside the box and expanding into a target market where demand and, as a result, sales potential are still high.</p><p>Usually, a business starts in a specific region or offers everything in English.<br />So basically, it starts with one language only.</p><p>Now think about offering your content in other languages, starting with your website.<br /><br /><b>Do you think this is not relevant?</b><br /><br />Ok, then consider <a href="https://insights.csa-research.com/reportaction/305013126/Marketing">this article</a>. </p><p>According to it, 40% of consumers say they will never purchase from a website not in their native language. </p><p>While 75% say they are more likely to use a business again if aftersales care is in their native language.</p><p>Effective localization ensures your product meets the needs of your demographics and helps you reach new audiences.</p><p>With nearly five billion smartphone users globally, the localization of apps and websites ensures customers can enjoy your product wherever they are.</p><p>You won&#39;t add or change any features. You simply offer what you have in a few more languages.</p><p>Here are the top 10 most spoken languages in the world:</p><ol><li>Chinese — 1.3 Billion Native Speakers</li><li>Spanish — 471 Million Native Speakers</li><li>English — 370 Million Native Speakers</li><li>Hindi — 342 Million Native Speakers</li><li>Arabic — 315 Million Native Speakers</li><li>Portuguese — 232 Million Native Speakers</li><li>Bengali — 229 Million Native Speakers</li><li>Russian — 154 Million Native Speakers</li><li>Japanese — 126 Million Native Speakers</li><li>Lahnda (Western Punjabi) — 118 Million Native Speakers</li></ol><p>When we count the top 10 most spoken languages according to the total number of people who speak them (whether or not the language is their mother tongue), it looks slightly different:</p><ol><li>English — 1.348 billion total speakers</li><li>Mandarin Chinese — 1.120 billion total speakers</li><li>Hindi — 600 million total speakers</li><li>Spanish — 543 million total speakers</li><li>Standard Arabic — 274 million total speakers</li><li>Bengali — 268 million total speakers</li><li>French — 267 million total speakers</li><li>Russian — 258 million total speakers</li><li>Portuguese — 258 million total speakers</li><li>Urdu — 230 million total speakers</li></ol><p>A little mind experiment: What if you offered your website and product in Chinese, Hindi, and Spanish, besides English?</p><p><b>You would target an additional audience of 2.266 billion speakers.This makes a potential growth of 268%!</b></p><p>With a market expansion strategy in hand, diversification always goes hand in hand. This gives you the significant advantage of spreading the risk that you have when you only depend on one market. Even in the face of fluctuations in the economy, political events or the unforeseeable, your company remains much more robust.</p><p>Also take advantage of the economy of scale. By spreading your expenses over a larger output, you can multiply your efficiency but reduce your costs in the long term.</p><p>Being present in multiple markets inevitably leads to greater visibility and therefore greater brand awareness. This means that not only sales but also the market value increase. At the same time, you can keep up with your competitors or even set yourself apart from them.</p><p>From an even different perspective, market expansion gives you access to new talent that can prevent a shortage of skilled workers. You may also discover new, advanced technologies and business practices in a new market that you were not aware of before, but that could significantly increase your productivity and competitiveness.</p><h2 id="What-are-the-advantages-of-a-market-expansion-strategy"><a href="#What-are-the-advantages-of-a-market-expansion-strategy" class="headerlink" title="What are the advantages of a market expansion strategy? "></a>What are the advantages of a market expansion strategy? <a name="advantages"></a></h2><p>A well-planned market expansion strategy is, to put it bluntly, half the battle when it comes to your expansion. Above all, it helps you achieve your long-term goals and ensure that your growth is continuous but controlled.</p><p>Advantages of a Market Expansion Strategy are:</p><h3 id="1-Risk-reduction"><a href="#1-Risk-reduction" class="headerlink" title="1. Risk reduction"></a>1. Risk reduction</h3><p>By carrying out market research and analysis and starting pilot projects in a market expansion strategy, you can avoid possible risks of market expansionProactively identify, take appropriate countermeasures and thus minimize them. With a strategic approach, you avoid having to pay expensive fees and at the same time increase the likelihood of a successful market entry.</p><h3 id="2-Resource-allocation"><a href="#2-Resource-allocation" class="headerlink" title="2. Resource allocation"></a>2. Resource allocation</h3><p>Your resources, be it capital, staff or time, are limited. So that you can really use this effectively for your expansion, a market expansion strategy is essential. For example, you can identify the most attractive markets in advance, use the economies of scale and create synergies between different markets and your business areas.</p><h3 id="3-Competitive-advantage"><a href="#3-Competitive-advantage" class="headerlink" title="3. Competitive advantage"></a>3. Competitive advantage</h3><p>If your market expansion strategy is successful and you open up new markets, you will build sustainable competitive advantages. In other words, a market expansion strategy enables you to meaningfully differentiate your products and services from your competitors, to establish them strongly in the market and to build a loyal customer base.</p><h3 id="4-Innovation-and-learning"><a href="#4-Innovation-and-learning" class="headerlink" title="4. Innovation and learning"></a>4. Innovation and learning</h3><p>In addition to the advantages of risk minimization or resource distribution, a market expansion strategy always promotes internal company development, which you should not despise. Ultimately, a market expansion strategy requires new ideas, progressive business models and engagement with other cultures, target groups and competitors.</p><p>Market expansion can also mean that you have to optimize your products or services for the new market or even be inspired to create completely new ones. Furthermore, the experience and knowledge that you will gain from the expansion will be available to you in the long term, which you can then transfer to other areas of your company.</p><h3 id="5-Brand-perception-and-the-global-image"><a href="#5-Brand-perception-and-the-global-image" class="headerlink" title="5. Brand perception and the global image"></a>5. Brand perception and the global image</h3><p>An equally notable advantage of a market expansion strategy is that you can use market expansion to build up your image and the perception of your brand in a controlled manner. Be it with an international market expansion strategy or global market expansion strategies. Once the foundation has been laid, you can strengthen the trust of customers, investors and business partners and manage the entire process yourself, which contributes significantly to ensuring a reasonable reputation.</p><h2 id="What-market-expansion-strategies-are-there"><a href="#What-market-expansion-strategies-are-there" class="headerlink" title="What market expansion strategies are there? "></a>What market expansion strategies are there? <a name="strategies"></a></h2><p>A distinction is made between four market expansion strategies that you can use depending on your goals:</p><ul><li>Market penetration</li><li>Product development</li><li>Market development</li><li>Diversification</li></ul><p>Fortunately, these are not just purely theoretical approaches, but rather market expansion strategies that you can immediately implement in practice. We&#39;ll tell you what this might look like in the next sections.</p><h3 id="Market-penetration-existing-product-existing-market"><a href="#Market-penetration-existing-product-existing-market" class="headerlink" title="Market penetration (existing product, existing market)"></a>Market penetration (existing product, existing market)</h3><p>With market penetration as your market expansion strategy, you focus on strengthening your existing products or services in your current market and increasing their sales. Ergo, you try to sell more of what you offer - be it to existing customers or new customers. The approach is often the first step that companies implement as part of their market expansion strategy. Importantly, market penetration only works effectively if the market is not yet saturated. However, your risk remains low because you neither venture into unknown territory nor have to spend a lot of money. What helps you with this market expansion strategy with the goals of increasing market share, competitiveness and profit maximization are pricing strategies, advertising campaigns, sales promotions or improving services such as customer service. However, the growth potential remains manageable with this approach.</p><p>A classic example of market penetration is a company lowering its prices to attract more customers. A wireless carrier offers discounts or improved tariff plans to attract or persuade customers to switch from a competitor.</p><h3 id="Product-development-new-product-existing-market"><a href="#Product-development-new-product-existing-market" class="headerlink" title="Product development (new product, existing market)"></a>Product development (new product, existing market)</h3><p>When developing products as part of your market expansion strategy, you optimize your existing products and services for your market, modify variants or introduce a completely new offering. The aim is to better penetrate your existing markets or open up new market segments. This can be achieved by focusing on increasing customer value for your product range. With this market expansion strategy, always make sure that you take customer wishes into account in all innovations and improvements in order to stand out from your competitors in the long term.</p><p>Since you have to spend a little more money on product development, the risk also increases compared to market penetration. To avoid bad investments, you can pursue the virtual prototyping approach. You test your innovation BEFORE the actual development within a virtual environment under completely real conditions and marketing levels. This includes setting up a web presence.</p><p>An example of product development is introducing a new smartphone model with improved features and performance to encourage existing fans to upgrade and attract new, tech-savvy customers. An outstanding role model for such a market expansion strategy is undoubtedly Apple.</p><h3 id="Market-development-existing-product-new-market"><a href="#Market-development-existing-product-new-market" class="headerlink" title="Market development (existing product, new market)"></a>Market development (existing product, new market)</h3><p>Do you have an excellent product and want to conquer a new sales market? Then market development is your market expansion strategy. In market development, you strive to take your existing products or services into new markets. This can mean both geographical expansion (domestic or international) as well as addressing new target groups or opening up additional sales channels. The main goal is to discover new sales potential and expand your customer base. One advantage of this market expansion strategy is that you don&#39;t have to spend any money on further developing your products. However, market developments require that you have a thorough knowledge of the new field, its players, opponents and spectators. Furthermore, it is essential to carry out very finely graded target group marketing, which takes the respective cultural characteristics into account.</p><p>An example would be a food company that wants to sell its products internationally to reach new geographical markets.</p><h3 id="Diversification-new-product-new-market"><a href="#Diversification-new-product-new-market" class="headerlink" title="Diversification (new product, new market)"></a>Diversification (new product, new market)</h3><p>Probably the most comprehensive, risky, but also, if successful, strongest market expansion strategy is diversification. This means you are introducing a new product to a new market. There are two main types of diversification: related and unrelated diversification. With related diversification, you expand your offerings into areas that are logically related to your current environments. With unrelated diversification, you enter completely new business areas that have no direct connection to your previous activities. Note that these market expansion strategies involve an investment of money and time. However, if the equation of the two unknowns works out, the effort will undoubtedly have been worth it due to the enormous increase in sales.</p><p>An example of diversification would be a clothing manufacturer starting to produce and sell sports equipment - if this is related diversification - or entering the technology industry - if it is an unrelated diversification.</p><p>If you can&#39;t decide between the four market expansion strategies or would like to benefit from the advantages of several strategies, there are intermediate solutions:</p><ul><li>Market expansion: strategy of selling established products within new geographical markets while maintaining target group consistency.</li><li>Product Modification: Approach to bridging the gap between market penetration and product development by making slight adjustments to existing products to reintroduce them into the current market.</li><li>Limited diversification: adapting existing products to enter new geographical markets.</li><li>Partial diversification: strategy that involves either distributing new products into geographically new markets or introducing modified products to new target groups.</li></ul><h2 id="How-to-go-about-developing-a-market-expansion-strategy"><a href="#How-to-go-about-developing-a-market-expansion-strategy" class="headerlink" title="How to go about developing a market expansion strategy? "></a>How to go about developing a market expansion strategy? <a name="howto"></a></h2><p>Now you know what a market expansion strategy is, its advantages and its four common models. Now let&#39;s get to one of the most interesting parts: How do you develop such a strategy in practice?</p><p><img src="../market-expansion/SMART-goals-definition.png" alt="set the goals"></p><h3 id="1-Set-the-goals"><a href="#1-Set-the-goals" class="headerlink" title="1. Set the goals"></a>1. Set the goals</h3><p>Before starting your market expansion, you should set clear, measurable and realistic goals. All goals should address different aspects of your expansion, including sales, market share, customer acquisition, and brand awareness. Use the SMART principle when setting goals.</p><p>What are <a href="https://www.bitesizelearning.co.uk/resources/smart-goals-meaning-examples" title="SMART goals">SMART goals</a>?</p><p><b>Specific</b>: Define exactly what you want to achieve in each new market. For example, you could aim to achieve a certain level of sales or capture a certain percentage of market share within the first year of entering the market.</p><p><b>Measurable</b>: Make sure you can quantify your goals. This allows you to track progress over the long term and measure your successes. Examples of measurable goals could be: selling 10,000 units of your product in the first year or acquiring 500 new customers in the first six months.</p><p><b>Attainable</b>: Your goals should be challenging but realistic. To do this, consider your resources, competition and market conditions.</p><p><b>Relevant</b>: All of your goals should be closely tied to your company&#39;s overall business goals and overall strategy. They should help carry and support your company’s long-term vision and mission.</p><p><b>Timely</b>: Set clear deadlines for achieving your goals. Timelines help you stay motivated, plan and monitor progress.</p><p>A complete example goal according to the SMART variant could be: “We increase sales by 20% within one year of market entry by selling product X in the new target market Y.”</p><p>This goal is specific (increase revenue by selling a specific product), measurable (20% increase in revenue), achievable (based on a realistic estimate), relevant (contributes to overall revenue growth), and time-bound (within a year).</p><p>By incorporating clearly defined goals into your market expansion strategy, you can better measure the success of your measures and ensure that all activities are aimed at achieving these goals - and, above all, remain so.</p><h3 id="2-Market-research-and-analysis"><a href="#2-Market-research-and-analysis" class="headerlink" title="2. Market research and analysis"></a>2. Market research and analysis</h3><p>Once your goals are clear, the Market Expansion Strategy involves creating a comprehensive analysis of potential new markets. Take a close look at demographics, economic indicators, cultural differences, legal frameworks and technological developments. Study the competitive landscape to understand your competitors&#39; strengths and weaknesses and identify gaps in the market that you may be able to exploit.</p><ul><li>Use online resources such as <a href="https://de.statista.com/" title="Statista">Statista</a>, <a href="https://marketresearch.com/" title="MarketResearch.com">MarketResearch.com</a> or national statistical authorities to collect relevant market data.</li><li>Conduct surveys or focus groups with potential customers to get direct feedback and understand customer segments.</li><li>Analyze social media and customer reviews to gain insight into trends and preferences.</li></ul><h3 id="3-Define-target-market"><a href="#3-Define-target-market" class="headerlink" title="3. Define target market"></a>3. Define target market</h3><p>Based on your market research, you should now be able to select the most attractive markets for your market expansion strategy. Your decision will be based on factors such as market size, accessibility, growth potential and fit with your product or service offering. Always take your own company goals and resources into account.</p><ul><li>Create a ranking of your preferred markets based on quantitative and qualitative criteria.</li><li>Consider market entry costs and operational costs in different markets.</li><li>Conduct a SWOT (Strengths, Weaknesses, Opportunities, Threats) analysis for each potential market.</li></ul><h3 id="4-Develop-market-entry-strategy"><a href="#4-Develop-market-entry-strategy" class="headerlink" title="4. Develop market entry strategy"></a>4. Develop market entry strategy</h3><p>Is your new target market located? We are entering the hot phase of the market expansion strategy. Decide now how you want to enter the market: through export, licensing, franchising, setting up a subsidiary, partnership or acquisition. Each of these options entails different investment requirements, risks and levels of control. So take your time and look at each of the options carefully.</p><ul><li>Consider establishing strategic partnerships or joint ventures with local companies to overcome potential barriers to entry.</li><li>Evaluate the advantages and disadvantages of each market entry option in light of your business goals and resources.</li><li>Consult local experts or advisors to be able to meet legal and regulatory requirements later.</li></ul><h3 id="5-Adjust-marketing-and-sales-strategy"><a href="#5-Adjust-marketing-and-sales-strategy" class="headerlink" title="5. Adjust marketing and sales strategy"></a>5. Adjust marketing and sales strategy</h3><p>Of course, you want to reach your target group as quickly as possible after entering the market. This is achieved by designing marketing and sales strategies that are specifically tailored to the target market. Take cultural characteristics, language, local trends and target group behavior into account. Adjust your product offerings, pricing models, advertising messages and sales channels accordingly.</p><ul><li>Develop culture-specific marketing materials and campaigns that resonate with the target market.</li><li>Carefully select sales and distribution partners who have good knowledge of the local market.</li><li>Use digital marketing and social media to effectively reach your target audience.</li></ul><h4 id="Website-and-translation-management"><a href="#Website-and-translation-management" class="headerlink" title="Website and translation management"></a>Website and translation management</h4><p>Your market expansion strategy should prioritize the establishment of a comprehensive localization strategy. This involves the adoption of a sophisticated translation management system (TMS) and a well-orchestrated approach to localization that ensures your website resonates with the target audience both linguistically and culturally.</p><p>Invest in a robust <a href="/blog/tms/" title="translation management system">translation management system</a> that streamlines the localization process, ensuring efficiency and consistency across all digital content. A TMS can facilitate collaboration among translators, editors, and project managers, significantly reducing the time and effort required for large-scale localization projects.</p><p>Develop a localization strategy that extends beyond mere translation. Understand the cultural nuances, consumer behaviors, and market trends of your target region. This strategy should encompass local customs, values, and preferences, ensuring that your website, from content to visuals, aligns with the local culture.</p><p>Collaboration with local experts or <a href="https://locize.com/services.html" title="professional translators">professional translators</a> is crucial for achieving authentic and culturally relevant content. They can provide insights into local expressions, units of measurement, holidays, and other cultural specifics, enhancing the local appeal of your website.</p><p>Emphasize the adaptation of your digital presence to mobile platforms, considering the predominant use of mobile internet in many target markets. A mobile-optimized website is not just a preference but a necessity for reaching a wider audience.</p><p>Incorporate local customer feedback and analytics into your strategy to continuously refine and optimize your localized content. This feedback loop can identify areas for improvement, helping you better cater to the local audience&#39;s needs and preferences.</p><p>Engaging with a specialized agency can offer valuable expertise in both localization and the technical aspects required for a successful international web presence. Such partnerships provide access to specialized skills and knowledge, from professional translations to technical optimizations, ensuring that your localization strategy is effectively implemented and aligned with your business objectives.</p><p>By prioritizing a translation management system and a comprehensive localization strategy, you position your business for success in new markets by ensuring your digital content is accessible, relevant, and engaging to your target audience. This approach not only enhances brand perception but also fosters trust and loyalty among local customers.</p><p>➡️ Create a free new <a href="https://www.locize.app/register">user account</a> for a transformative localization experience</p><h3 id="6-Operations-and-supply-chain-management"><a href="#6-Operations-and-supply-chain-management" class="headerlink" title="6. Operations and supply chain management"></a>6. Operations and supply chain management</h3><p>Every market expansion strategy also requires you to plan your logistics and the associated operational processes in detail. There are few things today that have a more negative impact on your success than an inefficient supply chain. Ultimately, it&#39;s about customer service. And they are now used to receiving everything without long delivery times or detours. Also take local specifics such as logistics, customs, taxes and labor into account.</p><ul><li>Establish robust supply chain processes and work with reliable, local suppliers and logistics partners.</li><li>Comply with local regulations and standards regarding production, packaging and labeling.</li><li>Implement effective inventory and warehousing management to avoid supply shortages.</li></ul><h3 id="6-Financial-planning"><a href="#6-Financial-planning" class="headerlink" title="6. Financial planning"></a>6. Financial planning</h3><p>With a market expansion you are of course also aiming for an increase in sales. Accordingly, part of your market expansion strategy is to prepare detailed financial forecasts and set budgets. Take into account both one-off costs (e.g. market entry costs) and ongoing operating costs. Also plan buffers for unexpected expenses and potential currency risks.</p><ul><li>Include financial models in your market expansion strategy to run through different scenarios and see how different market situations affect your finances.</li><li>Secure sufficient financing and liquidity to support the expansion phase.</li><li>Implement an effective cost control and monitoring system to keep track of your finances.</li></ul><h3 id="7-Monitoring-and-adjustment"><a href="#7-Monitoring-and-adjustment" class="headerlink" title="7. Monitoring and adjustment"></a>7. Monitoring and adjustment</h3><p>The basis for your long-term success in a new market is continuous monitoring and evaluation of your activities. Within the Market Expansion Strategy, you should consider the progress of your set goals, both your market performance and performance, and customer feedback. It&#39;s important that you collect quantitative and qualitative data to get a complete picture of your expansion.</p><ul><li>Use CRM systems, analytics tools and financial reporting to track key performance indicators (KPIs) such as sales, market share, customer acquisition and customer satisfaction.</li><li>Schedule regular sessions (e.g. monthly or quarterly) to assess and discuss progress. To do this, you put together a team from different areas to include different perspectives.</li><li>Actively collect feedback from customers, partners and employees in the new market. Use surveys, customer interviews and market research to gain insights into market reaction and customer needs.</li></ul><p>But also be prepared to adjust your market expansion strategy based on the results. Be prepared for changes to products, marketing approaches or even the entire market entry strategy.</p><h2 id="What-if-the-market-expansion-strategy-fails"><a href="#What-if-the-market-expansion-strategy-fails" class="headerlink" title="What if the market expansion strategy fails? "></a>What if the market expansion strategy fails? <a name="failure"></a></h2><p>If your market expansion strategy fails, it is important not to lose heart or jump to conclusions. Failure is a natural part of entrepreneurship and holds valuable lessons that will help improve your future market expansion strategy.</p><p>First, you should conduct a thorough analysis to identify the reasons for the failure of your market expansion strategy. Illuminate all aspects of your market expansion strategy, from market research and target group analysis to marketing and sales. Take a close look at which assumptions were wrong, which approaches didn&#39;t work, and whether external factors such as economic changes or unforeseen events played a role.</p><p>Use this opportunity to learn from your mistakes and optimize your market expansion strategy. This might mean better understanding your audiences, adapting your products or services, or rethinking your marketing and sales efforts. Based on your analysis and the insights gained, you can then adjust your market expansion strategy accordingly. This means both minor optimizations and a comprehensive revision of your market expansion strategy plans. Be open to change and willing to try completely new things.</p><p>After you&#39;ve refocused your market expansion strategy, develop a new plan for entering the market or refocusing your operations. To do this, set yourself realistic goals and milestones and make sure that you have sufficient resources for implementation.</p><p>It should be said again: failure is not a reason to give up. Many successful companies initially failed before they found their way to success. Maintain your resolve and stay committed to pursuing your business goals.</p><p>What&#39;s important is that you learn from every failure and use this unique knowledge to improve your future endeavors. By remaining resilient and willing to adapt and learn, you can increase your chances of future success.</p>]]></content>
      
      
      
        <tags>
            
            <tag> market expansion </tag>
            
            <tag> product </tag>
            
            <tag> international market </tag>
            
            <tag> strategy </tag>
            
            <tag> business </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Localization strategy insights for Tech Executives</title>
      <link href="/blog/localization-strategy/"/>
      <url>/blog/localization-strategy/</url>
      
        <content type="html"><![CDATA[<br/><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/PtFEPtsmp-Y" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>Today, you&#39;re going to learn how to build a localization strategy that will help you grow your company quickly.</p><p>You will get a method on how you can increase your sales and make your customers more happy.</p><blockquote><p>The best part?</p></blockquote><p>We provide you with a <b>step-by-step plan of what you need</b> to get to your localization strategies. </p><p>We&#39;ll also show you some examples of major brands and how they did it.</p><h2 id="What-you-can-expect"><a href="#What-you-can-expect" class="headerlink" title="What you can expect"></a>What you can expect</h2><ul><li><a href="#what">Introduction to Localization Strategy</a></li><li><a href="#why">The Need for a Localization Strategy</a></li><li><a href="#challenges">Challenges in Localization</a></li><li><a href="#collaboration">The Role of Collaboration in Localization</a></li><li><a href="#build">Developing Your Localization Plan</a></li><li><a href="#localization">Benefits of localization</a></li><li><a href="#checklist">Your Localization Checklist</a></li><li><a href="#examples">Success Stories: Localization in Action</a></li><li><a href="#summary">Conclusion and Summary</a></li></ul><h2 id="Introduction-to-Localization-Strategy"><a href="#Introduction-to-Localization-Strategy" class="headerlink" title="Introduction to Localization Strategy"></a>Introduction to Localization Strategy<a name="what"></a></h2><p>A localization strategy tailors a company&#39;s market approach to accommodate the purchasing habits, customer behaviors, and cultural differences in each country it operates.</p><p>As the CTO, manager or tech lead of a fast-growing tech company, you&#39;re likely focused on maintaining a competitive edge and scaling your product to reach a global audience. </p><p>However, localization can often be an afterthought in the <a href="../what-is-software-localization/">software development</a> process, and the lack of a clear localization strategy can lead to delays, inconsistencies, and increased costs.</p><p><img src="localization-strategy-insights.webp" title="Localization strategy insights for Tech Executives"></p><h2 id="The-Need-for-a-Localization-Strategy"><a href="#The-Need-for-a-Localization-Strategy" class="headerlink" title="The Need for a Localization Strategy"></a>The Need for a Localization Strategy<a name="why"></a></h2><p>Developing local leadership and skills in new markets can be challenging, with unexpected obstacles such as compliance with local laws. </p><p>Therefore, globalization should be a gradual strategy, considering the real costs, time, and opportunities new markets present. <a href="https://hbr.org/2016/04/does-your-company-have-what-it-takes-to-go-global?ab=at_art_art_1x1" title="study of harvard business review">Harvard business review</a> studies show successful global companies adopt this approach.</p><p>Successful global companies operate by:</p><ul><li>Ensuring they possess the required expertise and skills.</li><li>Aligning international opportunities with the company&#39;s goals and capabilities.</li><li>Adapting marketing policies and processes to the opportunity.</li><li>Maintaining legal and ethical standards with international flexibility.</li><li>Promoting a culture tolerant of financial uncertainty and market fluctuations.</li><li>Preparing thoroughly and accepting the occurrence of mistakes, which is essential for effective localization strategy.</li></ul><p>➡️ Localization makes products fit better with local cultures and needs, helping to attract new customers more easily. This approach helps a company grow globally by being more relatable to different audiences.</p><h2 id="Challenges-in-Localization"><a href="#Challenges-in-Localization" class="headerlink" title="Challenges in Localization"></a>Challenges in Localization<a name="challenges"></a></h2><p>One of the key challenges in localization is <strong>striking the balance</strong> between <strong>speed</strong> and <strong>quality</strong>. </p><p>On one hand, you want to get your product to market as quickly as possible, but on the other hand, you also want to ensure that your localized content is accurate, relevant, and culturally appropriate. </p><p>To achieve this balance, it&#39;s essential to integrate localization early in the development process and to establish clear guidelines and processes for your localization team. Learn more <a href="../localization-fun/">here</a>.</p><p>Another challenge is <strong>maintaining consistency</strong> and <strong>reducing costs</strong> as your product and localization team scale. </p><p>To tackle this, you can implement <a href="https://docs.locize.com/whats-inside/auto-machine-translation">automation</a> and <a href="https://docs.locize.com/whats-inside/translation-memory">translation memory</a> tools that can help to improve efficiency and reduce the need for manual translation and <a href="https://docs.locize.com/whats-inside/review-workflow">review</a>.</p><h2 id="The-Role-of-Collaboration-in-Localization"><a href="#The-Role-of-Collaboration-in-Localization" class="headerlink" title="The Role of Collaboration in Localization"></a>The Role of Collaboration in Localization<a name="collaboration"></a></h2><p>Involving all stakeholders, including product, development, and localization teams, in the localization process ensures consistent content and streamlines the process. A centralized <a href="../tms/">translation management system (TMS)</a> facilitates this by supporting real-time translation delivery, version control, translation memory, and <a href="https://docs.locize.com/more/notifications">team collaboration tools</a>.</p><p>Locize serves as an effective solution for achieving these objectives. </p><p>It is a user-friendly localization platform offering real-time translation, collaborative features, advanced options such as <a href="https://docs.locize.com/more/versioning">versioning</a> and <a href="https://docs.locize.com/whats-inside/translation-memory">translation memory</a>, and extensive <a href="https://docs.locize.com/integration/instrumenting-your-code">variety of integrations</a> compatible with existing tools and workflows.</p><p><img src="role-of-collaboration-in-localization.webp" title="The Role of Collaboration in Localization"></p><h2 id="Developing-Your-Localization-Strategies"><a href="#Developing-Your-Localization-Strategies" class="headerlink" title="Developing Your Localization Strategies"></a>Developing Your Localization Strategies<a name="build"></a></h2><h3 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare:"></a>Prepare:</h3><ul><li>Team Setup: Choose the right team and set achievable deadlines.</li><li>Local Talent: Hire locals for insights and use a TMS for quick collaboration and feedback.</li></ul><h3 id="Gather-Inputs"><a href="#Gather-Inputs" class="headerlink" title="Gather Inputs:"></a>Gather Inputs:</h3><ul><li>Market Analysis: Study market potential and audience needs.</li><li>Feature Selection: Decide on features and content for localization.</li><li>Pricing Strategy: Understand pricing within legal and economic contexts.</li><li>Competitive Landscape: Identify competitors and consumer trends.</li><li>Use Technology: Adopt TMS and automation for smoother localization.</li></ul><h3 id="Create-Your-Vision"><a href="#Create-Your-Vision" class="headerlink" title="Create Your Vision:"></a>Create Your Vision:</h3><ul><li>Define Purpose: Craft distinct mission and vision statements.</li><li>Local Insights: Work with or build local teams for market understanding.</li><li>Brand Adaptation: Keep brand core consistent with local tweaks for relevance.</li></ul><h3 id="Build-the-Plan"><a href="#Build-the-Plan" class="headerlink" title="Build the Plan:"></a>Build the Plan:</h3><ul><li>Adaptation Plan: Localize products, apps, and sites for language and culture.</li><li>Business Strategy: Outline a global business plan with localized goals.</li><li>Local Marketing: Use global brand principles with local marketing tactics. Learn about localization marketing here.</li><li>Content Strategy: Plan messaging, graphics, and UX, ensuring consistency with TMS.</li><li>Cultural Sensitivity: Navigate cultural nuances and respect local customs.</li><li>E-commerce Considerations: Adapt to local payment and tax requirements.</li></ul><h3 id="Make-Tests-with-Localized-Content"><a href="#Make-Tests-with-Localized-Content" class="headerlink" title="Make Tests with Localized Content:"></a>Make Tests with Localized Content:</h3><ul><li>Market Testing: Check responses to localized messages and adjust with TMS.</li><li>Customer Experience: Align customer journeys with local expectations using TMS analytics.</li></ul><h3 id="Put-the-Strategy-into-Practice"><a href="#Put-the-Strategy-into-Practice" class="headerlink" title="Put the Strategy into Practice:"></a>Put the Strategy into Practice:</h3><ul><li>Enhance Collaboration: Improve global and local team feedback loops.</li><li>Unified Approach: Ensure teamwork across departments for a cohesive strategy.</li><li>Measure Success: Set and track KPIs.</li><li>Workflow Management: Create scalable processes for multi-language management.</li></ul><h2 id="Benefits-of-localization"><a href="#Benefits-of-localization" class="headerlink" title="Benefits of localization"></a>Benefits of localization<a name="localization"></a></h2><h3 id="1-It-helps-to-reduce-immediate-costs"><a href="#1-It-helps-to-reduce-immediate-costs" class="headerlink" title="1. It helps to reduce immediate costs"></a>1. It helps to reduce immediate costs</h3><p>Lack of preparation can result in significant up-front expenses like product or service recalls or the need to alter marketing tactics when entering a new market. </p><p>If you use a thorough localization plan, the likelihood of the above happening and the added costs that result from it will be reduced.</p><h3 id="2-It-improves-branding-39-s-trust"><a href="#2-It-improves-branding-39-s-trust" class="headerlink" title="2. It improves branding&#39;s trust"></a>2. It improves branding&#39;s trust</h3><p>It considers the branding colors and marketing messages that are suitable for the regional market. Every nation has a different idea of what is &quot;normal.&quot; The promotion of new goods and services is one of branding&#39;s most significant advantages. </p><p>People who are loyal to a brand are inevitably interested in any new products the brand releases. This is essential for brands which are going global.</p><h3 id="3-It-increases-the-revenue-by-1-5x"><a href="#3-It-increases-the-revenue-by-1-5x" class="headerlink" title="3. It increases the revenue by 1.5x"></a>3. It increases the revenue by 1.5x</h3><p>Untapped markets of billions are ready to purchase, <a href="https://hbr.org/2006/04/localization-the-revolution-in-consumer-markets" title="with businesses that localize seeing revenues 1.5 times higher">with businesses that localize seeing revenues 1.5 times higher</a> than those that don&#39;t. </p><p>Utilizing the right translation management system in internationalization significantly boosts efficiency for project managers and translators, enhancing both revenue and <a href="https://en.wikipedia.org/wiki/Return_on_investment">return on investment</a>. This approach streamlines content management and minimizes the need for manual coordination, maximizing resource use.</p><h3 id="4-It-reduces-customer-churn"><a href="#4-It-reduces-customer-churn" class="headerlink" title="4. It reduces customer churn"></a>4. It reduces customer churn</h3><p>The number of consumers or subscribers who ceased using your product or service over a specific time period is referred to as your customer churn rate. The degree to which your product will satisfy customers and reduce customer turnover depends on a number of factors. </p><p>Localization is helping to reduce overall churn in this situation. The most crucial factors, including language barriers, local customer habits, and cultural considerations, will be taken into account during localization of a business.</p><h2 id="Your-Localization-Checklist"><a href="#Your-Localization-Checklist" class="headerlink" title="Your Localization Checklist"></a>Your Localization Checklist<a name="checklist"></a></h2><p>If you have setup your localization-strategy and successfully decided how you will structure the corporate website, then it&#39;s time to start localizing your content.</p><p><a href="/blog/localization/" title="The meaning of localization">The meaning of localization</a> is adjusting your content to encourage customers in new markets to buy from you.</p><ul><li>Decide how to integrate localization in the development process</li><li>Let your developer add new segments to translation management system</li><li>Let your translators start the work</li><li>Review the work of the translators</li><li>Deliver the content to the end users</li><li>Check your progress with project metrics</li></ul><p>➡️ Especially with using a <a href="https://locize.com/" title="localization service">localization service</a>, you can see the <b>impact of your content and the strategy right away when enter new markets</b>. You can also determine whether the strategy is working as intended.</p><h2 id="Success-Stories-Localization-in-Action"><a href="#Success-Stories-Localization-in-Action" class="headerlink" title="Success Stories: Localization in Action"></a>Success Stories: Localization in Action<a name="examples"></a></h2><p>Localization has clearly become a competitive advantage. If your business wants to enter and thrive in new markets in this global economy, you must localize your experience for people all around the world.</p><p>Best practices and real-world examples of how successful tech companies have approached localization are many, like <a href="https://www.netflix.com/">Netflix</a>, <a href="https://facebook.com/">Facebook</a>, and <a href="https://microsoft.com/">Microsoft</a> they have build scalable localization strategies that enabled them to reach <a href="../globalization-vs-localization/">global audiences</a> while maintaining a high level of quality and consistency.</p><p>Here you find more popular brands which have implemented their own successful strategy for localization:</p><h4 id="1-World-Wide-Fund-For-Nature-WWF"><a href="#1-World-Wide-Fund-For-Nature-WWF" class="headerlink" title="1) World Wide Fund For Nature (WWF)"></a>1) <a href="https://www.worldwildlife.org/">World Wide Fund For Nature (WWF)</a></h4><p>WWF is doing a lot to engage prospective audiences throughout the world. </p><p><a href="https://www.worldwildlife.org/" title="wwf"><img src="wwf.webp" alt="wwf" title="wwf"></a></p><p>By emphasizing the information that is most important to readers, the WWF is able to create a more appealing experience with more engaging content that is always new and fresh.</p><p>✅ It is not only translating its website; it is providing the appropriate material to the appropriate viewers. </p><h4 id="2-Starbucks-Coffee-Company"><a href="#2-Starbucks-Coffee-Company" class="headerlink" title="2) Starbucks Coffee Company"></a>2) <a href="https://www.starbucks.com/">Starbucks Coffee Company</a></h4><p>The company&#39;s website has been localized, making it available in the local language and in accordance with local tastes.</p><p><a href="https://www.starbucks.com/" title="Starbucks Coffee Company"><img src="starbucks.webp" alt="Starbucks Coffee Company" title="starbucks"></a></p><p>They tailor the formulas and packaging to the market, emphasizing local ingredients and creative designs.</p><p>✅ Starbucks, for example, was localizing its brand and adapting to Indian culture in India. It presents various goods with an Indian flavor and emphasizes tea over coffee since Indians are more associated with tea. </p><p>✅ In the United Kingdom, Starbucks adapted to local tastes by including scones and bacon butties on select menus.</p><p>Even more examples from our clients you will find in our blog post about <a href="/blog/website-localization/" title="website localization">website localization</a> </p><h2 id="Next-step-Scalable-localization-strategy"><a href="#Next-step-Scalable-localization-strategy" class="headerlink" title="Next step: Scalable localization strategy"></a>Next step: Scalable localization strategy<a name="summary"></a></h2><p>Implementing a scalable localization strategy is key for companies aiming for global growth and competitiveness. By understanding target customers and tailoring actions to their needs, localization promises significant ROI and stakeholder satisfaction. Using tools like automation, translation memory, and platforms like Locize can streamline the process, ensuring quality, reducing costs, and improving team collaboration.</p><p><b>Now we want to turn it over to you:</b></p><p>Do you plan to build up a localization strategy?</p><p>Or maybe you have a question about something you read.</p><p>Either way, we are happy to help at <a href="mailto:support@locize.com" title="support@locize.com">support@locize.com</a> right now.</br></p><p><a class="btn btn-outline btn-xl" style="color:white" href="https://www.locize.app/register" title="register to locize">Start now</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> international strategy </tag>
            
            <tag> marketing </tag>
            
            <tag> transnational strategy </tag>
            
            <tag> successful global localization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i18next for React: Exploring the Right Module for Your Project</title>
      <link href="/blog/i18next-in-react/"/>
      <url>/blog/i18next-in-react/</url>
      
        <content type="html"><![CDATA[<p><img src="react-i18next-approaches.jpg"></p><p>In the dynamic realm of React.js-based projects, the implementation of <a href="/i18next.html">i18next</a> for <a href="../what-is-i18n/">internationalization</a> isn&#39;t a one-size-fits-all endeavor. The versatile nature of React.js projects, coupled with diverse tech stacks and project types, gives rise to a spectrum of approaches for integrating i18next seamlessly. Understanding the nuances of these approaches is pivotal in crafting a tailored and efficient internationalization strategy for your specific project.</p><p>As we delve into the expansive world of i18next in React.js, this guide aims to unravel the intricacies of different implementation methods. Whether you&#39;re working on a standard React project, leveraging the power of Next.js, embracing the App Router paradigm, exploring Remix, or navigating the intricacies of Gatsby, we&#39;ll walk through each approach step-by-step. From plain React.js applications to the more complex structures of Next.js, Remix, and Gatsby, we&#39;ll explore how i18next can be harnessed to its full potential.</p><p>Join us on this journey as we navigate the landscape of React.js and i18next integration, discovering the ideal approach that aligns with your chosen tech stack and project requirements. Through comprehensive examples and insights, this guide aims to empower you to make informed decisions and implement i18n seamlessly in your React-based projects. Let&#39;s embark on this exploration of internationalization possibilities, where the choice of approach becomes a key factor in delivering a truly global user experience.</p><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><ul><li><a href="#normal">Usual React.js (client side)</a></li><li><a href="#nextjs">Next.js</a><ul><li><a href="#nextjs-pages">Pages Router</a></li><li><a href="#nextjs-app">App Router</a></li></ul></li><li><a href="#remix">Remix</a></li><li><a href="#gatsby">Gatsby</a></li></ul><h2 id="Usual-React-js-client-side"><a href="#Usual-React-js-client-side" class="headerlink" title="Usual React.js (client side) "></a>Usual React.js (client side) <a name="normal"></a></h2><p><a href="https://react.i18next.com/"><code>react-i18next</code></a> stands as a powerful internationalization framework tailored for <a href="https://react.dev/">React</a> and <a href="https://reactnative.dev/">React Native</a> applications. Leveraging the robust capabilities of <a href="https://www.i18next.com/"><code>i18next</code></a>, this library simplifies the implementation of (not only) client-side internationalization, offering a streamlined approach for managing translations and delivering a seamless multilingual user experience.</p><div style="border-left: 0.5px solid #27a69a;padding: 0.5rem 2rem">  <h3 style="color:#27a69a;">Learn more</h3>  <div style="width: 100%; margin-bottom: 0">    <span style="float: left; width: 49%; margin-right: 1%">      ➡️ Check out <a href="../react-i18next/">this guide</a> to learn more about react-i18next...      <br />      🧑‍💻 An example can be found <a href="https://github.com/locize/react-i18next-example-app">here</a>. And a TypeScript version <a href="https://github.com/locize/react-i18next-example-app-ts">here</a>.      <br />      📱 And a React Native example <a href="https://github.com/i18next/react-i18next/tree/master/example/ReactNativeProject">here</a> or <a href="https://github.com/i18next/react-i18next/tree/master/example/ReactNativeLocizeProject">here</a>.    </span>    <a style="float: left; width: 49%; margin-left: 1%" href="../react-i18next/">      <img src="../react-i18next/react-localization.jpg" title="react-i18next" />    </a>    <div style="clear: both;"></div>  </div></div><h2 id="Next-js"><a href="#Next-js" class="headerlink" title="Next.js "></a>Next.js <a name="nextjs"></a></h2><p>In the realm of <a href="https://nextjs.org/">Next.js</a>, a framework for React, the integration of <code>i18next</code> introduces additional considerations, as the approach to internationalization varies based on the chosen strategy within the Next.js ecosystem. Whether opting for the traditional <a href="https://nextjs.org/docs/pages">Pages Router</a> approach, embracing the <a href="https://nextjs.org/docs/app">App Router</a> paradigm, or incorporating Server-Side Generation (SSG), <code>i18next</code> adapts to the intricacies of each, providing a flexible and efficient solution.</p><h3 id="Pages-Router"><a href="#Pages-Router" class="headerlink" title="Pages Router "></a>Pages Router <a name="nextjs-pages"></a></h3><p>When opting for the <a href="https://nextjs.org/docs/pages">Pages Router</a> approach, the integration of <code>react-i18next</code> often involves the use of <a href="https://next.i18next.com/"><code>next-i18next</code></a> - a companion library that streamlines the internationalization setup. This approach aligns seamlessly with the standard React page structure in Next.js, where each page is a React component.</p><div style="border-left: 0.5px solid #27a69a;padding: 0.5rem 2rem">  <h3 style="color:#27a69a;">Learn more</h3>  <div style="width: 100%; margin-bottom: 0">    <span style="float: left; width: 49%; margin-right: 1%">      ➡️ Check out <a href="../next-i18next/">this guide</a> to learn more about next-i18next...      <br />      🧑‍💻 An example can be found <a href="https://github.com/i18next/next-i18next/tree/master/examples/simple">here</a> or <a href="https://github.com/locize/next-i18next-locize">here</a>.      <br />      <br />      <br />      <br />      <br />      👩🏽‍💻 And an SSG <a href="../next-i18n-static/">guide</a> and example <a href="https://github.com/i18next/next-i18next/tree/master/examples/ssg">here</a> or <a href="https://github.com/i18next/next-language-detector/tree/main/examples/basic">here</a>.    </span>    <div style="float: left; width: 49%; margin-left: 1%">      <a href="../react-i18next/">        <img src="../next-i18next/next-i18next.jpg" title="next-i18next" />      </a>      <a href="../next-i18n-static/">        <img src="../next-i18n-static/title.jpg" title="next-i18next-static" />      </a>    </div>    <div style="clear: both;"></div>  </div></div><h3 id="App-Router"><a href="#App-Router" class="headerlink" title="App Router "></a>App Router <a name="nextjs-app"></a></h3><p>For projects adopting the <a href="https://nextjs.org/docs/app">App Router</a> paradigm in Next.js, the integration of <code>react-i18next</code> offers a seamless solution for internationalization. In this approach, the App Router structure provides a centralized and efficient routing system, and react-i18next effortlessly adapts to this architecture. Here <code>next-i18next</code> is not necessary anymore.</p><div style="border-left: 0.5px solid #27a69a;padding: 0.5rem 2rem">  <h3 style="color:#27a69a;">Learn more</h3>  <div style="width: 100%; margin-bottom: 0">    <span style="float: left; width: 49%; margin-right: 1%">      ➡️ Check out <a href="../next-app-dir-i18n/">this guide</a> to learn more about i18next for the App Router approach...      <br />      🧑‍💻 An example can be found <a href="https://github.com/i18next/next-app-dir-i18next-example">here</a>. And a TypeScript version <a href="https://github.com/i18next/next-app-dir-i18next-example-ts">here</a>.    </span>    <a style="float: left; width: 49%; margin-left: 1%" href="../next-app-dir-i18n/">      <img src="../next-app-dir-i18n/next-app-dir-i18n.jpg" title="next-app-dir-i18n" />    </a>    <div style="clear: both;"></div>  </div></div><h2 id="Remix"><a href="#Remix" class="headerlink" title="Remix "></a>Remix <a name="remix"></a></h2><p>For <a href="https://remix.run/">Remix</a> projects, the integration of <a href="https://github.com/sergiodxa/remix-i18next"><code>remix-i18next</code></a> enhances the development process by simplifying the setup for internationalization. This specialized library aligns seamlessly with Remix&#39;s architecture, offering a straightforward solution for managing translations and creating dynamic, multilingual user experiences.</p><div style="border-left: 0.5px solid #27a69a;padding: 0.5rem 2rem">  <h3 style="color:#27a69a;">Learn more</h3>  <div style="width: 100%; margin-bottom: 0">    <span style="float: left; width: 49%; margin-right: 1%">      ➡️ Check out the <a href="../remix-i18n/">part 1</a> and <a href="../remix-i18next/">part 2</a> guide to learn more...      <br />      🧑‍💻 An example can be found <a href="https://github.com/locize/locize-remix-i18next-example/tree/local">here</a> and <a href="https://github.com/locize/locize-remix-i18next-example">here</a>.    </span>    <a style="float: left; width: 49%; margin-left: 1%" href="../remix-i18n/">      <img src="../remix-i18n/remix-localization.jpg" title="remix" />    </a>    <div style="clear: both;"></div>  </div></div><h2 id="Gatsby"><a href="#Gatsby" class="headerlink" title="Gatsby "></a>Gatsby <a name="gatsby"></a></h2><p>The integration of <a href="https://github.com/microapps/gatsby-plugin-react-i18next"><code>gatsby-plugin-react-i18next</code></a> into <a href="https://www.gatsbyjs.com/">Gatsby</a> projects provides a powerful mechanism for building multilingual websites. By seamlessly integrating with Gatsby&#39;s capabilities and simplifying the setup, this plugin empowers developers to create dynamic and performant user experiences for audiences around the world.</p><div style="border-left: 0.5px solid #27a69a;padding: 0.5rem 2rem">  <h3 style="color:#27a69a;">Learn more</h3>  <div style="width: 100%; margin-bottom: 0">    <span style="float: left; width: 49%; margin-right: 1%">      ➡️ Check out <a href="../gatsby-i18n/">this guide</a> to learn more...      <br />      🧑‍💻 An example can be found <a href="https://github.com/locize/locize-gatsby-example">here</a>.    </span>    <a style="float: left; width: 49%; margin-left: 1%" href="../gatsby-i18n/">      <img src="../gatsby-i18n/gatsby-i18next.jpg" title="gatsby" />    </a>    <div style="clear: both;"></div>  </div></div><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>As we wrap up this journey through the diverse landscape of i18next in React.js projects, it&#39;s clear that internationalization is not a one-size-fits-all endeavor. The versatility of i18next, combined with the unique characteristics of React, Next.js, Remix, and Gatsby, allows developers to tailor their approach based on project requirements.</p><p>Whether you&#39;ve opted for the familiar territory of a standard React project, navigated the dynamic routes of Next.js, embraced the simplicity of Remix, or ventured into the world of Gatsby, your understanding of i18next&#39;s integration has undoubtedly expanded.</p><p>By leveraging the power of <code>react-i18next</code>, <code>next-i18next</code>, <code>remix-i18next</code>, and <code>gatsby-plugin-react-i18next</code>, you&#39;ve gained the tools to create truly globalized applications. The seamless integration of i18next across these frameworks empowers developers to transcend language barriers and provide a consistent, multilingual user experience.</p><p>As you embark on your future React projects, armed with the knowledge acquired here, consider the unique needs of your application and audience. Each approach comes with its own strengths, and by choosing the right module for your project, you pave the way for a more inclusive and accessible digital landscape.</p><p>Thank you for joining us on this exploration of i18next in React. May your internationalization endeavors be smooth, your translations seamless, and your applications truly global.</p><p>Happy coding!</p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> react </tag>
            
            <tag> react-i18next </tag>
            
            <tag> gatsby </tag>
            
            <tag> gatsby-plugin-react-i18next </tag>
            
            <tag> next </tag>
            
            <tag> remix-i18next </tag>
            
            <tag> remix </tag>
            
            <tag> next-i18next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is a Translation Management System (2024)</title>
      <link href="/blog/tms/"/>
      <url>/blog/tms/</url>
      
        <content type="html"><![CDATA[<div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/9cWiivvy_zs" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>The translation management system (TMS) is a software to simplify the human translation process. In order to handle translations and make things simpler for the translator, the program automates non-essential activities and offers useful features. </p><p>Learn how to use a TMS as an integral tool for a truly transformative experience in your business.</p><p>Understand how the speed at which development cycles accelerate and software quality grows to new heights.</p><h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul><li><a href="#functions">What functions does it require?</a></li><li><a href="#benefits">Benefits of using a TMS</a></li><li><a href="#businesses">How translation management helped businesses in achieving success</a></li><li><a href="#compare">What to consider while comparing various software solutions</a></li><li><a href="#locize">Reasons for your project manager or developer to select locize as your TMS</a></li><li><a href="#transformative">Transformative experience with continuous integration</a></li></ul><h2 id="What-functions-does-it-require"><a href="#What-functions-does-it-require" class="headerlink" title="What functions does it require? "></a>What functions does it require? <a name="functions"></a></h2><p>A TMS is made for the purpose of centrally managing translation and <a href="/blog/localization/" title=" localization">localization</a> tasks. Let&#39;s examine the six main functions that a translation management platform should have:</p><ol><li>Managing translation workflows</li><li>Managing terminology</li><li>Use translation memory</li><li>Get the history and numbers</li><li>Auto machine translation</li><li>Integration API</li></ol><p><img src="translation-management-system.webp" alt="what is a translation management system"></p><h3 id="Managing-translation-workflows"><a href="#Managing-translation-workflows" class="headerlink" title="Managing translation workflows"></a>Managing translation workflows</h3><p>The TMS reduce the amount of manual effort performed during each of the steps. Otherwise, it could be difficult for your managers, translators, and reviewers to coordinate and promptly execute crucial project specifics, which frequently results in a longer time to market.</p><ol><li>Define what to translate</li><li>Sending files to translators</li><li>During translation</li><li>Receiving files from translators </li><li>Maybe review the files</li></ol><p>The TMS reduce the amount of manual effort performed during each of the steps. Otherwise, it could be difficult for your managers, translators, and reviewers to coordinate and promptly execute crucial project specifics, which frequently results in a longer time to market.</p><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><p style="color:grey;">  A good TMS will trigger a review procedure each time a translation is modified. Until one of the translation suggestions is accepted, the actual value won't change.</p></div><h3 id="Managing-terminology"><a href="#Managing-terminology" class="headerlink" title="Managing terminology"></a>Managing terminology</h3><p>Terminology is the fundamental cornerstone of all translations. To describe objects and form sentences, people use words, phrases, and jargon. </p><p>If your content generation has to be extended, certain criteria for managing material must be established for all parties involved. </p><p>You should keep track of terms that should or shouldn&#39;t be translated via a glossary. It exists to facilitate the use of the language that your business likes by human translators.</p><h3 id="Use-the-translation-memory"><a href="#Use-the-translation-memory" class="headerlink" title="Use the translation memory"></a>Use the translation memory</h3><p>A TMS&#39;s translation memory feature is especially crucial since it greatly boosts the productivity of language localization <a href="/blog/language-localization/" title="language localization">language localization</a>. </p><p>You can utilize words and phrases from previous work rather than coming up with new language every time. To assist human translators, sentences that have already been translated are stored in a database called a translation memory (TM).</p><h3 id="Get-the-history-and-numbers"><a href="#Get-the-history-and-numbers" class="headerlink" title="Get the history and numbers"></a>Get the history and numbers</h3><p>Every project management tool must provide the most crucial indicators about budget, progress, and other factors.</p><p>The majority of the tasks are contained in one program by the TMS. As a result, reporting the numbers is a must. The data insights from the TMS help improve the administration of your localization projects.</p><p>Additionally, keeping track of all previous translations might be helpful. In the event of an inconvenience, it is possible to demonstrate at any moment who made what changes and when.</p><p>Locize, our translation management system, offers an overview of the control center with the key figures for the ongoing project:</p><p>The control center of our <a href="/" title="localization software">localization software</a> displays all pertinent high-level data:</p><ul><li>user management</li><li>billing (customer details, billing history, budget limit, ...)</li><li>project settings (slack integration, webhook, integration metrics, ...)</li><li>ordering (services, pending orders)</li><li>branches</li><li>project health and metrics</li></ul><h3 id="Auto-Machine-Translation"><a href="#Auto-Machine-Translation" class="headerlink" title="Auto Machine Translation"></a>Auto Machine Translation</h3><p>With this capability, the TMS attempts to entirely automate the translation process. Traditionally, an application program interface (API) is used to connect translated texts to an engine that handles the translation automatically. </p><p>Because the results from artificial intelligence are typically not 100% fine, a translator is frequently needed to evaluate the auto translation output. Read more in the <a href="/blog/ai-in-localization" title="AI in Localization">AI in Localization</a> article. </p><p>For locize, the entire automatic machine translation process occurs in the backend, which means you&#39;ll see the translated result after saving the new keys in reference language.</p><h4 id="Should-you-choose-machine-translation-a-translation-agency-or-a-freelancer"><a href="#Should-you-choose-machine-translation-a-translation-agency-or-a-freelancer" class="headerlink" title="Should you choose machine translation, a translation agency or a freelancer?"></a>Should you choose machine translation, a translation agency or a freelancer?</h4><p>These are three options when there is a need of translating content. Whether to engage a translation agency, a freelancer, or make use of machine translation. </p><p>Machine translation would be the most cost-effective approach because it is virtually free. However, if no one reviews the translated information, there will undoubtedly be a lack of transaltion quality.</p><p>Freelance translators are frequently enthusiastic about their work. They are frequently subject specialists who can execute sophisticated translations in their fields. This might be a wonderful alternative for those on a restricted budget. Working with a person rather than a firm is less expensive, and you don&#39;t have to sacrifice quality.</p><p>Translation agencies have greater resources to devote to your job than a freelancer. In addition, they offer a wide range of translation and localization services. They have extensive expertise in assisting you to overcome linguistic and cultural difficulties.</p><p>You will discover your ideal match for sure.</p><h3 id="Integration-API"><a href="#Integration-API" class="headerlink" title="Integration API"></a>Integration API</h3><p>API technology is used by excellent TMS to connect to and interact with cloud-based services. This enables it to automate and expand translation management in any content management system for all content kinds.</p><p>There is thorough documentation for locize on how to utilize an API to integrate any of your applications. The documentation may be found at <a href="https://docs.locize.com/integration/api">docs.locize.com/integration/api</a>.</p><h2 id="Benefits-of-using-a-TMS"><a href="#Benefits-of-using-a-TMS" class="headerlink" title="Benefits of using a TMS "></a>Benefits of using a TMS <a name="benefits"></a></h2><p>Manual transmission and receipt of translated texts is inefficient for bigger projects and may result in unstructured chaos and significant financial loss. If regular spreadsheets are inadequate for managing the volume of material, the TMS is for you.</p><p>Because a good TMS is </p><ul><li>Highly scalable</li><li>Easy to integrate</li><li>Easy to understand</li><li>Help with professional translation</li><li>Unleash localization progress</li><li>Notifies whenever something significant occurs</li></ul><p>In any event, if a company need expert translation for its own brand material, it makes sense to employ a TMS to make the translation process much easier. </p><p>On the surface, it appears to be a large investment, but upon closer inspection, the investment will pay for itself many times over as the process becomes much more efficient and dependable.</p><p>It&#39;s also how larger businesses do it; they have content management systems (CMS) as independent but linked applications or as simple add-ons that can meet particular multilingual requirements.</p><h2 id="How-translation-management-helped-businesses-in-achieving-success"><a href="#How-translation-management-helped-businesses-in-achieving-success" class="headerlink" title="How translation management helped businesses in achieving success "></a>How translation management helped businesses in achieving success <a name="businesses"></a></h2><p>Through the adoption of a Translation Management System (TMS), these enterprises harnessed enhanced productivity, cost-efficiency, and revenue growth, highlighting the TMS&#39;s transformative role in their success.</p><h3 id="30-more-projects-achieved-with-the-same-team"><a href="#30-more-projects-achieved-with-the-same-team" class="headerlink" title="30% more projects achieved with the same team"></a>30% more projects achieved with the same team</h3><p>Think of a company that does all of its translation work by hand. They automate project procedures after putting in place a TMS, which significantly shortens project turnaround times. Weeks-long tasks can now be finished in a matter of days. This increased productivity enables the business to reallocate important resources, which is especially important in a situation when there is a shortage of trained labor. For instance, Company A reports a 25% gain in revenue in addition to completing 30% more tasks per month after implementing a TMS.</p><h3 id="20-lower-expenses-to-reinvest-in-growing-the-company"><a href="#20-lower-expenses-to-reinvest-in-growing-the-company" class="headerlink" title="20% lower expenses to reinvest in growing the company"></a>20% lower expenses to reinvest in growing the company</h3><p>Without a TMS, project management can be labor-intensive and costly. By simplifying project administration and automating key tasks, a TMS minimizes administrative overhead. For example, Company B cut its project management costs by 20% after implementing a TMS, directly contributing to profit growth. These cost savings can be reinvested in business expansion, technology upgrades, or boosting the bottom line.</p><h3 id="25-increase-in-revenue-as-demand-rises"><a href="#25-increase-in-revenue-as-demand-rises" class="headerlink" title="25% increase in revenue as demand rises"></a>25% increase in revenue as demand rises</h3><p>Company C was looking to expand its client base and take on more translation projects. However, they were concerned about managing increased workloads effectively. By adopting a TMS with robust scalability, they could effortlessly accommodate the growing demand. The TMS allowed them to streamline workflows and maintain efficiency as their client base expanded. The result? A 25% growth in revenue within a year.</p><h3 id="40-more-recurring-business-with-higher-quality"><a href="#40-more-recurring-business-with-higher-quality" class="headerlink" title="40% more recurring business with higher quality"></a>40% more recurring business with higher quality</h3><p>Consistency and quality in translation are pivotal to client satisfaction. By storing translation memories and terminology databases, a TMS ensures consistent, high-quality translations. When clients receive accurate and reliable translations on every project, they become loyal customers. For instance, Company D witnessed a 40% increase in repeat business due to the improved quality of translations made possible by their TMS.</p><h3 id="20-of-revenue-boost-in-global-markets"><a href="#20-of-revenue-boost-in-global-markets" class="headerlink" title="20% of revenue boost in global markets"></a>20% of revenue boost in global markets</h3><p>Company E was focused on a domestic market. However, they wanted to tap into international markets. With a TMS, they were able to translate their content into multiple languages, opening doors to new global markets. They experienced a 20% revenue boost in the first year alone by entering untapped regions and reaching a wider audience.</p><p><img src="control-center.webp" alt="control center"></p><h2 id="What-to-consider-while-comparing-various-software-solutions"><a href="#What-to-consider-while-comparing-various-software-solutions" class="headerlink" title="What to consider while comparing various software solutions "></a>What to consider while comparing various software solutions <a name="compare"></a></h2><p>When you compare different translation management software, then ask the following questions regarding your business:</p><ul><li>Who will be impacted and how quickly (stakeholders, customers, employees)?</li><li>How will the TMS improve the end-user experience?</li><li>How much are we willing to spend on a TMS?</li><li>Which infrastructure will the developed material be hosted on?</li><li>Is it possible to automate any process?</li></ul><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/YQryHo1iHb8" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="Reasons-for-your-project-manager-or-developer-to-select-locize-as-your-TMS"><a href="#Reasons-for-your-project-manager-or-developer-to-select-locize-as-your-TMS" class="headerlink" title="Reasons for your project manager or developer to select locize as your TMS "></a>Reasons for your project manager or developer to select locize as your TMS <a name="locize"></a></h2><p>locize is an excellent product for several reasons: Simple interface for managing translations. It is possible to regulate exactly what each translator sees, and they like doing so. The interface also allows you to check what translations are lacking and divide your application into multiple namespaces.<br />Additionally, locize is the <a href="../i18n-l10n-t9n-tms/">key piece</a> to localize your software project, together with <a href="https://www.i18next.com/">i18next</a>.</p><p>locize removes the pain in the translation process. No more delays in shipping your software because of missing translations. Translators can keep up with changes from day one. The continuous localization process keeps up with your demanding business.</p><h3 id="1-Empowerment-through-Simplicity"><a href="#1-Empowerment-through-Simplicity" class="headerlink" title="1. Empowerment through Simplicity"></a>1. Empowerment through Simplicity</h3><p>Locize offers an intuitive interface that makes translation management straightforward. You can precisely control what each translator sees, track missing translations effortlessly, and organize your application with multiple namespaces. It’s everything you need, without the complexity you dread.</p><h3 id="2-End-to-Delays-in-Software-Delivery"><a href="#2-End-to-Delays-in-Software-Delivery" class="headerlink" title="2. End to Delays in Software Delivery"></a>2. End to Delays in Software Delivery</h3><p>Say goodbye to the all-too-common translation delays that keep your software from shipping on time. With Locize, translators can begin their work from day one, thanks to our continuous localization process that keeps pace with your agile business needs.</p><h3 id="3-Robust-Versioning-Support"><a href="#3-Robust-Versioning-Support" class="headerlink" title="3. Robust Versioning Support"></a>3. Robust Versioning Support</h3><p>Every developer understands the significance of version control in software development. Locize excels here, ensuring that updates are managed without confusion, preserving your hard work, and enhancing team collaboration.</p><h3 id="4-Escape-Service-Lock-In"><a href="#4-Escape-Service-Lock-In" class="headerlink" title="4. Escape Service Lock-In"></a>4. Escape Service Lock-In</h3><p>Unlike other platforms, Locize champions your freedom. While fully integrated with <a href="../how-to-choose-the-right-translation-management-system-with-i18next/">i18next</a>, Locize allows you to export your translations for use with any system you choose, reaffirming your control over your project&#39;s tools and data.</p><h3 id="5-Expertise-and-Support-from-i18next-Creators"><a href="#5-Expertise-and-Support-from-i18next-Creators" class="headerlink" title="5. Expertise and Support from i18next Creators"></a>5. Expertise and Support from i18next Creators</h3><p>Leveraging deep insights from the creators of i18next, Locize brings you unmatched support and expertise in internationalization, helping you optimize your localization workflow for global success.</p><h3 id="6-Sophisticated-Handling-of-Complex-Linguistic-Features"><a href="#6-Sophisticated-Handling-of-Complex-Linguistic-Features" class="headerlink" title="6. Sophisticated Handling of Complex Linguistic Features"></a>6. Sophisticated Handling of Complex Linguistic Features</h3><p>Our system understands the nuances of pluralization across languages, ensuring that your translations are not just accurate, but contextually appropriate for all your global users.</p><h3 id="7-Seamless-Integration-with-Third-Party-Services"><a href="#7-Seamless-Integration-with-Third-Party-Services" class="headerlink" title="7. Seamless Integration with Third-Party Services"></a>7. Seamless Integration with Third-Party Services</h3><p>Locize doesn’t just work well alone; it plays well with others. Integrate with a range of third-party translation services to expand your capabilities, from project finalization to direct translator interaction.</p><h3 id="8-Flexible-Translation-Delivery"><a href="#8-Flexible-Translation-Delivery" class="headerlink" title="8. Flexible Translation Delivery"></a>8. Flexible Translation Delivery</h3><p>Our CDN offers instant updates to translations without a full redeploy, ideal for dynamic projects. However, for environments with specific needs, such as restricted internet access, Locize allows you to bundle translations directly with your product.</p><p>➡️ <a href="https://docs.locize.com/">Watch our introduction video</a></p><p>➡️ <a href="https://www.locize.app/register">Create a new user account for free</a></p><p>➡️ <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">Check out how to add a new project</a></p><h2 id="Transformative-experience-with-continuous-integration"><a href="#Transformative-experience-with-continuous-integration" class="headerlink" title="Transformative experience with continuous integration "></a>Transformative experience with continuous integration <a name="transformative"></a></h2><p>Picture a workflow where collaboration thrives, manual errors vanish, and efficiency soars. This is the promise of continuous integration — a path that beckons your development teams, project managers, and customers into a realm of software excellence.</p><p>In this world, software quality reaches new heights, development cycles shrink to lightning speed, and every stakeholder enjoys a seamless experience. Your teams work in harmony, your customers rejoice, and your business thrives.</p><p>The choice is clear: embark on the journey of continuous localization workflow and join the ranks of forward-thinking businesses that reap its rewards. It&#39;s not just a workflow; it&#39;s a transformative experience.</p><p><img src="translation-management-experience.webp" alt="translation-management-experience"></p>]]></content>
      
      
      
        <tags>
            
            <tag> tms </tag>
            
            <tag> how to choose </tag>
            
            <tag> language localization </tag>
            
            <tag> translation project management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Is SDL Trados Still Relevant in Today’s Localization Landscape?</title>
      <link href="/blog/is-sdl-trados-still-relevant/"/>
      <url>/blog/is-sdl-trados-still-relevant/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>In the field of translation and localization, there is one tool that has been dominant for decades: SDL Trados. This software has been a staple for translators and language service providers (LSPs) alike, offering a suite of features that streamline translation workflows and improve overall productivity. However, as the translation industry evolves and new technologies emerge, some are questioning whether SDL Trados is still relevant in today&#39;s localization landscape. In this article, we&#39;ll explore this question and take a closer look at SDL Trados, its advantages and disadvantages, and why some are turning to more modern translation management systems.</p><h2 id="What-is-SDL-Trados"><a href="#What-is-SDL-Trados" class="headerlink" title="What is SDL Trados?"></a>What is SDL Trados?</h2><p>SDL Trados is a translation memory software developed by SDL, a company that specializes in language technology and services. The software is widely used by translators and LSPs to manage translation workflows and improve translation quality. SDL Trados offers a range of features, including translation memory, terminology management, and automated workflows, all designed to improve efficiency and productivity in the translation process.</p><h2 id="Advantages-of-SDL-Trados"><a href="#Advantages-of-SDL-Trados" class="headerlink" title="Advantages of SDL Trados"></a>Advantages of SDL Trados</h2><h3 id="Translation-memory"><a href="#Translation-memory" class="headerlink" title="Translation memory"></a>Translation memory</h3><p>One of the key advantages of SDL Trados is its translation memory (TM) functionality. Translation memory is a database that stores previously translated content, allowing translators to reuse translations for repeated phrases and sentences. This can greatly reduce translation time and costs while improving consistency across translations.</p><h3 id="Terminology-management"><a href="#Terminology-management" class="headerlink" title="Terminology management"></a>Terminology management</h3><p>Another advantage of SDL Trados is its terminology management feature. This allows users to create and manage glossaries of key terms specific to their industry or project, ensuring consistency and accuracy across translations.</p><h3 id="Automated-workflows"><a href="#Automated-workflows" class="headerlink" title="Automated workflows"></a>Automated workflows</h3><p>SDL Trados also offers automated workflows, which can save significant time and effort in the translation process. For example, the software can automatically detect file formats, segment content, and suggest translations based on the translation memory and terminology database. This can speed up the translation process and reduce the risk of errors.</p><h2 id="Disadvantages-of-SDL-Trados"><a href="#Disadvantages-of-SDL-Trados" class="headerlink" title="Disadvantages of SDL Trados"></a>Disadvantages of SDL Trados</h2><h3 id="Expensive-licensing-fees"><a href="#Expensive-licensing-fees" class="headerlink" title="Expensive licensing fees"></a>Expensive licensing fees</h3><p>One of the main disadvantages of SDL Trados is its licensing fees. The software can be very expensive, especially for freelancers or small businesses. The licensing structure can also be complex, making it difficult for users to choose the right package for their needs.</p><h3 id="Complex-interface"><a href="#Complex-interface" class="headerlink" title="Complex interface"></a>Complex interface</h3><p>SDL Trados can also be complex to use, especially for new users. The interface can be overwhelming, and it may take some time to learn how to use all of the features effectively.</p><h3 id="Not-cloud-based"><a href="#Not-cloud-based" class="headerlink" title="Not cloud-based"></a>Not cloud-based</h3><p>Finally, SDL Trados is not cloud-based, meaning that users must install the software on their local machines. This can limit collaboration and accessibility, especially for teams working remotely.</p><h2 id="Alternatives-to-SDL-Trados"><a href="#Alternatives-to-SDL-Trados" class="headerlink" title="Alternatives to SDL Trados"></a>Alternatives to SDL Trados</h2><p>As the translation industry evolves, new technologies are emerging that offer alternatives to SDL Trados. One of the most popular alternatives is cloud-based translation management systems, which offer greater collaboration and accessibility. One such system is <a href="/">locize</a>, which offers a range of features similar to SDL Trados but is entirely cloud-based.</p><h3 id="Cloud-based-solutions"><a href="#Cloud-based-solutions" class="headerlink" title="Cloud-based solutions"></a>Cloud-based solutions</h3><p>Cloud-based translation management systems, such as <a href="/">locize</a>, offer several advantages over traditional software like SDL Trados. For one, they can be accessed from anywhere, making them ideal for remote teams or teams working across different locations. They also offer greater collaboration features, such as real-time translation memory updates and more streamlined communication among team members. Another special advantage of <a href="/">locize</a> is the way it can be directly integrated to your software or website, this way translators can modify translations <a href="https://youtu.be/YQryHo1iHb8">without the need</a> to ask the developers to adapt their code or to redeploy their software or website. In addition, cloud-based systems often have lower upfront costs and are more scalable, allowing companies to pay only for what they need as they grow.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>While SDL Trados has been a dominant force in the translation industry for many years, it may no longer be the best fit for all companies. As the industry evolves, it is important to consider newer, cloud-based alternatives like <a href="/">locize</a> that offer greater collaboration, accessibility, and scalability. Ultimately, the best translation management system will depend on the specific needs of your company, so it is important to carefully evaluate the options before making a decision.</p>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> translation </tag>
            
            <tag> tms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview with WebsitePlanet</title>
      <link href="/blog/websiteplanet-interview/"/>
      <url>/blog/websiteplanet-interview/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>We&#39;re thrilled to share our recent interview with WebsitePlanet, where we delve into the fascinating story behind <a href="/">locize</a>, explore the diverse range of services we offer, unveil our mission to simplify global expansion, and understand what sets locize apart from the rest.</p><p>Join us as we take you on a journey through our history, showcase our comprehensive localization services, and illustrate why locize is your ultimate platform for achieving global reach.</p><p>Read the full interview and gain insights into the future of localization here: <a href="https://www.websiteplanet.com/blog/interview-locize/">Innovating Software Localization: A Conversation with the CTO of locize</a>.</p><p><a href="https://www.websiteplanet.com/blog/interview-locize/"><img src="websiteplanet.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> guest post </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Localization concept - a guide to adaption</title>
      <link href="/blog/localization/"/>
      <url>/blog/localization/</url>
      
        <content type="html"><![CDATA[<p><img src="localization.webp" alt="what is localization"></p><p>If you are asking yourself, <strong>what is localization</strong>, then this blog is here to help you. We take a closer look at what this means and how it can help you. </p><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><h2 style="color:orange;">What is localization</h2><p style="color:grey;">Localization involves adapting a product or service to align with the language, culture, or preferences of a specific audience. A successful localization effort results in a product or service that seamlessly integrates with the local culture, giving the impression that it was originally created for that specific market.</p></div><p>For international brands and organizations, it is essential in helping to give their customers the very best experience possible. An effective localization-process can transform a business, helping to increase reach and maximize engagements, but what exactly is it?</p><p>Let&#39;s get started.</p><h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul><li><a href="#concept">What is the concept of localization</a></li><li><a href="#examples">Real-life examples of successful localization-efforts</a></li><li><a href="#examples">Information on localization-strategies</a></li><li><a href="#goal">What are the goals of localization</a></li><li><a href="#resources">Resources related to the importance of localization in international markets</a></li><li><a href="#guides">Guides on how to implement localization</a></li><li><a href="#thoughts">Final thoughts</a></li></ul><h2 id="What-does-localization-mean"><a href="#What-does-localization-mean" class="headerlink" title="What does localization mean "></a>What does localization mean <a name="concept"></a></h2><p>So while language translation is the process of converting written content from one language into another, localization goes beyond this. It will look at things such as:</p><h3 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h3><p>Translating text and ensuring it&#39;s culturally appropriate, considering idiomatic expressions, slang, and terminology specific to the target language.</p><h3 id="Content-Adaptation"><a href="#Content-Adaptation" class="headerlink" title="Content Adaptation"></a>Content Adaptation</h3><p>Adapting content to align with the cultural norms, beliefs, and values of the target audience. This includes imagery, symbols, colors, and references that might be sensitive or offensive in a particular culture.</p><h3 id="Regional-Preferences"><a href="#Regional-Preferences" class="headerlink" title="Regional Preferences"></a>Regional Preferences</h3><p>Customizing the product or content to cater to regional preferences, such as date formats, currencies, units of measurement, and other regional differences.</p><h3 id="User-Interface-UI"><a href="#User-Interface-UI" class="headerlink" title="User Interface (UI)"></a>User Interface (UI)</h3><p>Adjusting the user interface, layout, and design to accommodate different languages and reading directions (e.g., right-to-left for Arabic or Hebrew).</p><h3 id="Legal-and-Regulatory-Compliance"><a href="#Legal-and-Regulatory-Compliance" class="headerlink" title="Legal and Regulatory Compliance"></a>Legal and Regulatory Compliance</h3><p>Ensuring that the product or content complies with local laws, regulations, and industry standards.</p><h3 id="Functionality"><a href="#Functionality" class="headerlink" title="Functionality"></a>Functionality</h3><p>Modifying features or functionality that may not be relevant or practical in the target market or adding features that are specific to that market.</p><h3 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h3><p>Rigorously testing the localized product or content to identify and resolve issues related to linguistic, cultural, or technical aspects.</p><p>Localization is a crucial strategy for businesses of all sizes because it makes their content more appealing to the audience they are trying to reach. The process of first enabling a product to be localized, then localizing it for various national audiences is sometimes know as <a href="/blog/globalization-vs-localization/" title="globalization">globalization</a>.</p><p>According to <a href="https://insights.csa-research.com/reportaction/305013126/Marketing">this article</a> 40% of consumers have said that they will never purchase from a website that wasn’t in their native language. While 75% have said that they would be more likely to use a business again if their aftersales care was in their native language.</p><p>With the help of this article, you can learn how to adapt your service or product to a specific language, culture, or target market, regardless of the industry you work in. </p><p>Additionally, we will explain how to adapt content or products for various markets and geographical areas.</p><p>But first, let&#39;s look at some successful examples of well-known brands using it.</p><p><img src="populations-look-and-feel.webp" alt="populations look and feel"></p><h2 id="Real-life-examples-of-successful-localization-efforts"><a href="#Real-life-examples-of-successful-localization-efforts" class="headerlink" title="Real-life examples of successful localization-efforts "></a>Real-life examples of successful localization-efforts <a name="examples"></a></h2><div style="display: flex; background-color: #f0f0f0; padding: 20px;"><div style="flex: 1; margin-right: 20px;">    <img src="airbnb.png" alt="Airbnb Image">    <h3>Business Example</h3>    <p>Internationalization is becoming increasingly more common, and businesses are now interacting with clients and customers from across the globe. Localization should now be an essential part of their growth strategy, covering everything from company websites and marketing materials to legal documents and product manuals.</p>    <p>One great example of this is Airbnb, which has successfully been able to expand its business into over 220 countries, each one offering a personal and localized touch to the consumer.</p>    <span style="font-size:0.7rem">Source: <a href="https://www.airbnb.com/" title="airbnb">airbnb</a></span></div><div style="flex: 1;">    <img src="netflix.png" alt="Netflix Image">    <h3>Software Example</h3>    <p>Localization is also a vital strategy in the world of software development. Everything from user experience to overall design will need to be considered to ensure that customers are getting the very best experience.</p>    <p>A good example of software-localization is Netflix. The global streaming giant has become synonymous with efforts on both the translation side of things and on the developer side. The technology and processes that they utilize are translated and localized in every region, meaning the interface and apps change, as do the subtitles and voice dubbing of content. Even the films and TV shows they develop are localized for specific countries.</p>    <span style="font-size:0.7rem">Source: <a href="https://www.netflix.com/" title="netflix">netflix</a></span>  </div></div><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><p style="color:grey;">Check out our more real-life examples <a href="/customers.html" title="Customer Success Stories">on this page</a>.</p></div><h2 id="What-are-the-goals-of-localization"><a href="#What-are-the-goals-of-localization" class="headerlink" title="What are the goals of localization "></a>What are the goals of localization <a name="goal"></a></h2><p>The ultimate goal is to develop a clear user experience that helps to drive your marketing and support you in achieving your goals. However, there are many benefits that can come from implementing it, including:</p><h4 id="Enter-new-markets"><a href="#Enter-new-markets" class="headerlink" title="Enter new markets"></a>Enter new markets</h4><p>One of the main goals of a <a href="/blog/localization-strategy" title="localization-strategy">localization-strategy</a> is to help brands to easily enter new markets. It will help overcome any logistical or legal hurdles, ensuring smooth communication across every partner. </p><h4 id="Secure-a-competitive-edge"><a href="#Secure-a-competitive-edge" class="headerlink" title="Secure a competitive edge"></a>Secure a competitive edge</h4><p>Implementing localization can also help companies to develop a competitive edge. Going against competitors in a local market can be incredibly challenging as they often have the trust of local audiences. It will help you to build that trust, giving you the edge. </p><h4 id="Improve-customer-satisfaction"><a href="#Improve-customer-satisfaction" class="headerlink" title="Improve customer satisfaction"></a>Improve customer satisfaction</h4><p>Another important goal is that it helps to improve customer satisfaction. When they are seeing content in their own language and in a style they are more comfortable with; they are more likely to buy or use your products and services. </p><h4 id="Increase-brand-loyalty"><a href="#Increase-brand-loyalty" class="headerlink" title="Increase brand loyalty"></a>Increase brand loyalty</h4><p>When you are able to improve customer satisfaction, you will also increase brand loyalty. Communicating with customers in their own language and style will help you to secure their trust, increasing the likelihood of them returning. </p><h4 id="Maximize-your-profit"><a href="#Maximize-your-profit" class="headerlink" title="Maximize your profit"></a>Maximize your profit</h4><p>Above all, though, the main goal of a strategy is to help companies maximize their profit. When reach a much bigger and truly global audience you need to engage with them in a personal way, that you maximize the number of customers and in the end also the revenue. </p><h2 id="Resources-related-to-the-importance-of-localization-in-international-markets"><a href="#Resources-related-to-the-importance-of-localization-in-international-markets" class="headerlink" title="Resources related to the importance of localization in international markets"></a>Resources related to the importance of localization in international markets</h2><div style="background-color: #1976d2;">    <div style="display: flex; justify-content: space-around; flex-wrap: wrap; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);">        <div style="flex: 0 0 calc(45% - 10px); margin: 10px; color: white;">            <h3>Language Localization</h3>            <p style="min-height: 120px;">Language localization is the process of adapting content, software, or products to a specific language or linguistic region.</p>            <a href="/blog/language-localization/" style="text-decoration: none;">                <button style="background-color: #1b2431; color: #fff; padding: 10px 20px; border: none; border-radius: 5px;">Learn more</button>            </a>        </div>        <div style="flex: 0 0 calc(45% - 10px); margin: 10px; color: white;">            <h3>Localization-Strategy</h3>            <p style="min-height: 120px;">A localization strategy is a comprehensive plan that outlines how a company adapts its products, services, or content for specific markets and cultures.</p>            <a href="/blog/localization-strategy/" style="text-decoration: none;">                <button style="background-color: #1b2431; color: #fff; padding: 10px 20px; border: none; border-radius: 5px;">Learn More</button>            </a>        </div>        <div style="flex: 0 0 calc(45% - 10px); margin: 10px; color: white;">            <h3>Software Localization</h3>            <p style="min-height: 120px;">                It's the process of customizing software applications and its UI/UX-design to function seamlessly in different languages and regions.</p>            <a title="Software Localization" href="/blog/what-is-software-localization/" style="text-decoration: none;">                <button style="background-color: #1b2431; color: #fff; padding: 10px 20px; border: none; border-radius: 5px;">Learn More</button>            </a>        </div>        <div style="flex: 0 0 calc(45% - 10px); margin: 10px; color: white;">            <h3>Javascript Localization</h3>            <p style="min-height: 120px;">JavaScript localization is the practice of adapting JavaScript code and web applications to function effectively in multiple languages and regions. </p>            <a title="Javascript Localization" href="/javascript-localization.html" style="text-decoration: none;">                <button style="background-color: #1b2431; color: #fff; padding: 10px 20px; border: none; border-radius: 5px;">Learn More</button>            </a>        </div>        <div style="flex: 0 0 calc(45% - 10px); margin: 10px; color: white;">            <h3>Website Localization</h3>            <p style="min-height: 120px;">Website localization involves adapting a website's content, design, and functionality to cater to diverse cultural and linguistic preferences of global audiences.</p>            <a title="Website Localization" href="/blog/website-localization/" style="text-decoration: none;">                <button style="background-color: #1b2431; color: #fff; padding: 10px 20px; border: none; border-radius: 5px;">Learn More</button>            </a>        </div>        <div style="flex: 0 0 calc(45% - 10px); margin: 10px; color: white;">            <h3>Marketing Localization</h3>            <p style="min-height: 120px;">Marketing localization focuses on adapting marketing strategies and campaigns to resonate with the cultural nuances and preferences of target international markets.</p>            <a  title="Marketing Localization" href="/blog/localization-marketing/" style="text-decoration: none;">                <button style="background-color: #1b2431; color: #fff; padding: 10px 20px; border: none; border-radius: 5px;">Learn More</button>            </a>        </div>    </div></div><h2 id="Guides-on-how-to-implement-localization"><a href="#Guides-on-how-to-implement-localization" class="headerlink" title="Guides on how to implement localization "></a>Guides on how to implement localization <a name="guides"></a></h2><ol style="list-style-type: none; padding: 1rem; background-color: #f0f0f0;">    <li style="margin-bottom: 20px;">    <h3 style="font-weight: bold;">1. Identifying what needs localization</h3>    <p>The first thing that you need to do is to determine if the content that you are needing to adapt.</p>  </li>  <li style="margin-bottom: 20px;">    <h3 style="font-weight: bold;">2. The importance of comprehensive research</h3>    <p>Identifying these changes often requires comprehensive research into the culture and behaviors of your new target audience.</p>  </li>  <li style="margin-bottom: 20px;">    <h3 style="font-weight: bold;">3. Professional assistance in making changes</h3>    <p>Once you have identified what changes are required, it is then time to begin making these changes.</p>  </li>  <li style="margin-bottom: 20px;">    <h3 style="font-weight: bold;">4. Quality assurance for a seamless end product</h3>    <p>When all of those changes have been made, they will then need to go through an extensive Quality Assurance process.</p>  </li>  <li style="margin-bottom: 20px;">    <h3 style="font-weight: bold;">5. Localization for various content types</h3>    <p>No matter whether you are looking to localize your website, marketing material, legal documents, or computer game.</p>  </li>  </ol><p><em>Check out this <a href="https://youtu.be/YQryHo1iHb8">video</a> to explore how our software can help you improve your process in terms of managing translations:</em></p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/YQryHo1iHb8" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="Final-thoughts"><a href="#Final-thoughts" class="headerlink" title="Final thoughts "></a>Final thoughts <a name="thoughts"></a></h2><p>Hopefully, this blog has helped to answer the initial question and given you more of an idea on how it can benefit your business. Implementing localization can be applied to any aspect of your business, and our highly experienced team has years of experience in helping clients. These are companies, software developers, and project-managers with all of their translation- and localization-management needs.</p><p>We have worked with thousands of clients over the years, giving them the skills and knowledge to transform their operations. Have a question about localization? Leave us a message to <a href="mailto:support@locize.com" title="support@locize.com">support@locize.com</a> right now.</b></p><p>➡️ Find out more about our <a href="/website-localization-services.html" title="website-localization-service">website-localization-service</a></p><p>➡️ Create a free new <a href="https://www.locize.app/register">user account</a> to start free trial of our software</p><p>➡️ Want to read more about the topic? Then this <a href="/blog/what-is-software-localization/" title="article about software-localization">article about software-localization</a> is for you</p>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> l10n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is Software Localization? (2023 Update)</title>
      <link href="/blog/what-is-software-localization/"/>
      <url>/blog/what-is-software-localization/</url>
      
        <content type="html"><![CDATA[<p><img src="software-localization.webp" alt="software localization" title="Software Localization"></p><p>According to a <a href="https://finance.yahoo.com/news/software-localization-market-reach-15-140100165.html" title="recent study">recent study</a>, the global market for software localization generated $5.9 billion in revenue in 2022 and is predicted to grow even more until 2032, when it is predicted to reach $15.6 billion.</p><p>Since the COVID-19 pandemic, as businesses shifted operations online and broadened their global reach as a result of increased business focus on global expansion, this topic has become even more important.</p><p>Software localization can be an expensive process, especially for small and medium-sized businesses (SMEs) with tight budgets, and it takes time and resources to ensure high-quality results in localization projects. </p><p>What is it about and what benefits can it offer your business?</p><p>If you are faced with this issue, you can get started with these details. </p><p>Let&#39;s go!</p><h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul><li><a href="#what">What is software localization?</a></li><li><a href="#undertaken">How does localization take place?</a></li><li><a href="#important">Why localization of software is important</a></li><li><a href="#process">Successful implementation</a></li><li><a href="#who">Who needs localization of software?</a></li><li><a href="#nextlevel">Test our solution for free</a></li></ul><h2 id="What-is-software-localization"><a href="#What-is-software-localization" class="headerlink" title="What is software localization? "></a>What is software localization? <a name="what"></a></h2><p>Software localization helps to adapt software to the language and circumstances of the target market while retaining its originality. This means that not only is the text being adapted into the relevant language, but the design and overall user experience (UX) are amended to ensure that it meets the needs of the target audience.</p><p>While <a href="../what-is-i18n/">internationalization (i18n)</a> is about developing a product to meet the demands of a specific culture or audience, localization of software is a far more in-depth solution. The process usually requires the complete modification of text and multimedia for a software product. </p><p>For example, trying to localize a piece of software that is in English into Chinese is not simply a case of translating the wording. The length of text and symbols are entirely different, meaning the whole visual layout will need to be amended to ensure the overall user experience (UX) remains the same.</p><p>Software localization goes much further than that, too. It also looks at the resources and links being used, the time- and date-format, the use of images or gestures to ensure they are culturally appropriate, and even the direction the text needs to be read in.</p><p>This makes the whole process incredibly complex and time-consuming process, but it is a worthwhile investment for any developer.</p><h2 id="How-does-localization-take-place"><a href="#How-does-localization-take-place" class="headerlink" title="How does localization take place? "></a>How does localization take place? <a name="undertaken"></a></h2><p>Software can be localised in two core areas, internationsalisation and then localization. The <b>internationalization</b> process <b>covers the design and development</b>, which means you should:</p><ul><li>review your application framework to ensure it can support your requirements</li><li>thoroughly plan your content, including understanding how much space translated text will require. </li><li>incorporate the needs regarding content into the design, helping to make the localization more effective.</li><li>code your strings to allow you to expand when required.</li><li>externalize any strings that have been prepped for localization</li></ul><p>Once you have successfully completed the internationalization phase, you should then begin to incorporate the <b>localization</b> phase. This is <b>the process of translating your content utilizing a skilled translator</b> and ensuring they are covering every part of your software.</p><p>The translation is one of the most important parts of your localization, so once complete, you must thoroughly review everything. This includes checking the accuracy of the content, the quality of the language, and the terminology being used.</p><p>Once finished, you will then need to copy the translations into your software and begin testing it in every locality you are targeting. When you are certain that the software is working as designed and free from bugs, it can then be released to the public.</p><h3 id="Waterfall-vs-continuous-localization-What’s-the-difference"><a href="#Waterfall-vs-continuous-localization-What’s-the-difference" class="headerlink" title="Waterfall vs continuous localization: What’s the difference?"></a>Waterfall vs continuous localization: What’s the difference?</h3><p>For localization of software there are different workflows. The most traditional is to break down the activities into linear sequential phases - the so called waterfall workflow, where each phase depends on the deliverables of the previous one and corresponds to a specialization of tasks.</p><p><img src="waterfall-workflow.webp" alt="waterfall workflow" title="waterfall workflow"></p><p><a href="/blog/modern-continuous-localization/">Continuous software localization</a> combines software development and localization into one process so that software developers work in parallel with the localization team from the very beginning:</p><p><img src="continous-workflow.webp" alt="continous workflow" title="continous workflow"></p><h2 id="Why-localization-of-software-is-important"><a href="#Why-localization-of-software-is-important" class="headerlink" title="Why localization of software is important? "></a>Why localization of software is important? <a name="important"></a></h2><p>Thanks to the advancement of technology, we now live in a highly connected world. We are able to communicate with companies and organizations across the globe in a matter of seconds. However, while communication has never been more accessible, being able to understand the nuances and cultural differences of these communities is crucial.</p><p><b>Globalization</b> gives software developers the chance to access <b>hundreds of millions of potential new customers</b>. In order to do this successfully, though, they need to ensure they are offering every client the very best user experience.</p><p>There are many benefits to focusing on the software-localization-process, including:</p><h3 id="Maximizing-your-sales"><a href="#Maximizing-your-sales" class="headerlink" title="Maximizing your sales"></a>Maximizing your sales</h3><p>Localization gives you the chance to enjoy success on an international scale. When you are able to provide the end user with the very best experience, no matter where in the world they might be located, it will ensure you can quickly and easily enter new markets. Not only will this help to maximize your sales, but it can also help to strengthen your position in both the local and international market.</p><h3 id="Improving-user-experience"><a href="#Improving-user-experience" class="headerlink" title="Improving user experience"></a>Improving user experience</h3><p>High-quality localization can ensure everyone is able to enjoy the very best experience when using your products. Not only will they be able to clearly understand what you are saying, but they will get the most out of your software too. This improves the overall user experience, giving them a greater impression of your brand.</p><h3 id="Staying-ahead-of-your-competitors"><a href="#Staying-ahead-of-your-competitors" class="headerlink" title="Staying ahead of your competitors"></a>Staying ahead of your competitors</h3><p>In the fast-paced world that we live in, keeping your brand ahead of your competitors has never been more important. The software localization definition is about giving your customers the very best experience possible. That will allow you to stand out from the crowd, minimizing the risk of losing potential customers while also helping you to attract even more customers.</p><h3 id="Enhancing-feedback"><a href="#Enhancing-feedback" class="headerlink" title="Enhancing feedback"></a>Enhancing feedback</h3><p>Another significant benefit of the localization process, but one that is often overlooked, is that it can help you enjoy more feedback. When you have more users engaging with your software, it will help you to develop more in-depth feedback and generate more ideas for the future.</p><p><img src="project-managers.webp" alt="project managers" title="project managers"></p><h2 id="9-steps-to-successfully-implement-software-localization"><a href="#9-steps-to-successfully-implement-software-localization" class="headerlink" title="9 steps to successfully implement software localization "></a>9 steps to successfully implement software localization <a name="process"></a></h2><p>This guide will walk you through the essential steps to successfully implement software localization in your company. Whether you&#39;re a small startup or a large enterprise, embracing localization can help your software resonate with international users and drive business growth.</p><h3 id="1-Assessment-and-Planning"><a href="#1-Assessment-and-Planning" class="headerlink" title="1) Assessment and Planning"></a>1) Assessment and Planning</h3><p>Choose the languages and markets you want to target.Check to see if your software is localization-ready with these questions:</p><ul><li>Is your code dependable and bug-free?</li><li>Has your main language UI been put into place?</li><li>Is your text in main language complete?</li><li>Is your character encoding correct?</li></ul><h3 id="2-Translation"><a href="#2-Translation" class="headerlink" title="2) Translation"></a>2) Translation</h3><p>Choose professional translators or translation tools. Maintain context and accuracy during the translation process. A professional <a href="/blog/tms/">translation management system</a> has integrations with platforms offering translation services. A TMS supports increased project effectiveness, lower manual error rates, and guarantee timely delivery of localized software. </p><h3 id="3-Visual-Elements-Graphic-Design"><a href="#3-Visual-Elements-Graphic-Design" class="headerlink" title="3) Visual Elements / Graphic Design"></a>3) Visual Elements / Graphic Design</h3><p>Customize visual elements to align with local preferences. Respect cultural norms and sensitivities. It would help if you also considered implementing a style guide, covering things such as your branding, tone of voice, and formality. This will ensure a consistent and clear approach, no matter where in the world your users are accessing your software.</p><h3 id="4-Compliance-with-Legal-and-Regulatory-Requirements"><a href="#4-Compliance-with-Legal-and-Regulatory-Requirements" class="headerlink" title="4) Compliance with Legal and Regulatory Requirements"></a>4) Compliance with Legal and Regulatory Requirements</h3><p>Ensure compliance with local laws and regulations. Conduct a thorough analysis of legal and regulatory requirements that pertain to your software, including data privacy laws like <a href="https://gdpr-info.eu/" title="GDPR">GDPR</a>, accessibility standards such as <a href="https://en.wikipedia.org/wiki/Web_Content_Accessibility_Guidelines" title="WCAG">WCAG</a> , and industry-specific regulations.</p><h3 id="5-Testing"><a href="#5-Testing" class="headerlink" title="5) Testing"></a>5) Testing</h3><p>Thoroughly test the localized software for functionality and display. Identify and fix issues during the testing phase.</p><h3 id="6-Quality-Assurance-QA"><a href="#6-Quality-Assurance-QA" class="headerlink" title="6) Quality Assurance (QA)"></a>6) Quality Assurance (QA)</h3><p>Establish a <a href="https://www.techtarget.com/searchsoftwarequality/definition/quality-assurance" title="QA">QA</a>  process to ensure the quality of localized versions. Address any bugs or issues found during QA.</p><h3 id="7-Documentation-and-Support"><a href="#7-Documentation-and-Support" class="headerlink" title="7) Documentation and Support"></a>7) Documentation and Support</h3><p>Translate user documentation and support materials. Offer customer support in the localized languages.</p><h3 id="8-Release-and-Distribution"><a href="#8-Release-and-Distribution" class="headerlink" title="8) Release and Distribution"></a>8) Release and Distribution</h3><p>Prepare localized versions for distribution. Update marketing materials to promote the new languages.</p><h3 id="9-Maintenance-and-Updates"><a href="#9-Maintenance-and-Updates" class="headerlink" title="9) Maintenance and Updates"></a>9) Maintenance and Updates</h3><p>Regularly update localized versions while maintaining quality.</p><h3 id="See-it-as-an-extension-of-your-software-development"><a href="#See-it-as-an-extension-of-your-software-development" class="headerlink" title="See it as an extension of your software development"></a>See it as an extension of your software development</h3><p>To make sure the localization-process is as efficient and effective as possible, you should see it as an extension of your development. That means rather than seeing it as a task to complete in the final stages, you should incorporate it in every step of your software development. By adopting this approach, you can ensure that you are maximizing the user experience, and it can also help to speed up the delivery time.</p><h3 id="Use-a-localization-platform"><a href="#Use-a-localization-platform" class="headerlink" title="Use a localization platform"></a>Use a localization platform</h3><p>Effective software localization is a vast project, and utilizing a proven <a href="https://locize.com" title="localization management platform">localization management platform</a> can help to make the process easier. When choosing a platform, you should ensure that it has been developed specifically for localization. This will help to offer greater customization and allow you to integrate essential tools. For example <a href="/blog/react-i18next/" title="react localization">react localization</a> is made incredibly simple for developers when used in conjunction with the <a href="https://www.i18next.com/" title="i18next">i18next</a> framework.</p><p>You may use locize to make the process of the localization-projects of your company easier. Locize is the platform for effectively localizing your website, mobile app, video game or any other web product.<img src="software_localization_process.png" alt="process" title="software_localization_process"></p><h2 id="Who-needs-localization-of-software"><a href="#Who-needs-localization-of-software" class="headerlink" title="Who needs localization of software? "></a>Who needs localization of software? <a name="who"></a></h2><p>The next decision is whether it is right for you. If your software targets a specific community or a selected region, localization might not be required.</p><p>However, if you are looking to expand into wider communities or give yourself the opportunity to do that at a later date, then it is something you should consider. Even if you are not considering an international move just yet, you should prepare as much as you can during the development stage.</p><p>The industry you work in should also be a major consideration. <b>Software localization should be a major consideration</b> for those working in the e-commerce, legal, or governmental sectors. Of course, it is not just limited to these sectors, so make sure you consider both your current and future requirements when deciding if you need <a href="/blog/l10n/" titel="l10n">l10n</a>.</p><p>In this technology-driven world, globalization means seeing an increasing number of organizations and companies working beyond their traditional localities. Software localization is crucial in helping you to successfully expand your business to other countries, allowing you to maximize your sales, boost your profits, and stand out from the crowd.</p><p>You definitely will need it when</p><ul><li>your business plan targets multiple regions or is region specific</li><li>you&#39;re developing your software code right now. It&#39;s easy to take care of localization at this stage</li><li>you have a many-to-many business model and are planning to grow exponentially. </li></ul><p>These types of developers should take care of localization:</p><div style="display:flex;flex-wrap:wrap;"><div style="width:400px;margin:1rem;"><h3 style="text-decoration:underline">Web developers</h3><p>Developing code that tells websites and web applications how to operate.</p></div><div style="width:400px;margin:1rem;"><h3 style="text-decoration:underline"><a href="https://en.wikipedia.org/wiki/Software_as_a_service" target="__blank" title="Saas">SaaS</a> or cloud <br>developers</h3><p>Developing cloud-based applications and making it available to end users.</p></div><div style="width:400px;margin:1rem;"><h3 style="text-decoration:underline">Desktop application developers</h3><p>Writing code for software applications that run natively on operating systems.</p></div><div style="width:400px;margin:1rem;"><h3 style="text-decoration:underline">Virtual Reality application developers</h3><p>Creating and testing applications in virtual reality or metaverse.</p></div><div style="width:400px;margin:1rem;"><h3 style="text-decoration:underline">Mobile app developers</h3><p>Developing software applications for smartphones and other mobile devices.</p></div><div style="width:400px;margin:1rem;"><h3 style="text-decoration:underline">Video game developers</h3><p>Helping transform games from a concept to a playable reality.</p></div><div style="width:400px;margin:1rem;"><h3 style="text-decoration:underline">Blockchain developers</h3><p>Enabling secure digital transactions by creating systems to record and store blockchain data in a way that prevents changes or hacks.</p></div><div style="width:400px;margin:1rem;"><h3 style="text-decoration:underline">Integration developers</h3><p>Responsible for the complete life cycle of information systems.</p></div></div><p><img src="locize.jpg" title="locize"></p><h2 id="Localization-of-software-in-parallel-to-development"><a href="#Localization-of-software-in-parallel-to-development" class="headerlink" title="Localization of software in parallel to development "></a>Localization of software in parallel to development <a name="nextlevel"></a></h2><p>Connect your project directly to locize and automatically have new &quot;non-translated&quot; parts of your application sent to locize. You will be able to use locize CDN translations or translate within your web application directly. All newly generated keys in the reference language are automatically translated into the target languages using machine translation, such as Google Translate, when this option is selected.</p><p>Now we want to turn it over to you:</p><p>Do you plan to invest in software localiztion?</p><p>Will you change the way development and translation are handled?</p><p>You might also have a query regarding something you read.</p><p>Either way, let us know by leaving a message to <a href="mailto:&#115;&#x75;&#x70;&#x70;&#x6f;&#114;&#x74;&#64;&#108;&#111;&#99;&#x69;&#122;&#101;&#46;&#x63;&#x6f;&#109;">&#115;&#x75;&#x70;&#x70;&#x6f;&#114;&#x74;&#64;&#108;&#111;&#99;&#x69;&#122;&#101;&#46;&#x63;&#x6f;&#109;</a> right now.</p><h4 id="Register-for-free"><a href="#Register-for-free" class="headerlink" title="Register for free"></a>Register for free</h4><p>For a 14-day free trial period, register for free below and start your localization experience today! Or learn more about the platform&#39;s features, benefits, and if it is the right solution for you.</p><p><a class="btn btn-outline btn-xl" style="color:white" href="https://www.locize.app/register" title="register to locize">register</a> <a class="btn btn-outline btn-xl" style="color:white" href="https://locize.com/how-it-works.html" title="how it works">Learn more</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> software development </tag>
            
            <tag> process </tag>
            
            <tag> workflow </tag>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Look into the Future of Translation and Localization</title>
      <link href="/blog/future-of-translation/"/>
      <url>/blog/future-of-translation/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>As technology continues to advance, the field of translation and localization is also seeing significant changes. In the coming years, we can expect to see a number of developments that will improve the accuracy and efficiency of language translation, making it easier for people and businesses to communicate across borders.</p><p>One of the most exciting developments in the field of translation is the use of neural machine translation (NMT), like <a href="../google-translate-accuracy/">Google Translate</a>. NMT is a form of artificial intelligence (AI) that is able to learn the intricacies of a particular language and apply that knowledge to translations. This has led to a significant improvement in the quality of translations, particularly for less common languages.</p><p>Another area where we can expect to see advancements is in the use of natural language processing (NLP) to aid in localization. NLP is a field of AI that deals with the interaction between computers and human language. By using NLP techniques, like <a href="../google-translate-accuracy/#google-translate-competitors">ChatGPT</a>, software can be made to understand and respond to language in a more human-like way. This will make localization more accurate and efficient, as software will be able to understand the nuances and idioms of different languages and cultures.</p><p>With the increasing use of virtual and augmented reality technology, we can expect to see more demand for the translation of multimedia content. The ability to translate and localize video, audio and other multimedia content will become increasingly important as this technology becomes more prevalent. This also present new challenges and possibilities for localization, as translation engine will need to deal with idiomatic language, context, and tone.</p><p>We can also expect to see an increase in the use of crowdsourcing for translation and localization. By leveraging the power of the crowd, companies will be able to quickly and cost-effectively translate and localize their content into multiple languages. This has already <a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators#use-the-crowdbased-service-branched-projects">been used in some companies</a>, but will become more mainstream in the future as the approach improves and becomes more accessible.</p><p>In conclusion, the field of translation and localization is constantly evolving, and we can expect to see a number of exciting advancements in the coming years. The use of neural machine translation, natural language processing, and multimedia localization will improve the accuracy and efficiency of language translation. Additionally, the use of crowdsourcing will make it more cost-effective for businesses to communicate across borders. These developments will have far-reaching implications for industries such as e-commerce, education, entertainment, and many more, breaking down language barriers and making the world a more connected place.</p><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "What is neural machine translation (NMT), and how is it changing the translation industry?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Neural Machine Translation (NMT) is a form of artificial intelligence (AI) that uses deep learning techniques to understand and translate text from one language to another. It differs from traditional machine translation methods by learning the intricacies of specific languages, resulting in more accurate and contextually relevant translations. NMT has significantly improved the quality of translations, especially for less common languages, making it a game-changer in the translation industry."      }    },{      "@type": "Question",      "name": "How does natural language processing (NLP) contribute to localization efforts, and what benefits does it offer?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Natural Language Processing (NLP) is a branch of AI that focuses on the interaction between computers and human language. In localization, NLP techniques are used to enhance the understanding and response of software to human language, making it more human-like. This benefits localization by enabling software to grasp nuances, idioms, and cultural context, resulting in more accurate and efficient translations across languages and cultures."      }    },{      "@type": "Question",      "name": "Why is the translation of multimedia content becoming increasingly important, and what challenges does it pose?",      "acceptedAnswer": {        "@type": "Answer",        "text": "The translation of multimedia content is gaining importance due to the growing use of virtual and augmented reality technologies. These technologies rely heavily on multimedia, including video, audio, and interactive content. However, translating multimedia content is challenging because it requires addressing idiomatic language, maintaining context, and capturing tone, all of which are crucial for a seamless user experience."      }    },{      "@type": "Question",      "name": "What is crowdsourcing in the context of translation and localization, and how can companies benefit from it?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Crowdsourcing in translation and localization involves tapping into a diverse group of contributors, often from different regions and language backgrounds, to translate and localize content. Companies can benefit from crowdsourcing by gaining access to a large pool of translators, enabling them to translate and localize content quickly and cost-effectively. Crowdsourcing is already being used by some companies and is expected to become more mainstream as it becomes more accessible and efficient."      }    },{      "@type": "Question",      "name": "How will these advancements in translation and localization technology impact various industries, and what are some examples of these impacts?",      "acceptedAnswer": {        "@type": "Answer",        "text": "These advancements in translation and localization technology will have far-reaching impacts across industries. For example, in e-commerce, accurate and efficient translation can open up new markets and increase global sales. In education, it can provide access to educational materials in multiple languages, promoting global learning. In the entertainment industry, it can enhance the reach of movies, games, and content worldwide. Overall, these advancements will break down language barriers and create more connected and accessible global markets."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> l10n </tag>
            
            <tag> translation </tag>
            
            <tag> machine translation </tag>
            
            <tag> international strategy </tag>
            
            <tag> globalization </tag>
            
            <tag> g11n </tag>
            
            <tag> global localization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Uniting Swiss Excellence: Locize and Supertext Join Forces for Seamless Software Localization</title>
      <link href="/blog/supertext-partnership/"/>
      <url>/blog/supertext-partnership/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>In a landmark collaboration that epitomizes Swiss innovation, <a href="/">Locize</a> and <a href="https://www.supertext.ch/">Supertext</a> have come together to revolutionize the realm of <a href="../what-is-software-localization/">software localization</a>. Both being Swiss-made, the partnership results in a harmonious blend of precision, efficiency, and quality that promises to reshape the way companies expand their <a href="../grow-online-business/">global reach</a> while maintaining a consistent brand voice.</p><h2 id="The-Powerhouses-Locize-and-Supertext"><a href="#The-Powerhouses-Locize-and-Supertext" class="headerlink" title="The Powerhouses: Locize and Supertext"></a>The Powerhouses: Locize and Supertext</h2><p>Locize, a trailblazer in software localization, has earned its reputation as a go-to platform for developers and companies looking to enter new international markets. With a focus on simplifying the complexities of translation and localization, Locize empowers teams to seamlessly adapt their software interfaces and digital content across languages and cultures.Having created the foundation with <a href="https://www.i18next.com/">i18next</a> <em>(one of the leading <a href="/open-source.html">open source</a> <a href="../what-is-i18n/">internationalization</a> frameworks)</em> it is the perfect <a href="../how-to-choose-the-right-translation-management-system/">translation management</a> fit with a focus on <a href="../modern-continuous-localization/">continuous localization</a>.</p><p>Supertext, on the other hand, has carved out its own niche as a leader in translation, copywriting, and proofreading services. With a carefully curated team of over 3,000 professional translators and copywriters, Supertext has remained steadfast in its mission to free the world from bad copy and ensure that brands&#39; identities remain intact as they venture into new linguistic territories.</p><p><img src="supertext_hill.jpg"></p><h2 id="A-Natural-Synergy-Why-Locize-and-Supertext-Are-a-Perfect-Match"><a href="#A-Natural-Synergy-Why-Locize-and-Supertext-Are-a-Perfect-Match" class="headerlink" title="A Natural Synergy: Why Locize and Supertext Are a Perfect Match"></a>A Natural Synergy: Why Locize and Supertext Are a Perfect Match</h2><p>The union between Locize and Supertext is akin to combining the precision of <a href="https://en.wikipedia.org/wiki/Watchmaker#:~:text=The%20majority%20of%20modern%20watchmakers,%20particularly%20in%20Switzerland">Swiss watchmaking</a> with the artistry of <a href="https://en.wikipedia.org/wiki/Swiss_chocolate">Swiss chocolatiers</a>. This synergy promises a holistic approach to software localization that preserves the essence of a brand while adapting it to resonate with <a href="../language-localization/">diverse audiences</a>.</p><p>At its core, the integration empowers users to seamlessly order Supertext translations directly from within the Locize platform. Here&#39;s how the magic works:</p><h3 id="1-Create-a-Supertext-account-and-API-token"><a href="#1-Create-a-Supertext-account-and-API-token" class="headerlink" title="1. Create a Supertext account and API token"></a>1. Create a Supertext account and API token</h3><p>Getting started is easy. If you haven&#39;t already done so, start by <a href="https://www.supertext.ch/en/signup">creating a Supertext account</a>, where you&#39;ll gain access to a world-class team of linguists ready to transform your content. Create a new API token that acts as the bridge between Locize and Supertext.</p><p><strong>1) First, <a href="https://www.supertext.ch/person/en/account/login">sign in</a> to your Supertext account with your email address and password.</strong></p><p><strong>2) Then click on &quot;Settings&quot; in your profile menu:</strong><img src="supertext_nav.jpg"></p><p><strong>3) Scroll all the way down until you see the “API authentication tokens” section. There, click on &quot;New API token&quot;, then enter an appropriate label and click on the check mark:</strong><img src="supertext_api-key.jpg"></p><p><strong>4) Copy the generated API token (we will use it later in Locize)</strong><img src="supertext_api-key_copy.jpg"></p><h3 id="2-Configuring-Supertext-in-Locize"><a href="#2-Configuring-Supertext-in-Locize" class="headerlink" title="2. Configuring Supertext in Locize"></a>2. Configuring Supertext in Locize</h3><p>This step ensures a secure and seamless connection between the platforms.</p><p><strong>1) Navigate to your Locize project settings page:</strong><img src="locize_nav_settings.jpg"></p><p><strong>2) Then select the &quot;ordering&quot; tab, where the Supertext configuration awaits:</strong><img src="locize_nav_ordering.jpg"></p><p><strong>3) Click on &quot;configure&quot;:</strong><img src="locize_supertext_config_start.jpg"></p><p><strong>4) Enter the email associated with your Supertext account and the API token you generated earlier:</strong><img src="locize_supertext_config_set.jpg">Optionally, set your default order type (translation or proofreading) and your industry.</p><h3 id="3-Effortless-Order-Placement"><a href="#3-Effortless-Order-Placement" class="headerlink" title="3. Effortless Order Placement"></a>3. Effortless Order Placement</h3><p>With the groundwork laid, the process of ordering Supertext translations becomes an effortless endeavor.</p><p><strong>1) Navigate to the &quot;orders&quot; page:</strong><img src="locize_nav_orders.jpg"></p><p><strong>2) Click on &quot;new order&quot;:</strong><img src="locize_new_order_start.jpg"></p><p><strong>3) Make your appropriate selections and click &quot;get a quote&quot;:</strong><img src="locize_new_order_quote.jpg"></p><p><strong>4) Select the desired order type, delivery type and optional comment, then click &quot;confirm &amp; order&quot;:</strong><img src="locize_new_order_order.jpg"></p><p>The locize order will now appear on your &quot;orders&quot; page:<img src="locize_orders.jpg"></p><p>And the ordered segments are marked as ordered:<img src="locize_cat_ordered.jpg"></p><p><strong>5) Follow the progress on Supertext, each language generates a Supertext order:</strong><img src="supertext_orders.jpg"></p><p><strong>6) When the translations are finished, they are automatically merged back into Locize:</strong><img src="locize_cat_order_competed.jpg"></p><p>In the <a href="https://docs.locize.com/different-views/focus">focus view</a>, in the <a href="https://docs.locize.com/whats-inside/history">history tab</a>, you can see when the translations were merged back.<img src="locize_cat_focus.jpg"></p><p><strong>7) On Supertext, you can give feedback, etc.:</strong><img src="supertext_order_feedback.jpg"></p><h2 id="A-Shared-Vision-Embracing-the-Future"><a href="#A-Shared-Vision-Embracing-the-Future" class="headerlink" title="A Shared Vision: Embracing the Future"></a>A Shared Vision: Embracing the Future</h2><p>As this groundbreaking partnership unfolds, it&#39;s clear that both <a href="/">Locize</a> and <a href="https://www.supertext.ch/">Supertext</a> share a common vision - to empower companies to overcome language barriers while preserving the essence of their communication. This collaboration not only simplifies the localization journey, but also demonstrates the potential that exists when two Swiss-made companies with a commitment to excellence combine their strengths.</p><p>At the heart of this alliance, the employees and customers of both Locize and Supertext have reason to celebrate. The journey ahead promises smoother workflows, greater efficiency, and an unwavering commitment to delivering unparalleled localization solutions.</p><p>In conclusion, as Locize and Supertext embark on this exciting journey together, they invite the world to witness the birth of a new era in software localization. The combination of precision, innovation, and unwavering dedication is set to redefine how brands transcend borders, and with every successful localization, a piece of Switzerland&#39;s legacy travels the globe, connecting cultures and reshaping the future of communication.</p><p><img src="switzerland.jpg"></p><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "What is the partnership between Locize and Supertext all about?",      "acceptedAnswer": {        "@type": "Answer",        "text": "The partnership between Locize and Supertext aims to enhance the process of software localization by seamlessly integrating Supertext's expert translation services into the Locize platform. This collaboration allows businesses to efficiently translate and adapt their software interfaces and content for global audiences while maintaining their brand identity."      }    }, {      "@type": "Question",      "name": "How does the integration between Locize and Supertext work?",      "acceptedAnswer": {        "@type": "Answer",        "text": "The integration process is designed to be user-friendly. Users can create a Supertext account and generate a dedicated API token. This token acts as a secure bridge between Locize and Supertext. Within the Locize platform, users can configure their Supertext account by entering the associated email and API token. Once configured, users can easily place orders for Supertext translations directly within Locize."      }    }, {      "@type": "Question",      "name": "What are the benefits of using Supertext's translation services through Locize?",      "acceptedAnswer": {        "@type": "Answer",        "text": "By utilizing Supertext's translation services through Locize, businesses can achieve accurate and culturally sensitive software localization without the hassle of manual handoffs between platforms. This integration streamlines the entire localization process, allowing teams to focus on expanding their global reach while Supertext's linguists handle the linguistic intricacies."      }    }, {      "@type": "Question",      "name": "Can you provide an overview of the order placement process within the integrated platform?",      "acceptedAnswer": {        "@type": "Answer",        "text": "The order placement process involves a few simple steps: After creating a Supertext account and API token, users configure their Supertext account settings within Locize. To place an order, users navigate to the orders page in Locize, select the content to be translated, and submit the order to Supertext. The translations are automatically merged back into Locize once completed, eliminating the need for manual updates."      }    }, {      "@type": "Question",      "name": "What impact does this partnership have on the future of software localization?",      "acceptedAnswer": {        "@type": "Answer",        "text": "The partnership between Locize and Supertext represents a significant step forward in the field of software localization. It showcases how the collaboration of two Swiss-made platforms can redefine how businesses overcome language barriers while preserving their brand integrity. This integration paves the way for smoother workflows, enhanced efficiency, and a commitment to delivering top-tier localization solutions."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> l10n </tag>
            
            <tag> translation </tag>
            
            <tag> tms </tag>
            
            <tag> service </tag>
            
            <tag> translation management </tag>
            
            <tag> order </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Choose the Best fitting Translation Management Solution</title>
      <link href="/blog/how-to-choose-the-right-translation-management-system-with-i18next/"/>
      <url>/blog/how-to-choose-the-right-translation-management-system-with-i18next/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg">Multilingual support has become a necessity for web and application development. Enter i18next, a powerful <a href="../what-is-i18n/">internationalization</a> framework that has redefined language translations for developers since its inception in 2011. As we venture into the realm of i18next and its ideal companion, we explore a seamless integration that empowers projects to flourish on the global stage.</p><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><ul><li><a href="#introduction">I. Introduction</a><ul><li><a href="#i18next-significance">A. The Significance of i18next as an Extensible Internationalization Framework</a></li><li><a href="#comprehensive-tms">B. Introducing a Comprehensive Translation Management Tool</a></li><li><a href="#purpose">C. The Purpose of this Blog Post</a></li></ul></li><li><a href="#i18next-tms">II. Understanding i18next and the Need for an Effective TMS</a><ul><li><a href="#i18next-history">A. The Background and History of i18next</a></li><li><a href="#i18next-maturity">B. The Maturity and Extensibility of i18next</a></li><li><a href="#i18next-features">C. The Richness of i18next&#39;s Features</a></li></ul></li><li><a href="#tips">III. Practical Tips for Evaluating and Selecting a TMS with i18next</a><ul><li><a href="#research-evaluation">A. Research and Evaluation</a></li><li><a href="#trial-testing">B. Trial and Testing</a></li><li><a href="#collaboration-feedback">C. Collaboration and Feedback</a></li><li><a href="#support-documentation">D. Support and Documentation</a></li><li><a href="#pricing-scalability">E. Pricing and Scalability</a></li><li><a href="#integration">F. Integration with Developer Tools</a></li></ul></li><li><a href="#tms-considerations">IV. Key Considerations for Choosing a TMS with i18next</a><ul><li><a href="#compatibility-integration">A. Compatibility and Integration</a></li><li><a href="#translation-workflow">B. Translation Workflow and Collaboration Features</a></li><li><a href="#file-formats">C. Support for Localization File Formats</a></li><li><a href="#customization-flexibility">D. Customization and Flexibility</a></li></ul></li><li><a href="#locize-solution">V. Introducing locize: A Unique Translation Management Solution</a><ul><li><a href="#alignment-with-i18next">A. The Close Alignment with i18next Principles</a></li><li><a href="#unique-features">B. Unique Features Setting locize Apart</a></li><li><a href="#locize-perfect-i18next">C. locize: The Perfect TMS for i18next-Powered Projects</a></li></ul></li><li><a href="#locize-perfect-tms">VI. Conclusion: Why locize is the Perfect TMS to Choose</a></li></ul><h2 id="I-Introduction"><a href="#I-Introduction" class="headerlink" title="I. Introduction "></a>I. Introduction <a name="introduction"></a></h2><h3 id="A-The-Significance-of-i18next-as-an-Extensible-Internationalization-Framework"><a href="#A-The-Significance-of-i18next-as-an-Extensible-Internationalization-Framework" class="headerlink" title="A. The Significance of i18next as an Extensible Internationalization Framework "></a>A. The Significance of i18next as an Extensible Internationalization Framework <a name="i18next-significance"></a></h3><p>In the ever-expanding landscape of web and application development, catering to a global audience is no longer a choice but a necessity. Websites and software products must accommodate users from diverse linguistic backgrounds, making internationalization a crucial aspect of modern development practices. At the forefront of this domain stands <a href="https://www.i18next.com/">i18next</a>, a well-established and highly extensible internationalization framework.</p><p>Since its inception in late 2011, i18next has grown into one of the most favored open-source solutions for enabling multilingual support in web and mobile applications. Its widespread adoption can be attributed to its maturity, versatility, and continuous evolution to meet the changing needs of the localization community. From handling simple key-value translations to supporting complex pluralization and language detection, i18next has proven itself as a reliable and powerful tool.</p><h3 id="B-Introducing-a-Comprehensive-Translation-Management-Tool"><a href="#B-Introducing-a-Comprehensive-Translation-Management-Tool" class="headerlink" title="B. Introducing a Comprehensive Translation Management Tool "></a>B. Introducing a Comprehensive Translation Management Tool <a name="comprehensive-tms"></a></h3><p>As i18next&#39;s popularity surged, developers encountered a new challenge - managing translations effectively across projects and keeping up with a growing user base. The demand for a seamless translation management solution became evident, leading to the birth of a new service, a comprehensive <a href="../tms/">translation management system (TMS)</a> and the <a href="/i18next.html#official-sponsor">official sponsor</a> of i18next.</p><p>What sets it apart from other TMS offerings is its deep integration with i18next, designed to cater to the specific needs of i18next-powered projects. Instead of being just another localization-as-a-service offering, it goes above and beyond to provide a robust ecosystem for internationalization. The creators of i18next, being the founders of a TMS, brought their expertise and experience to ensure that it seamlessly complements the i18next framework.</p><h3 id="C-The-Purpose-of-this-Blog-Post"><a href="#C-The-Purpose-of-this-Blog-Post" class="headerlink" title="C. The Purpose of this Blog Post "></a>C. The Purpose of this Blog Post <a name="purpose"></a></h3><p>In this blog post, we embark on a journey to explore the capabilities of a TMS and its integration with i18next, with a focus on how the system designed by the i18next founders stands out in particular as the perfect TMS for managing translations in i18next projects. We will delve into the unique features that set it apart from alternatives, understanding its role as an essential component in the localization workflow.</p><p>Throughout this article, we will provide insights and practical tips for developers and localization teams looking to select the right TMS with seamless i18next integration. By the end, readers will have a clear understanding of several advantages, empowering them to make informed decisions when choosing a translation management solution that optimizes their i18next-powered localization workflow.</p><p>Join us as we unravel the strengths of i18next and the capabilities of a good translation management solution, offering a powerful combination for efficient and effective <a href="../what-is-software-localization/">software localization</a> in the globalized digital landscape.</p><h2 id="II-Understanding-i18next-and-the-Need-for-an-Effective-TMS"><a href="#II-Understanding-i18next-and-the-Need-for-an-Effective-TMS" class="headerlink" title="II. Understanding i18next and the Need for an Effective TMS "></a>II. Understanding i18next and the Need for an Effective TMS <a name="i18next-tms"></a></h2><h3 id="A-The-Background-and-History-of-i18next"><a href="#A-The-Background-and-History-of-i18next" class="headerlink" title="A. The Background and History of i18next "></a>A. The Background and History of i18next <a name="i18next-history"></a></h3><p>To comprehend the importance of an effective system for translation management, it&#39;s essential to grasp the foundation on which it is built - i18next. <a href="https://www.i18next.com/misc/the-history-of-i18next">Born in 2011</a>, i18next emerged as a solution to a critical challenge faced by developers - finding an internationalization library that could seamlessly run on both server-side and client-side single-page applications.</p><p>From its humble beginnings, i18next quickly gained momentum, becoming one of the <a href="https://npmtrends.com/i18next">most widely used</a> frameworks for translating web and mobile applications. Its success was fueled by an extraordinary response from the community, which led to the establishment of a fast-growing <a href="https://www.i18next.com/overview/supported-frameworks">ecosystem</a> <a href="https://www.i18next.com/overview/plugins-and-utils">around i18next</a>.</p><p><a href="https://npmtrends.com/i18next"><img src="npmtrends.jpg"></a></p><p>V2 of i18next, released in 2015, marked a significant milestone. With this release, i18next was completely rebuilt to be highly extensible, ensuring smooth compatibility with previous versions. As a result, developers could effortlessly adopt newer releases without disrupting existing codebases. The robustness of the i18next API, which is still actively tested and supported, solidified its reputation as a dependable choice for internationalization.</p><p>And nowadays, i18next also offers <a href="../i18next-typescript/">type safety for your translations</a>. Whenever a developer employs a non-existent or modified i18n key, the <a href="../i18next-typescript/">TypeScript</a> compiler immediately raises an error, promptly alerting you to the issue before it gives rise to runtime complications.</p><h3 id="B-The-Maturity-and-Extensibility-of-i18next"><a href="#B-The-Maturity-and-Extensibility-of-i18next" class="headerlink" title="B. The Maturity and Extensibility of i18next "></a>B. The Maturity and Extensibility of i18next <a name="i18next-maturity"></a></h3><p>Having withstood the test of time, i18next has garnered a reputation for being a mature and reliable framework. Its longevity in the open-source community is a testament to its adaptability, with no i18n case deemed unsolvable by i18next. From small projects to enterprise-grade applications, developers have found i18next to be an indispensable tool for multilingual support.</p><p>The extensibility of i18next is another compelling aspect. This framework can be integrated into any JavaScript environment, making it compatible with various <a href="https://www.i18next.com/overview/supported-frameworks">UI frameworks</a>, <a href="https://www.i18next.com/overview/plugins-and-utils#i18n-formats">i18n formats</a>, and even non-JavaScript platforms such as .NET, Elm, iOS, Android, Ruby, and more. The versatility and flexibility of i18next allow developers to tailor the internationalization process to fit specific project requirements and workflows, catering to the diverse needs of different teams and applications.</p><h3 id="C-The-Richness-of-i18next-39-s-Features"><a href="#C-The-Richness-of-i18next-39-s-Features" class="headerlink" title="C. The Richness of i18next&#39;s Features "></a>C. The Richness of i18next&#39;s Features <a name="i18next-features"></a></h3><p>Beyond its core capabilities, i18next stands out for its rich feature set, which surpasses many traditional i18n frameworks. From basic <a href="https://www.i18next.com/translation-function/interpolation">interpolation</a> and <a href="https://www.i18next.com/translation-function/formatting">formatting</a> to advanced functionalities such as translations from <a href="https://www.i18next.com/how-to/backend-fallback">multiple sources</a>, <a href="https://www.i18next.com/overview/plugins-and-utils#language-detector">language detection</a>, <a href="https://www.i18next.com/translation-function/plurals">plural form resolutions</a>, and <a href="https://www.i18next.com/how-to/caching">caching</a>, i18next provides a comprehensive suite of tools for developers to handle multilingual complexities effortlessly.</p><p>The heart of i18next&#39;s success lies not just in its technical proficiency but also in the vibrant community that surrounds it. Users actively contribute feedback and improvements, enriching the ecosystem with valuable insights. As a result, i18next continues to evolve and adapt, remaining at the forefront of internationalization and setting the stage for a seamless integration with a translation management solution.</p><p><img src="i18next_ecosystem.webp"></p><p>With a solid understanding of i18next&#39;s significance and features, we can now delve deeper into the area of translation management solutions and which TMS is the perfect one to complement the power of i18next.</p><h2 id="III-Key-Considerations-for-Choosing-a-TMS-with-i18next"><a href="#III-Key-Considerations-for-Choosing-a-TMS-with-i18next" class="headerlink" title="III. Key Considerations for Choosing a TMS with i18next "></a>III. Key Considerations for Choosing a TMS with i18next <a name="tms-considerations"></a></h2><p>When it comes to selecting a <a href="../tms/">translation management system (TMS)</a> that seamlessly integrates with i18next, several key considerations are crucial to ensure a smooth and efficient localization workflow. Let&#39;s explore these essential factors to help you make an informed decision:</p><h3 id="A-Compatibility-and-Integration"><a href="#A-Compatibility-and-Integration" class="headerlink" title="A. Compatibility and Integration "></a>A. Compatibility and Integration <a name="compatibility-integration"></a></h3><p>The first and foremost consideration is ensuring compatibility and seamless integration with i18next. A TMS, built with a focus on i18next, should effortlessly fit into your existing i18next-powered projects without major disruptions. Look for features that allow you to link your i18next translations directly to the TMS, ensuring consistent synchronization between your codebase and localization files.</p><h3 id="B-Translation-Workflow-and-Collaboration-Features"><a href="#B-Translation-Workflow-and-Collaboration-Features" class="headerlink" title="B. Translation Workflow and Collaboration Features "></a>B. Translation Workflow and Collaboration Features <a name="translation-workflow"></a></h3><p>An effective TMS should simplify your translation workflow and facilitate seamless collaboration between developers, translators, and localization managers. Features like versioning, translation tagging, collaboration, and change tracking are vital to maintain a smooth and efficient localization process. With strong versioning support and integration with third-party translation services, you gain the tools to streamline the translation workflow and optimize collaboration.</p><h3 id="C-Support-for-Localization-File-Formats"><a href="#C-Support-for-Localization-File-Formats" class="headerlink" title="C. Support for Localization File Formats "></a>C. Support for Localization File Formats <a name="file-formats"></a></h3><p>Ensure that the TMS supports the localization file formats used by i18next. As i18next is compatible with various file formats, such as JSON, YAML, PO, and more, the TMS should seamlessly handle these formats to import and export translations effortlessly. A good TMS is designed with this compatibility in mind, ensuring that i18next developers can continue working with their preferred file formats.</p><h3 id="D-Customization-and-Flexibility"><a href="#D-Customization-and-Flexibility" class="headerlink" title="D. Customization and Flexibility "></a>D. Customization and Flexibility <a name="customization-flexibility"></a></h3><p>Every project has unique requirements and workflows. A flexible TMS should offer customizable settings to adapt to your specific needs. This includes the ability to configure language settings, custom translation workflows, and permissions for team members. By providing customization options, a TMS empowers you to tailor the localization process to suit your project&#39;s exact requirements.</p><p>By carefully considering these key factors, you can confidently select a TMS that aligns with i18next principles and enhances your localization workflow. Now, let&#39;s move on to the practical tips for evaluating and selecting the ideal TMS with seamless i18next integration.</p><h2 id="IV-Practical-Tips-for-Evaluating-and-Selecting-a-TMS-with-i18next"><a href="#IV-Practical-Tips-for-Evaluating-and-Selecting-a-TMS-with-i18next" class="headerlink" title="IV. Practical Tips for Evaluating and Selecting a TMS with i18next "></a>IV. Practical Tips for Evaluating and Selecting a TMS with i18next <a name="tips"></a></h2><p>Now that we have explored the key considerations for choosing a TMS that seamlessly integrates with i18next, let&#39;s dive into practical tips to help you evaluate and select the ideal TMS for your localization needs:</p><h3 id="A-Research-and-Evaluation"><a href="#A-Research-and-Evaluation" class="headerlink" title="A. Research and Evaluation "></a>A. Research and Evaluation <a name="research-evaluation"></a></h3><p>Start by conducting thorough research on various TMS options available in the market. Look for TMS solutions that specifically highlight their compatibility with i18next and offer features tailored to support its unique requirements. Read <a href="https://www.i18next.com/misc/testimonials">user reviews and testimonials</a> to gain insights into the experiences of other developers and localization teams.</p><h3 id="B-Trial-and-Testing"><a href="#B-Trial-and-Testing" class="headerlink" title="B. Trial and Testing "></a>B. Trial and Testing <a name="trial-testing"></a></h3><p>Many TMS providers offer free trials or demo versions. Take advantage of these opportunities to test the TMS with your existing i18next projects. This hands-on experience will allow you to assess how well the TMS integrates with i18next and how user-friendly it is for your team.</p><h3 id="C-Collaboration-and-Feedback"><a href="#C-Collaboration-and-Feedback" class="headerlink" title="C. Collaboration and Feedback "></a>C. Collaboration and Feedback <a name="collaboration-feedback"></a></h3><p>Engage in conversations with your development team and localization managers. Gather their feedback and consider their input when evaluating TMS options. Understanding their specific pain points and requirements will help you make an informed decision that aligns with your team&#39;s preferences and workflow.</p><h3 id="D-Support-and-Documentation"><a href="#D-Support-and-Documentation" class="headerlink" title="D. Support and Documentation "></a>D. Support and Documentation <a name="support-documentation"></a></h3><p>Reliable customer support is crucial when dealing with complex internationalization and localization tasks. Look for TMS providers that offer responsive customer support and comprehensive documentation - not only for the TMS itself, but also for i18next. Having readily available resources and assistance will ensure that your team can resolve any issues quickly and efficiently.</p><h3 id="E-Pricing-and-Scalability"><a href="#E-Pricing-and-Scalability" class="headerlink" title="E. Pricing and Scalability "></a>E. Pricing and Scalability <a name="pricing-scalability"></a></h3><p>Carefully evaluate the pricing models offered by different TMS providers. Consider the scalability of the TMS and how it aligns with your project&#39;s growth potential. Look for transparent pricing structures that suit your project&#39;s needs without hidden costs. Ask yourself: &quot;Do I pay too much just by scratching the border of the next bigger plan? Or does the costs scale with the project growth?&quot;</p><h3 id="F-Integration-with-Developer-Tools"><a href="#F-Integration-with-Developer-Tools" class="headerlink" title="F. Integration with Developer Tools "></a>F. Integration with Developer Tools <a name="integration"></a></h3><p>Efficiency is vital in any development process. Check if the TMS integrates smoothly with other tools and platforms that your development team already uses. Seamless integration with code repositories, build systems, and deployment platforms will enhance your team&#39;s productivity.</p><p>By following these practical tips, you can confidently assess and select a TMS, that ensures smooth integration with i18next and streamlines your localization workflow.</p><h2 id="V-Introducing-locize-A-Unique-Translation-Management-Solution"><a href="#V-Introducing-locize-A-Unique-Translation-Management-Solution" class="headerlink" title="V. Introducing locize: A Unique Translation Management Solution "></a>V. Introducing <a href="/">locize</a>: A Unique Translation Management Solution <a name="locize-solution"></a></h2><h3 id="A-The-Close-Alignment-with-i18next-Principles"><a href="#A-The-Close-Alignment-with-i18next-Principles" class="headerlink" title="A. The Close Alignment with i18next Principles "></a>A. The Close Alignment with i18next Principles <a name="alignment-with-i18next"></a></h3><p>As the <a href="/i18next.html#official-sponsor">official sponsor</a> of i18next, <a href="/">locize</a> is more than just another translation management solution; it is a TMS designed to harmonize with the core principles and philosophy of i18next. Developed by the same creators as i18next, locize benefits from a deep understanding of the needs and challenges faced by developers and localization teams.</p><p>This close alignment ensures that locize seamlessly integrates with i18next, offering a unified and optimized experience for managing translations. By leveraging <a href="/i18next.html#how-does-i18next-work">i18next&#39;s extensible architecture</a>, locize empowers users to leverage the full potential of the framework while providing additional tools and features that go beyond traditional translation management.</p><p><a href="/i18next.html#how-does-i18next-work"><img src="i18next_how_it_works.png"></a></p><h3 id="B-Unique-Features-Setting-locize-Apart"><a href="#B-Unique-Features-Setting-locize-Apart" class="headerlink" title="B. Unique Features Setting locize Apart "></a>B. Unique Features Setting locize Apart <a name="unique-features"></a></h3><h4 id="1-Strong-Support-for-Versioning-and-Software-Development-Process"><a href="#1-Strong-Support-for-Versioning-and-Software-Development-Process" class="headerlink" title="1. Strong Support for Versioning and Software Development Process"></a>1. Strong Support for Versioning and Software Development Process</h4><p>One of locize&#39;s standout features is its robust support for <a href="https://docs.locize.com/more/versioning">versioning</a>, a critical aspect of software development. Proper versioning ensures that changes to translations are managed efficiently, facilitating collaboration among developers and localization teams. With locize, users can confidently make updates and track progress without the fear of losing previous translations or creating confusion.</p><h4 id="2-Freedom-from-Service-Lock-In"><a href="#2-Freedom-from-Service-Lock-In" class="headerlink" title="2. Freedom from Service Lock-In"></a>2. Freedom from Service Lock-In</h4><p>Unlike some other translation management services, locize believes in giving users the freedom to choose. While locize offers exceptional value as a TMS, it does not lock users into its platform. Instead, users can export their translations and use them with i18next or other preferred localization frameworks. This approach empowers users with full control over their translation data and enhances the flexibility of their localization workflow.</p><h4 id="3-Exceptional-Support-from-i18next-Creators"><a href="#3-Exceptional-Support-from-i18next-Creators" class="headerlink" title="3. Exceptional Support from i18next Creators"></a>3. Exceptional Support from i18next Creators</h4><p>The backing of the i18next creators ensures that locize users receive unparalleled support and expertise in internationalization and localization. The team behind locize is intimately familiar with the intricacies of i18next, providing developers with valuable guidance and assistance in optimizing their localization workflow.</p><h4 id="4-Support-for-Multiple-Namespace-Files-and-Proper-Pluralization"><a href="#4-Support-for-Multiple-Namespace-Files-and-Proper-Pluralization" class="headerlink" title="4. Support for Multiple Namespace/Files and Proper Pluralization"></a>4. Support for Multiple Namespace/Files and Proper Pluralization</h4><p>locize goes beyond standard translation management offerings by providing support for multiple <a href="https://docs.locize.com/more/namespaces">namespaces</a> or files within a project. This allows developers to organize translations efficiently, ensuring clarity and simplicity in the localization process.</p><p>Additionally, locize understands the complexities of <a href="https://docs.locize.com/more/general-questions/why-do-i-see-strange-new-keys-marked-as-one-few-many-others">pluralization rules</a> in different languages. By correctly calculating progress in various languages based on distinct pluralization rules, locize ensures that translations are accurate and contextually appropriate, regardless of the language being translated.</p><h4 id="5-Integration-with-Third-Party-Translation-Services"><a href="#5-Integration-with-Third-Party-Translation-Services" class="headerlink" title="5. Integration with Third-Party Translation Services"></a>5. Integration with Third-Party Translation Services</h4><p>To cater to diverse user needs, locize offers integration with third-party <a href="/services.html#translationservices">translation services</a>. This feature allows users to leverage additional capabilities provided by these services, such as project finalization, the option to work with preferred translators, approvals, and direct contact with translators. The integration with third-party services streamlines the translation process and allows users to <a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators">collaborate effectively with translation professionals</a>.</p><h4 id="6-Freedom-to-choose-how-to-serve-your-translations"><a href="#6-Freedom-to-choose-how-to-serve-your-translations" class="headerlink" title="6. Freedom to choose how to serve your translations"></a>6. Freedom to choose how to serve your translations</h4><p>While you get most comfort out of using the locize <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">CDN</a>, your environment might demand you to bundle the translations with your product (eg. offline usage in areas with restricted internet access or with <a href="https://docs.locize.com/more/backend-fallback">offline fallback</a>).</p><p>Using the CDN has three big advantages:</p><ul><li>You can deploy updates to translations without the need to redeploy/rollout a new version of your application.</li><li>During development, testing you can set your versions to auto publishing. Doing so your translation changes are reflected immediately in your application and results in a lot easier development process.</li><li>You can easily set a version to publish in private mode, which means you will need an API key to download your translations. This enables you for example to use locize as before but without leaking any information to the public.</li></ul><p>If your product demands to download the translations, because you need or prefer to host or bundle them yourself you can do so. Using our CDN is completely optional and get only billed if you’re using it.You can download/export the translations using the <a href="https://docs.locize.com/integration/api">API</a> or the locize UI or the <a href="https://github.com/locize/locize-cli">CLI</a>, also in various <a href="https://docs.locize.com/integration/supported-formats">formats</a>.</p><h3 id="C-locize-The-Perfect-TMS-for-i18next-Powered-Projects"><a href="#C-locize-The-Perfect-TMS-for-i18next-Powered-Projects" class="headerlink" title="C. locize: The Perfect TMS for i18next-Powered Projects "></a>C. locize: The Perfect TMS for i18next-Powered Projects <a name="locize-perfect-i18next"></a></h3><p>With its deep integration with i18next, locize emerges as the perfect translation management system for developers and localization teams working with i18next-powered projects. Its unique features, built on a foundation of understanding and commitment to i18next principles, make it a standout choice in the realm of translation management.</p><p>In the next section, we will explore key considerations for selecting a TMS with a focus on seamless i18next integration, ensuring that your localization workflow remains efficient, accurate, and hassle-free.</p><h2 id="VI-Conclusion-Why-locize-is-the-Perfect-TMS-to-Choose"><a href="#VI-Conclusion-Why-locize-is-the-Perfect-TMS-to-Choose" class="headerlink" title="VI. Conclusion: Why locize is the Perfect TMS to Choose "></a>VI. Conclusion: Why locize is the Perfect TMS to Choose <a name="locize-perfect-tms"></a></h2><p>Throughout this journey, we have delved into the significance of i18next as a mature and extensible internationalization framework, and the emergence of locize as a unique translation management solution tailored to complement i18next. Now, let&#39;s reinforce why locize stands as the perfect TMS for i18next-powered projects:</p><ol>  <li>    <b>Deep Integration with i18next Principles:</b><br/>As the <a href="/i18next.html#official-sponsor">official sponsor</a> of i18next, locize's creators have ensured seamless integration with the framework, offering a unified and optimized experience for managing translations.    <br/>    <br/>  </li>  <li>    <b>Unique Features and Differentiators:</b><br/>locize goes beyond traditional TMS offerings with features like strong <a href="https://docs.locize.com/more/versioning" target="_blank">versioning</a>, freedom from service lock-in, support for multiple <a href="https://docs.locize.com/more/namespaces" target="_blank">namespaces/files</a>, and proper <a href="https://docs.locize.com/more/general-questions/why-do-i-see-strange-new-keys-marked-as-one-few-many-others" target="_blank">pluralization</a>. These unique capabilities set locize apart and enhance the i18next localization workflow.    <br/>    <br/>  </li>  <li>    <b>Exceptional Support from i18next Creators:</b><br/>The team behind locize shares the expertise of i18next's creators, providing unrivaled support and guidance in internationalization and localization tasks.    <br/>    <br/>  </li>  <li>    <b>Compatibility and Flexibility:</b><br/>locize is designed to be compatible with i18next and allows for customization to adapt to unique project requirements and workflows.    <br/>    <br/>  </li>  <li>    <b>Seamless Collaboration:</b><br/>With its collaboration-friendly features, locize streamlines communication between developers and localization <a href="/for-your-team.html">teams</a>, enhancing the efficiency of the translation process.    <br/>    <br/>  </li>  <li>    <b>Integration with Third-Party Translation Services:</b><br/>locize's integration with third-party <a href="/services.html#translationservices">translation services</a> expands its capabilities, providing access to additional features and supporting various translation workflows.    <br/>    <br/>  </li>  <li>    <b>Efficient Translation Workflow:</b><br/>locize's focus on <a href="https://docs.locize.com/more/versioning" target="_blank">versioning</a>, <a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators" target="_blank">collaboration</a>, and <a href="https://docs.locize.com/whats-inside/history">change tracking</a> ensures a smooth and efficient translation workflow for i18next-powered projects.    <br/>    <br/>  </li></ol><p>Choosing the right TMS is paramount to the success of your localization efforts, and locize emerges as the perfect choice to meet the specific needs of i18next projects. Its compatibility, unique features, and exceptional support make it an invaluable tool in the globalized digital landscape.</p><p>As you embark on your internationalization journey with i18next, let <a href="/">locize</a> be your steadfast companion in managing translations efficiently and effectively. Embrace the power of this dynamic duo, and watch your projects flourish on the global stage.</p><p>Try <a href="https://www.locize.app/register">locize</a> today and see the difference it can make for your business.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/TFV_vhJs5DY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "What is i18next, and how does it differ from other internationalization libraries?",      "acceptedAnswer": {        "@type": "Answer",        "text": "i18next is a powerful internationalization framework that enables developers to add multilingual support to web and mobile applications. Unlike other libraries, i18next is highly extensible, compatible with various UI frameworks and i18n formats, making it a versatile choice for internationalization tasks."      }    }, {      "@type": "Question",      "name": "How does locize integrate with i18next, and what advantages does it offer?",      "acceptedAnswer": {        "@type": "Answer",        "text": "locize is the official sponsor of i18next and is designed to align closely with i18next principles. It seamlessly integrates with i18next, offering unique features such as strong versioning, freedom from service lock-in, support for multiple namespaces/files, and proper pluralization. The advantage of locize lies in its deep understanding of i18next and exceptional support from the i18next creators."      }    }, {      "@type": "Question",      "name": "Can I export translations from locize and use them with other localization frameworks?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Yes, locize believes in giving users the freedom to choose. While it offers exceptional value as a TMS, it does not lock users into its platform. You can export translations from locize and use them with i18next or other preferred localization frameworks, providing full control over your translation data and enhancing flexibility in your localization workflow."      }    }, {      "@type": "Question",      "name": "Does locize support collaboration between developers and translation teams?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Yes, locize provides features that streamline communication and collaboration between developers and translation teams. With versioning support, collaboration-friendly tools, and integration with third-party translation services, locize ensures a smooth and efficient translation workflow, promoting effective teamwork and timely localization."      }    }, {      "@type": "Question",      "name": "How does locize handle pluralization rules in different languages?",      "acceptedAnswer": {        "@type": "Answer",        "text": "locize understands the complexities of pluralization rules in various languages. It correctly calculates progress in multiple languages based on distinct pluralization rules, ensuring that translations are accurate and contextually appropriate, regardless of the language being translated. This feature enhances the precision and quality of translated content in diverse linguistic contexts."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> tms </tag>
            
            <tag> tech lead </tag>
            
            <tag> engineering manager </tag>
            
            <tag> translation management </tag>
            
            <tag> how to choose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Supercharge Your TypeScript App: Mastering i18next for Type-Safe Translations</title>
      <link href="/blog/i18next-typescript/"/>
      <url>/blog/i18next-typescript/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg" alt="TypeScript Localization made easy with this step-by-step guide using i18next ✅" title="TypeScript Localization example"></p><p>As our world becomes increasingly interconnected, the development of web applications that cater to a <a href="../grow-online-business/">global audience</a> takes precedence among developers. If you&#39;re a TypeScript developer, you&#39;re likely acquainted with the advantages of static typing and the assurance it provides in your codebase. When it comes to internationalization (<a href="../what-is-i18n/">i18n</a>) and localization (<a href="../what-is-software-localization/">l10n</a>), maintaining the same level of type safety becomes crucial. This is precisely where <a href="https://www.i18next.com/">i18next</a>, an influential i18n framework, enters the picture.</p><p>In the past, i18next already furnished TypeScript definitions for its API, enabling developers to benefit from type checking while utilizing the library. However, a significant limitation persisted, specifically the absence of type safety for translation keys. Consequently, if a translation resource was missing or underwent a name change, the TypeScript compiler failed to detect it, resulting in potential errors during runtime.</p><p><img src="ts_api.jpg"></p><p>Nevertheless, with the advent of the new iterations of i18next, that limitation has been overcome <em>(thanks largely to <a href="https://github.com/pedrodurek">Pedro Durek</a>)</em>. Now, i18n keys boast complete type safety. Whenever a developer employs a non-existent or modified i18n key, the TypeScript compiler immediately raises an error, promptly alerting you to the issue before it gives rise to runtime complications. In addition, there is also an improved intellisense experience.</p><p>Within this guide, we will delve into the art of leveraging the latest version of i18next to attain translations that are impervious to type-related errors in your TypeScript applications. We will encompass everything from the fundamentals of i18next setup to advanced techniques. All the while, you will benefit from the added safety net of type checking for your translation keys.</p><p>By the conclusion of this guide, you will possess a profound comprehension of how to harness the force of i18next&#39;s type-safe translations within your TypeScript projects. You will be equipped to ensure that your translations are not only precise and adaptable but also consistently error-free, courtesy of the seamless integration between i18next and TypeScript. Let us embark on this journey together and furnish you with the knowledge and tools necessary to create localized applications that effortlessly cater to diverse language preferences while maintaining the robustness of your codebase.</p><h2 id="In-Memory-translations"><a href="#In-Memory-translations" class="headerlink" title="In-Memory translations "></a>In-Memory translations <a name="in-memory-translations"></a></h2><p>For a simple i18next setup, you probably have something like this:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> enNs1 <span class="keyword">from</span> <span class="string">&#x27;./locales/en/ns1.json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> enNs2 <span class="keyword">from</span> <span class="string">&#x27;./locales/en/ns2.json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> deNs1 <span class="keyword">from</span> <span class="string">&#x27;./locales/de/ns1.json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> deNs2 <span class="keyword">from</span> <span class="string">&#x27;./locales/de/ns2.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line">i18next.init(&#123;</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">defaultNS</span>: <span class="string">&#x27;ns1&#x27;</span>,</span><br><span class="line">  <span class="attr">resources</span>: &#123;</span><br><span class="line">    <span class="attr">en</span>: &#123;</span><br><span class="line">      <span class="attr">ns1</span>: enNs1,</span><br><span class="line">      <span class="attr">ns2</span>: enNs2,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">de</span>: &#123;</span><br><span class="line">      <span class="attr">ns1</span>: deNs1,</span><br><span class="line">      <span class="attr">ns2</span>: deNs2,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>You import the translation resources and you&#39;re adding them via i18next <a href="https://www.i18next.com/overview/api#init">init</a> function.</p><p>To make the translation type-safe, we create an <code>i18next.d.ts</code> file preferably in a <code>@types</code> folder and we import the translation resources of our reference language:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> enNs1 <span class="keyword">from</span> <span class="string">&#x27;../locales/en/ns1.json&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> enNs2 <span class="keyword">from</span> <span class="string">&#x27;../locales/en/ns2.json&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;i18next&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> CustomTypeOptions &#123;</span><br><span class="line">    <span class="attr">defaultNS</span>: <span class="string">&#x27;ns1&#x27;</span>;</span><br><span class="line">    resources: &#123;</span><br><span class="line">      <span class="attr">ns1</span>: <span class="keyword">typeof</span> enNs1;</span><br><span class="line">      ns2: <span class="keyword">typeof</span> enNs2;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="inmemory_ts_1.jpg"></p><p>  That's already great! But: <a target="_blank" rel="noopener" href="https://youtu.be/m-lSlJc_5NE">We Can Do Better</a>! 😜  <a target="_blank" rel="noopener" href="https://youtu.be/m-lSlJc_5NE">    <img class="ignore-gallery-item" src="do_better.gif" loading="lazy" width="480" height="176" style="float: right; margin: 0 0 0 15px;">  </a></p><br style="clear: both;" /><p>With the help of <a href="https://github.com/i18next/i18next-resources-for-ts">i18next-resources-for-ts</a> we can generate a single resource file that we can use.</p><p>So install <code>i18next-resources-for-ts</code> and execute the <code>toc</code> command, i.e. something like: <code>i18next-resources-for-ts toc -i ./locales/en -o ./@types/resources.ts</code></p><p>So we can modify the <code>i18next.d.ts</code> file like this:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resources <span class="keyword">from</span> <span class="string">&#x27;./resources&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;i18next&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> CustomTypeOptions &#123;</span><br><span class="line">    <span class="attr">defaultNS</span>: <span class="string">&#x27;ns1&#x27;</span>;</span><br><span class="line">    resources: <span class="keyword">typeof</span> resources;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🧑‍💻 A complete code example can be found <a href="https://github.com/locize/i18next-typescript-examples/tree/main/1">here</a>.</p><h3 id="Plurals"><a href="#Plurals" class="headerlink" title="Plurals "></a>Plurals <a name="plurals"></a></h3><p>btw: also plural keys works:</p><p><img src="plurals_ts.jpg"></p><h3 id="Fallback-Namespace"><a href="#Fallback-Namespace" class="headerlink" title="Fallback Namespace "></a>Fallback Namespace <a name="fallbackns"></a></h3><p>And also fallback namespace handling works:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @types/i18next.d.ts</span></span><br><span class="line"><span class="keyword">import</span> resources <span class="keyword">from</span> <span class="string">&#x27;./resources&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;i18next&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> CustomTypeOptions &#123;</span><br><span class="line">    <span class="attr">defaultNS</span>: <span class="string">&#x27;ns1&#x27;</span>;</span><br><span class="line">    fallbackNS: <span class="string">&#x27;fallback&#x27;</span>;</span><br><span class="line">    resources: <span class="keyword">typeof</span> resources;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// works because of fallbackNS</span></span><br><span class="line">i18next.t(<span class="string">&#x27;fallbackKey&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation "></a>Interpolation <a name="interpolation"></a></h3><p>Unfortunately, automatic interpolation inference won&#39;t work if your translations are placed in JSON files, only in TS files using <code>as const</code> keyword or an interface in a <code>d.ts</code> file, as long as <a href="https://github.com/microsoft/TypeScript/issues/32063">this TypeScript issue</a> is not addressed.</p><p><img src="interpolation_ts_nok.jpg"></p><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface "></a>Interface <a name="in-memory-translations-interface"></a></h3><p>To address this, let&#39;s make use of the <code>interface</code> command, i.e. something like: <code>i18next-resources-for-ts interface -i ./locales/en -o ./@types/resources.d.ts</code></p><p>This way we can change the <code>i18next.d.ts</code> file like this:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Resources <span class="keyword">from</span> <span class="string">&#x27;./resources&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;i18next&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> CustomTypeOptions &#123;</span><br><span class="line">    <span class="attr">defaultNS</span>: <span class="string">&#x27;ns1&#x27;</span>;</span><br><span class="line">    resources: Resources;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the interpolation inference works and fails if the passed variable name does not match:</p><p><img src="interpolation_ts_ok.jpg"></p><p>🧑‍💻 A complete code example can be found <a href="https://github.com/locize/i18next-typescript-examples/tree/main/2">here</a>.</p><h2 id="React-js"><a href="#React-js" class="headerlink" title="React.js "></a>React.js <a name="react"></a></h2><p>A React.js based i18next setup with in-memory translation resources could also <a href="https://github.com/locize/i18next-typescript-examples/tree/main/3">look very similar</a> to the above example, so let&#39;s raise the bar a little bit and see what a setup with lazy loading translations like with <a href="https://github.com/i18next/i18next-http-backend">i18next-http-backend</a> looks like:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> HttpApi <span class="keyword">from</span> <span class="string">&#x27;i18next-http-backend&#x27;</span>;</span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  .use(HttpApi)</span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">defaultNS</span>: <span class="string">&#x27;ns1&#x27;</span>,</span><br><span class="line">    <span class="attr">backend</span>: &#123;</span><br><span class="line">      <span class="attr">loadPath</span>: <span class="string">&#x27;/locales/&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18next;</span><br></pre></td></tr></table></figure><p>To make the translation type-safe, we again create an <code>i18next.d.ts</code> file preferably in a <code>@types</code> folder like this:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Resources <span class="keyword">from</span> <span class="string">&#x27;./resources&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;i18next&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> CustomTypeOptions &#123;</span><br><span class="line">    <span class="attr">defaultNS</span>: <span class="string">&#x27;ns1&#x27;</span>;</span><br><span class="line">    resources: Resources;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And again we make use of the <code>interface</code> command, i.e. something like: <code>i18next-resources-for-ts interface -i ./public/locales/en -o ./src/@types/resources.d.ts</code></p><p>This way, the translations are loaded at runtime, but the translations are type-checked during development.</p><p>With the new <a href="https://react.i18next.com/">react-i18next</a> version, when loading multiple namespaces, <code>t</code> function will infer and accept the keys for the first namespace. So this pattern is now accepted:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Comp2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;t&#125; = useTranslation([<span class="string">&#x27;ns1&#x27;</span>, <span class="string">&#x27;ns2&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;t(&#x27;description.part1&#x27;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;t(&#x27;description.part1&#x27;, &#123; ns: &#x27;ns1&#x27; &#125;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;t(&#x27;description.part2&#x27;, &#123; ns: &#x27;ns2&#x27; &#125;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Comp2;</span><br></pre></td></tr></table></figure><h3 id="Trans-component"><a href="#Trans-component" class="headerlink" title="Trans component "></a>Trans component <a name="trans"></a></h3><p>And also the <a href="https://react.i18next.com/latest/trans-component"><code>Trans</code> component</a> is type-safe:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useTranslation, Trans &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Comp1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;t&#125; = useTranslation();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          Welcome to react using <span class="tag">&lt;<span class="name">code</span>&gt;</span>react-i18next<span class="tag">&lt;/<span class="name">code</span>&gt;</span> fully type-safe</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;t(&#x27;description.part1&#x27;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;t(&#x27;description.part2&#x27;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Comp1;</span><br></pre></td></tr></table></figure><p><img src="react_trans_ts.jpg"></p><p>🧑‍💻 A complete code example can be found <a href="https://github.com/locize/i18next-typescript-examples/tree/main/4">here</a>.</p><h2 id="No-app-bundled-provided-translations"><a href="#No-app-bundled-provided-translations" class="headerlink" title="No app-bundled/provided translations "></a>No app-bundled/provided translations <a name="locize"></a></h2><p>There is also a way to keep the translations completely separate from your code repository while maintaining type safety.</p><p>Let&#39;s take the React.js project used in <a href="../react-i18next/">this awesome guide</a>...</p><p>The final i18next setup in this example looks like this:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LastUsed <span class="keyword">from</span> <span class="string">&#x27;locize-lastused&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; locizePlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DateTime &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isProduction = process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: process.env.REACT_APP_LOCIZE_PROJECTID <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: process.env.REACT_APP_LOCIZE_APIKEY <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">referenceLng</span>: process.env.REACT_APP_LOCIZE_REFLNG <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">version</span>: process.env.REACT_APP_LOCIZE_VERSION <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isProduction) &#123;</span><br><span class="line">  i18n.use(LastUsed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  .use(locizePlugin)</span><br><span class="line">  .use(Backend)</span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">    <span class="attr">locizeLastUsed</span>: locizeOptions,</span><br><span class="line">    <span class="attr">saveMissing</span>: !isProduction</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">i18n.services.formatter?.add(<span class="string">&#x27;DATE_HUGE&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> DateTime.fromJSDate(value).setLocale(lng <span class="keyword">as</span> <span class="built_in">string</span>).toLocaleString(DateTime.DATE_HUGE)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p>So at runtime we load the translation directly from the <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">locize CDN</a>.</p><blockquote><p>So how do we get type-safe translations during development?</p></blockquote><p>We create some npm scripts to help us:</p><ol><li>Download the published translations (in reference language) to a temporary directory, i.e.:</li></ol><p>  <code>downloadEn</code>: <code>locize download --project-id=0bbc223a-9aba-4a90-ab93-ab9d7bf7f780 --language=en --ver=latest --clean=true --path=./src/@types/locales</code></p><ol start="2"><li>Create the appropriate interface definition file, i.e.: <code>interface</code>:</li></ol><p>  <code>i18next-resources-for-ts interface -i ./src/@types/locales -o ./src/@types/resources.d.ts</code></p><ol start="3"><li>Final script: download, create interface and delete the temporary files, i.e.:</li></ol><p>  <code>update-interface</code>: <code>npm run downloadEn &amp;&amp; npm run interface &amp;&amp; rm -rf ./src/@types/locales</code></p><p>Like in the previous example, we now can just import that interface in our <code>i18next.d.ts</code> file:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Resources <span class="keyword">from</span> <span class="string">&#x27;./resources&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;i18next&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> CustomTypeOptions &#123;</span><br><span class="line">    <span class="attr">resources</span>: Resources;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That&#39;s it!</p><p><img src="not_existing_key.jpg"></p><p>The translations are separated from our code repository and at the same time we maintain type safety with the help of an interface.</p><p>🧑‍💻 A complete code example can be found <a href="https://github.com/locize/i18next-typescript-examples/tree/main/5">here</a>.</p><p>There&#39;s also a <a href="https://youtu.be/GLIas4DH3Ww">video</a> about this topic.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/GLIas4DH3Ww" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>In conclusion, mastering i18next for type-safe translations empowers TypeScript developers to unlock the full potential of their applications. By ensuring accurate localization, eliminating runtime errors, and leveraging the seamless integration between i18next and TypeScript, developers can create robust, localized applications that cater to diverse language preferences. With the knowledge and tools provided in this guide, you are equipped to supercharge your TypeScript app and deliver exceptional user experiences on a global scale.<br /><strong>Happy coding!</strong></p><p>So if you want to take your i18n topic to the next level, it&#39;s worth trying the <a href="https://locize.com/">localization management platform - locize</a>.</p><p>The founders of <a href="https://locize.com/">locize</a> are also the creators of <a href="https://www.i18next.com/">i18next</a>. So by using <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.</p><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "Can I use i18next for type-safe translations in JavaScript projects?",      "acceptedAnswer": {        "@type": "Answer",        "text": "While i18next itself is primarily designed for JavaScript projects, the concept of type-safe translations is most beneficial when using TypeScript. TypeScript provides static type checking, which helps catch errors and provides enhanced developer experience when working with i18next."      }    },{      "@type": "Question",      "name": "How does type safety improve the localization process?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Type safety ensures that translation keys are validated during development, preventing potential runtime errors. It allows developers to catch missing or modified translation keys early, improving the overall quality and reliability of localized applications."      }    },{      "@type": "Question",      "name": "Can I still use i18next with type safety if my project has dynamic translations?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Yes, you can still achieve type safety with dynamic translations. By using techniques like generating resource files or defining interfaces for your translations, you can maintain type safety even with dynamically loaded translation content."      }    },{      "@type": "Question",      "name": "Are there any performance implications when using type-safe translations with i18next?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Type-safe translations themselves do not significantly impact runtime performance. The primary focus is on enhancing developer productivity, reducing errors, and improving code quality. The performance of the application largely depends on how i18next is implemented and the size of translation resources."      }    },{      "@type": "Question",      "name": "Are there any limitations or trade-offs when using type-safe translations with i18next?",      "acceptedAnswer": {        "@type": "Answer",        "text": "While type-safe translations provide numerous benefits, there are a few limitations to consider. For example, automatic interpolation inference may not work with translations placed in JSON files. Additionally, if your translations are separated from your code repository, you need to ensure synchronization between translation updates and your codebase."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> react </tag>
            
            <tag> react-i18next </tag>
            
            <tag> typescript </tag>
            
            <tag> types </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fixing Missing Translations in i18next - Learn how to handle missing translations in i18next effectively</title>
      <link href="/blog/missing-translations/"/>
      <url>/blog/missing-translations/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>In today&#39;s globalized world, creating multilingual applications is crucial to reaching a wider audience. One of the key components of successful application localization is accurate translation. However, it&#39;s not uncommon to encounter missing translations when using <a href="https://www.i18next.com/">i18next</a>, a popular internationalization framework. These missing translations can lead to a confusing user experience and undermine the efforts put into localization. In this article, we will explore various strategies and techniques to gracefully handle missing translations in <a href="https://www.i18next.com/">i18next</a>, enabling you to provide a polished and seamless multilingual application.</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Before diving into the details, let&#39;s first understand the significance of i18next and the challenges posed by missing translations. i18next is a powerful JavaScript library that simplifies the process of internationalizing web applications. It allows developers to easily manage translations for different languages by usually organizing them in language files and using unique translation keys. This approach ensures that the application&#39;s content can be dynamically translated based on the user&#39;s preferred language.</p><p>However, when translations are missing for specific keys or languages, it can disrupt the localization workflow. Users may encounter untranslated content, placeholders, or even errors, leading to a poor user experience. To avoid such situations, it is essential to have effective strategies in place to handle missing translations and maintain a high level of quality in your multilingual application.</p><h2 id="Understanding-i18next-Translation"><a href="#Understanding-i18next-Translation" class="headerlink" title="Understanding i18next Translation"></a>Understanding i18next Translation</h2><p>To effectively address missing translations, it&#39;s important to have a clear understanding of how i18next translation works. In i18next, translations are usually stored in language files, typically in JSON format. Each translation string is associated with a unique key that is used to retrieve the translated content. These language files are organized based on the supported languages, allowing the application to load the appropriate translations based on the user&#39;s language preference.</p><p>Maintaining translated content requires regular updates to language files whenever new features are added or existing ones are modified. This ensures that translations remain accurate and up to date, providing a seamless experience for users across different languages.</p><h2 id="Identifying-Missing-Translations"><a href="#Identifying-Missing-Translations" class="headerlink" title="Identifying Missing Translations"></a>Identifying Missing Translations</h2><p>Before addressing missing translations, it&#39;s crucial to identify them. There are several techniques you can employ to detect untranslated content in your application. One effective approach is to enable i18next&#39;s debug mode, which logs warnings for missing translations in the browser&#39;s console. By inspecting these warnings, you can quickly identify the translation keys that require attention.</p><p>Additionally, thorough testing and quality assurance play a vital role in identifying missing translations. Test your application with different languages and carefully review the content for any untranslated strings. By following these practices, you can ensure that your application&#39;s translations are comprehensive and accurate.</p><h2 id="Strategies-to-Handle-Missing-Translations"><a href="#Strategies-to-Handle-Missing-Translations" class="headerlink" title="Strategies to Handle Missing Translations"></a>Strategies to Handle Missing Translations</h2><p>When it comes to handling missing translations, there are several strategies you can employ in your i18next workflow:</p><p><strong>1. Using Fallback Languages</strong>: To provide a default content for missing translations, you can utilize <a href="https://www.i18next.com/principles/fallback#language-fallback">fallback languages</a>. When a translation is missing for a specific key, i18next can automatically fallback to a default language and display the corresponding translation. This ensures that users still receive meaningful content even if a specific translation is unavailable.</p><p><strong>2. Implementing Placeholder Text (default value)</strong>: Another approach is to implement <a href="https://www.i18next.com/translation-function/essentials#passing-a-default-value">placeholder text</a> for untranslated content. This allows you to display temporary text or placeholders instead of leaving the content blank. Placeholder text can provide context to the user and give them an idea of what the translated content would be.</p><p><strong>3. Customizing Error Handling</strong>: i18next provides <a href="https://www.i18next.com/overview/configuration-options#missing-keys">customization options</a> for handling missing translations. You can define custom error handlers to display informative messages or alternative content when a translation is missing. This way, you can tailor the error handling to match your application&#39;s requirements and maintain a consistent user experience.</p><p><strong>4. Systematically Track Missing Translations: Leveraging Community and Machine Translation Services</strong>: When facing a large volume of translations or time constraints, leveraging community translation platforms or machine translation services can be beneficial. Platforms like locize enable collaboration with translators, making it easier to manage and update translations. Additionally, with the <a href="https://www.i18next.com/overview/configuration-options#missing-keys"><code>saveMissing</code></a> feature in i18next, you can automatically save missing translations and leverage <a href="https://docs.locize.com/whats-inside/auto-machine-translation">machine translation services</a> to provide initial translations that can later be refined by human translators. This is how such a workflow <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY&t=401s">may look like</a>.</p><p><a href="https://www.youtube.com/watch?v=TFV_vhJs5DY&t=401s"><img src="auto-translate-missing.gif"></a></p><p>By implementing these strategies, you can ensure that your application gracefully handles missing translations, providing a seamless experience for users across different languages.</p><h2 id="Best-Practices-for-i18next-Localization-Workflow"><a href="#Best-Practices-for-i18next-Localization-Workflow" class="headerlink" title="Best Practices for i18next Localization Workflow"></a>Best Practices for i18next Localization Workflow</h2><p>To maintain a smooth localization workflow with i18next, it&#39;s important to follow some best practices:</p><p><strong>1. Establishing a Clear Translation Process</strong>: Define a clear process for managing translations, including <a href="https://docs.locize.com/guides-tips-and-tricks/keeping-track-of-new-translations">how and when translations are updated</a>. This ensures that translations remain accurate and up to date.</p><p><strong>2. Collaborating with Translators and Maintaining a Glossary</strong>: Establish effective communication channels with translators and maintain a <a href="https://docs.locize.com/whats-inside/glossary">glossary of frequently used terms</a>. This promotes consistency and accuracy across translations.</p><p><strong>3. Consistent Formatting and Placeholders</strong>: Ensure that translations follow consistent <a href="../i18n-formats-javascript/#i18next">formatting</a> guidelines and utilize placeholders effectively. This helps maintain the layout and structure of your application across different languages.</p><p><strong>4. Version Control and Tracking Changes</strong>: Use some sort of <a href="https://docs.locize.com/more/versioning">versioning</a> and <a href="https://docs.locize.com/whats-inside/history">history</a> capabilies to track changes in language files. This allows you to easily revert to previous translations if needed and track modifications over time.</p><p>By incorporating these best practices into your i18next localization workflow, you can streamline the translation process and maintain a high level of quality in your multilingual application.</p><h2 id="Improving-User-Experience"><a href="#Improving-User-Experience" class="headerlink" title="Improving User Experience"></a>Improving User Experience</h2><p>Handling missing translations not only involves providing alternative content but also focuses on enhancing the user experience. Here are some tips to improve user experience in the context of translations:</p><p><strong>1. Communicating Missing Translations</strong>: When a translation is missing, it&#39;s important to communicate this to the user clearly. Displaying an informative message or a placeholder indicating that the content is being translated can help manage user expectations.</p><p><strong>2. Providing Clear Instructions for Translators</strong>: If you collaborate with translators, it&#39;s essential to provide clear instructions and guidelines for translations. This includes <a href="https://docs.locize.com/whats-inside/context">context information</a>, style guides, and any specific considerations that might be relevant.</p><p><strong>3. Using Context and Variables</strong>: Take advantage of i18next&#39;s support for <a href="https://www.i18next.com/translation-function/context">context</a> and <a href="https://www.i18next.com/translation-function/interpolation">variables</a> in translations. By providing additional context or dynamically substituting variables, you can ensure that translations remain accurate and contextually relevant.</p><p><strong>4. Avoiding Truncated or Overlapping Text</strong>: Consider the length of translated strings and ensure they fit within the layout of your application. Truncated or overlapping text can lead to readability issues and a subpar user experience.</p><p>By considering these aspects, you can provide a seamless and intuitive experience for users, even in multilingual applications with missing translations.</p><h2 id="Enhancing-i18next-Performance"><a href="#Enhancing-i18next-Performance" class="headerlink" title="Enhancing i18next Performance"></a>Enhancing i18next Performance</h2><p>As your application grows and incorporates more languages, optimizing the performance of i18next becomes important. Here are some strategies to enhance the performance of your i18next implementation:</p><p><strong>1. Caching Translations</strong>: Implement caching mechanisms to reduce the number of requests made to load translations. <a href="https://docs.locize.com/more/caching">Caching</a> translations <a href="https://docs.locize.com/more/caching/alternative-caching">locally</a> or utilizing a <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">CDN</a> can significantly improve the performance of your application.</p><p><strong>2. Minifying and Bundling Language Files</strong>: Minify and <a href="https://docs.locize.com/more/general-questions/do-i-have-to-use-the-locize-cdn-or-can-i-host-bundle-the-translations-directly">bundle</a> your language files to reduce their size. This helps reduce network latency and improves the loading speed of your application.</p><p><strong>3. Implementing Lazy Loading</strong>: <a href="https://www.i18next.com/how-to/add-or-load-translations#load-using-a-smart-backend-plugin-serving-directly-from-a-cdn">Load translations dynamically</a> when they are needed rather than upfront. This approach, known as lazy loading, reduces the initial loading time of your application and improves perceived performance.</p><p><strong>4. Considering Dynamic Content and Reactivity</strong>: If your application contains dynamic content that changes frequently, ensure that your i18next implementation can handle such reactivity. This allows translations to be updated dynamically without requiring a page reload.</p><p>By implementing these performance optimization techniques, you can ensure that your multilingual application provides a fast and responsive user experience across different languages.</p><h2 id="Future-Trends-in-i18next-Translation"><a href="#Future-Trends-in-i18next-Translation" class="headerlink" title="Future Trends in i18next Translation"></a>Future Trends in i18next Translation</h2><p>As technology advances, so does the field of translation and localization. Here are some future trends to watch out for in i18next translation:</p><p><strong>1. Advances in Machine Translation and AI-driven Localization</strong>: Machine translation technologies, such as neural machine translation, are constantly evolving. These advancements enable more accurate and natural-sounding translations, reducing the need for manual translation efforts.</p><p><strong>2. Integration with Translation Management Systems</strong>: Integration between i18next and translation management systems (<a href="../tms/">TMS</a>) like <a href="/">locize</a> can streamline the translation workflow. TMS tools provide features like automated translation synchronization, collaborative translation environments, and workflow management.</p><p><strong>3. Automation and Continuous Localization</strong>: Automation plays a key role in achieving <a href="../modern-continuous-localization/">continuous localization</a>. With automation tools, developers can synchronize translations automatically or automatically publish the translations via <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">CDN</a>, reducing manual effort and ensuring translations are always up to date.</p><p>By staying informed about these trends, you can adapt your i18next translation workflow to leverage new technologies and enhance the efficiency and accuracy of your localization efforts.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Handling missing translations in i18next is crucial to providing a polished multilingual application. By employing strategies to identify and handle missing translations, you can ensure a seamless user experience across different languages. Additionally, following best practices for i18next localization workflow and focusing on improving user experience will further enhance the quality of your translations. Finally, by optimizing performance and staying updated with future trends in i18next translation, you can future-proof your localization efforts and provide a globally accessible application.</p><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "How can I ensure the accuracy of translated content?",      "acceptedAnswer": {        "@type": "Answer",        "text": "To ensure accuracy, collaborate closely with translators, provide clear instructions and context, and maintain a glossary. Regularly review and update translations based on user feedback and application changes."      }    }, {      "@type": "Question",      "name": "Is it necessary to translate every single string in my application?",      "acceptedAnswer": {        "@type": "Answer",        "text": "While translating all content is ideal, prioritize translating user-facing and essential strings. Focus on providing a seamless user experience and ensuring that critical information is available in the user's preferred language."      }    }, {      "@type": "Question",      "name": "What are the potential challenges of working with multiple languages in i18next?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Challenges include managing and coordinating translations, ensuring consistency across languages, handling variations in text length, and maintaining performance as the number of languages increases."      }    }, {      "@type": "Question",      "name": "How can I optimize the performance of i18next in a large-scale application?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Optimize performance by caching translations, minifying and bundling language files, implementing lazy loading, and considering reactivity for dynamic content."      }    }, {      "@type": "Question",      "name": "Are there any tools or plugins available to streamline the translation process?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Yes, there are translation management systems (TMS) like locize, that integrate with i18next and provide features to streamline the translation process, automate synchronization, and facilitate collaboration among translators."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Don&#39;t let translation topics distract you!</title>
      <link href="/blog/translation-distraction/"/>
      <url>/blog/translation-distraction/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>You may find yourself in a situation where you need to create a multilingual website or application. When that happens, you&#39;ll inevitably encounter the issue of translation. While translation is essential, it can also be distracting, especially when you&#39;re working on a project with many moving parts.</p><p>As a developer, you&#39;re no stranger to the challenges of creating software that is accessible to a global audience. Internationalization, or <a href="../what-is-i18n/">i18n</a>, can be a daunting task that involves creating software that can easily adapt to different languages and cultures. But while it&#39;s important to prioritize i18n in your <a href="../help-tech-leads/">development process</a>, it&#39;s also important not to let translation issues distract you from your primary goal.</p><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><ul><li><a href="#intro">Introduction</a></li><li><a href="#why">Why translation topics can distract you as a developer</a></li><li><a href="#impact">The impact of distraction on your productivity</a></li><li><a href="#manage">How to manage translation-related distractions</a><ul><li><a href="#simplify">Simplify the translation process</a></li><li><a href="#delegate">Delegate translation tasks to others</a></li><li><a href="#machinetranslation">Use machine translation</a></li></ul></li><li><a href="#focus">The importance of staying focused on your core tasks</a></li><li><a href="#conclusion">Conclusion</a></li></ul><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction "></a>Introduction <a name="intro"></a></h2><p>As a developer, your primary focus is on writing clean, functional code that delivers the desired features and functionality to your end users. However, when it comes to multilingual projects, you may find yourself distracted by translation issues. This is because translation requires a significant amount of attention, planning, and resources, which can <a href="../help-tech-leads/">pull you away from your core responsibilities</a>.</p><p>In this article, we&#39;ll explore why translation issues can be a distraction, how that distraction affects your productivity, and how to manage it effectively.</p><h2 id="Why-translation-topics-can-distract-you-as-a-developer"><a href="#Why-translation-topics-can-distract-you-as-a-developer" class="headerlink" title="Why translation topics can distract you as a developer "></a>Why translation topics can distract you as a developer <a name="why"></a></h2><p>Translation topics can be a distraction because they require a considerable amount of attention and planning. When you&#39;re working on a multilingual project, you have to consider things like language-specific formatting, text expansion, the possibility of mistranslation and <a href="../hidden-localization-costs/">a lot more</a>.</p><p>Additionally, the translation process involves collaborating with different stakeholders, such as translators, editors, and proofreaders, which can consume a lot of your time and energy. This can cause you to lose focus on your primary tasks, leading to delays in your project&#39;s delivery.</p><p>One of the primary reasons that especially internationalization (<a href="../what-is-i18n/">i18n</a>) can be frustrating for developers is its complexity. Internationalization is a multi-faceted process that involves everything from designing flexible user interfaces to handling different date and time formats. For large and complex software systems, this can be a time-consuming and challenging task.</br>This can be summarized with the question: &quot;<a href="../is-your-software-ready-for-localization/">Is your software ready for localization?</a>&quot;</p><p>Incomplete or inaccurate translations can lead to a poor user experience for non-native speakers, and ongoing maintenance to <a href="../continuous-development-integration-and-localization-cd/">keep translations up-to-date</a> can be resource-intensive. In addition, a lack of testing for i18n can make it difficult to identify and fix bugs that occur when the software runs in different languages or cultures.</p><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><h3 style="color:orange;">Localization Tip</h3><p style="color:grey;">Read about what <a href="../what-is-software-localization/" title="What is Software Localization?">software localization</a> is.</p></div><h2 id="The-impact-of-distraction-on-your-productivity"><a href="#The-impact-of-distraction-on-your-productivity" class="headerlink" title="The impact of distraction on your productivity "></a>The impact of distraction on your productivity <a name="impact"></a></h2><p>Distractions can have a serious impact on your productivity. When you&#39;re not focused, you tend to make more mistakes and your work takes longer to complete. This can lead to missed <a href="../help-tech-leads/#situations">deadlines and frustrated stakeholders</a>.</p><p>In addition, distractions can affect your creativity, making it harder for you to come up with innovative solutions to problems. This can limit your ability to deliver a quality product that meets the needs of your users.</p><h2 id="How-to-manage-translation-related-distractions"><a href="#How-to-manage-translation-related-distractions" class="headerlink" title="How to manage translation-related distractions "></a>How to manage translation-related distractions <a name="manage"></a></h2><p>Managing translation-related distractions is essential to ensuring that you stay focused on your core tasks. Here are some strategies you can use:</p><h3 id="Simplify-the-translation-process"><a href="#Simplify-the-translation-process" class="headerlink" title="Simplify the translation process "></a>Simplify the translation process <a name="simplify"></a></h3><p>One way to deal with translation-related distractions is to simplify the translation process. You can do this by using <a href="../tms/">translation tools</a> that automate certain aspects of the process, such as <a href="../localization-context/#context-features">translation memory and glossaries</a>.<img src="../localization-context/glossary.png"></p><h3 id="Delegate-translation-tasks-to-others"><a href="#Delegate-translation-tasks-to-others" class="headerlink" title="Delegate translation tasks to others "></a>Delegate translation tasks to others <a name="delegate"></a></h3><p>Another way to manage translation distractions is to delegate translation tasks to others. You can hire professional translators, editors, and proofreaders to handle the translation process while you focus on your core business. Or better yet, use a modern translation management system like <a href="/">locize</a> that takes the pain out of the translation process. No more delays in shipping your software due to missing translations. Translators can keep up with changes from day one. The continuous localization process keeps pace with your demanding business.A <a href="../i18n-l10n-t9n-tms/">tms</a> like <a href="https://locize.com/">locize</a> bridges the gap between localization and development. This makes you faster, more efficient and saves you money overall.</p><h3 id="Use-machine-translation"><a href="#Use-machine-translation" class="headerlink" title="Use machine translation "></a>Use machine translation <a name="machinetranslation"></a></h3><p>Using machine translation is another way to manage translation-related distractions. While machine translation is not always accurate, it can be useful for translating simple text or getting a rough idea of the content.</p><p>The <a href="https://docs.locize.com/different-views/global#bulk-actions">on-demand machine translation</a> or <a href="https://docs.locize.com/whats-inside/auto-machine-translation">automatic machine translation</a> options are a good example of how machine translation can be used.</p><p><img src="../next-i18next/missing_key_auto_mt.jpg"></p><p>Machine translation would be the most cost-effective approach because it is virtually free. However, if no one checks the translated information, there will undoubtedly be a lack of quality. But modern TMS like locize can help you with this. Read more about it <a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators">here</a>.</p><h2 id="The-importance-of-staying-focused-on-your-core-tasks"><a href="#The-importance-of-staying-focused-on-your-core-tasks" class="headerlink" title="The importance of staying focused on your core tasks "></a>The importance of staying focused on your core tasks <a name="focus"></a></h2><p>As a developer, your primary focus should be on writing clean, functional code that delivers the desired features and functionality to your end users.</p><p>It&#39;s important to remember that internationalization is an essential aspect of software development. By making your software accessible to a global audience, you can <a href="../grow-online-business/">reach new markets</a> and <a href="../localization-strategy/">make your product more widely used</a>. But it&#39;s also important to stay focused on your main goals and not let translation issues distract you from delivering a quality product.</p><p>To ensure that internationalization doesn&#39;t distract you from your primary goals, it&#39;s important to prioritize it in your development process. By making i18n a fundamental part of your software design, you can create a product that is easier to adapt to different languages and cultures. This can include everything from using a localization platform like <a href="/">locize</a> to conducting thorough testing and <a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators">working closely with translation teams</a>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion "></a>Conclusion <a name="conclusion"></a></h2><p>Translation issues can be a significant distraction, but it&#39;s important to manage these distractions so you can focus on your core tasks. By simplifying the translation process, delegating tasks to others, and using <a href="../i18n-l10n-t9n-tms/">smart tools</a>, you can free up more time and energy to focus on writing clean, functional code that delivers the desired features and functionality to your end users. Remember to stay focused on your core responsibilities to ensure that you deliver a quality product that meets the needs of your users.</p><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "Why are translation topics distracting for developers?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Translation requires a considerable amount of attention, planning, and resources, which can pull developers away from their core responsibilities."      }    }, {      "@type": "Question",      "name": "How can I manage translation-related distractions?",      "acceptedAnswer": {        "@type": "Answer",        "text": "You can manage translation-related distractions by simplifying the translation process, delegating tasks to others, and using smart tools."      }    }, {      "@type": "Question",      "name": "What's the impact of distraction on my productivity as a developer?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Distraction can have a severe impact on your productivity as a developer, leading to mistakes, missed deadlines, and a decrease in creativity."      }    }, {      "@type": "Question",      "name": "Why is it essential to stay focused on your core tasks?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Staying focused on your core tasks is essential to ensure that you deliver a high-quality product that meets the needs of your users."      }    }, {      "@type": "Question",      "name": "How can I ensure that I stay focused on my core tasks?",      "acceptedAnswer": {        "@type": "Answer",        "text": "You can ensure that you stay focused on your core tasks by managing translation-related distractions, prioritizing your work, and using smart tools like locize."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> tech lead </tag>
            
            <tag> engineering manager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Importance of Context in Localization: Best Practices for Accurate Translations</title>
      <link href="/blog/localization-context/"/>
      <url>/blog/localization-context/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>As businesses expand their reach to global audiences, localization becomes crucial to ensure their message reaches the target market accurately. However, translating content accurately can be challenging, especially when context is not considered. In this article, we will explore the importance of context in localization and how some context features can help improve translation accuracy.</p><h2 id="Understanding-Context-in-Localization"><a href="#Understanding-Context-in-Localization" class="headerlink" title="Understanding Context in Localization"></a>Understanding Context in Localization</h2><p>Context plays a crucial role in accurately translating content. It refers to the circumstances, conditions, or background surrounding a word or phrase that contributes to its meaning. Without proper context, translators may misunderstand the intended message, leading to an inaccurate translation. Some situations where context is particularly important include idiomatic expressions, cultural references, and technical terms.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p><strong>- Inaccurate translations:</strong> Without context, translators may misinterpret the meaning of a phrase, resulting in a less accurate translation. For example, if a software application has a button with the label &quot;ship&quot; a translator without context might translate it to German as &quot;Schiff&quot; <em>(large boat for transporting people)</em> instead of &quot;versenden&quot; <em>(send / transport)</em> leading to confusion for the user.</p><p><strong>- Cultural insensitivity:</strong> Without context, translations may be culturally insensitive or even offensive. For example, a literal translation of a phrase or idiom in one language may not make sense or be considered offensive in another language.</p><p><strong>- Inconsistent terminology:</strong> Without context, translators may use inconsistent terminology, resulting in confusion for users. For example, if a software application uses different terms to refer to the same feature in different parts of the application, users may have difficulty understanding how to use it.</p><p><strong>- Technical errors:</strong> Without context, translators may not have the technical knowledge necessary to accurately translate technical terms or phrases. For example, a translator may not understand the technical meaning of a term like &quot;cache&quot; and translate it as &quot;hidden storage&quot; leading to confusion for the user.</p><h2 id="Best-Practices-for-Using-locize-39-s-Context-Features"><a href="#Best-Practices-for-Using-locize-39-s-Context-Features" class="headerlink" title="Best Practices for Using locize&#39;s Context Features "></a>Best Practices for Using locize&#39;s Context Features <a name="context-features"></a></h2><p>Locize offers several powerful features to help improve translation accuracy: specific <a href="https://docs.locize.com/whats-inside/context#context-information-per-key-segment">context information per segment</a>, <a href="https://docs.locize.com/whats-inside/context#incontext-view">InContext view</a>, <a href="https://docs.locize.com/whats-inside/glossary">terminology glossary</a>, and <a href="https://docs.locize.com/whats-inside/context#screenshots">screenshot</a> feature.</p><p><a href="https://docs.locize.com/whats-inside/context#context-information-per-key-segment">Specific context information</a> allows users to add notes, links, and descriptions to provide additional context for each individual key/segment.<img src="key_context.png"></p><p>The <a href="https://docs.locize.com/whats-inside/context#incontext-view">InContext view</a> enables users to connect content from their website directly with their content on their localization project on locize.<img src="incontext_editor.png"></p><p>The <a href="https://docs.locize.com/whats-inside/glossary">glossary</a> is a lexica that contains terminology to be used or not be used in the translations. It&#39;s here to aid translators to use the terms preferred by your organisation.<img src="glossary.png"></p><p>Using the <a href="https://docs.locize.com/whats-inside/context#screenshots">screenshot</a> feature, users can assign text parts of a screenshot to a specific translation key.<img src="screenshot.png"></p><p>To use the context features effectively, users should provide as much context as possible. This can include providing background information on the product or service, identifying the intended audience, and giving clear instructions to the translation team. Users should also include screenshots or links where necessary, which can provide additional context that is not immediately apparent from the text. It is also important to involve the translation team in the context-gathering process, as they may have valuable insights into the nuances of the language and culture.</p><h2 id="Real-World-Examples-of-Improved-Translation-Accuracy-with-locize-39-s-Context-Features"><a href="#Real-World-Examples-of-Improved-Translation-Accuracy-with-locize-39-s-Context-Features" class="headerlink" title="Real-World Examples of Improved Translation Accuracy with locize&#39;s Context Features"></a>Real-World Examples of Improved Translation Accuracy with locize&#39;s Context Features</h2><p>Locize&#39;s context features have helped many businesses and organizations improve translation accuracy. For example, a healthcare company used locize&#39;s context features to provide additional context for medical terms, resulting in more accurate translations. By providing definitions and explanations of medical terms, translators were able to better understand the intended meaning of the text.A globally leading technology firm used locize&#39;s screenshot feature to assign text parts of a screenshot to a specific translation key, resulting in more accurate translations for their website. This allowed translators to see the text in context, which helped them understand the intended meaning.A fintech company used locize&#39;s InContext view to connect content from their app with their localization project on locize, resulting in more accurate translations for their service. This helped translators understand how the text would appear in the final product, which allowed them to provide more accurate translations.</p><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><h3 style="color:orange;">Bonus Tip</h3><p style="color:grey;">Check out our <a href="https://locize.com/customers.html#testimonials" title="Customer Testimonials">Customer Testimonials</a> for more examples of our clients.</p></div><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Context is critical for accurate translations, and locize&#39;s context features offer powerful tools to improve translation accuracy. By using specific context information, InContext view, terminology glossary, and screenshot feature, businesses and organizations can provide translators with the context they need to produce more accurate translations. To get the most out of locize&#39;s context features, it&#39;s essential to provide as much context as possible, involve the translation team in the context-gathering process, and try out different context-gathering methods to find what works best for your content.</p><p><em>If you like to see how locize looks like, check out <a href="https://youtu.be/TFV_vhJs5DY">this video</a> and try the <a href="https://www.locize.app/register">free trial</a>.</em></p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/TFV_vhJs5DY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "What is localization?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Localization is the process of adapting a product or service to meet the language, cultural, and other requirements of a specific country or region."      }    }, {      "@type": "Question",      "name": "Why is context important in translation?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Context provides additional information that can help translators understand the intended meaning of a word or phrase. Without context, translations can be inaccurate or unclear."      }    }, {      "@type": "Question",      "name": "What is InContext view?",      "acceptedAnswer": {        "@type": "Answer",        "text": "InContext view is a feature of locize that enables users to connect content from their website/application directly with their content on their localization project on locize."      }    }, {      "@type": "Question",      "name": "What is context in localization?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Context in localization refers to the circumstances, conditions, or background surrounding a word or phrase that contributes to its meaning. Without proper context, translators may misunderstand the intended message, leading to an inaccurate translation."      }    }, {      "@type": "Question",      "name": "How does context affect translation accuracy?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Context plays a crucial role in accurately translating content. Without context, translators may misinterpret the meaning of a phrase, resulting in a less accurate translation. Some situations where context is particularly important include idiomatic expressions, cultural references, and technical terms."      }    }, {      "@type": "Question",      "name": "What are the context features offered by locize to improve translation accuracy?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Locize offers several powerful features to help improve translation accuracy, including specific context information per segment, InContext view, terminology glossary, and screenshot feature."      }    }, {      "@type": "Question",      "name": "How can users effectively use locize's context features?",      "acceptedAnswer": {        "@type": "Answer",        "text": "To use locize's context features effectively, users should provide as much context as possible. This can include providing background information on the product or service, identifying the intended audience, and giving clear instructions to the translation team. Users should also include screenshots or links where necessary, which can provide additional context that is not immediately apparent from the text."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> l10n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Marketing localization in your business (2023 Guide)</title>
      <link href="/blog/localization-marketing/"/>
      <url>/blog/localization-marketing/</url>
      
        <content type="html"><![CDATA[<p><img src="marketing-localization-illustration.webp" alt="localization marketing"></p><p>Technology has accelerated globalization, allowing organizations to connect with customers across the world with ease. However, it can be tough to know where to start when it comes to implementing a localization marketing strategy. </p><p>An older example, but still valid as it shows the importance of marketing localization, was that of Nokia. The company faced a major setback when introducing its <a href="https://www.cnet.com/culture/nokias-lumia-means-um-prostitute-in-spanish/">Lumia phone in Spanish-speaking regions</a> due to the product&#39;s name being colloquially associated with the term &quot;prostitute&quot; in Spanish. </p><p>Today you are going to learn exactly how to avoid marketing-localization mistakes and how to implement a localization procedure in your business.</p><h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul><li><a href="#marketinglocalization">What is localization in marketing?</a></li><li><a href="#importance">Why is localization in global marketing important?</a></li><li><a href="#yourbusiness">How to implement marketing localization in your business</a></li><li><a href="#mistakes">Potential mistakes to avoid in global marketing localization</a></li><li><a href="#globalexamples">Exploring successful global marketing campaigns: Examples from known brands</a></li><li><a href="#measure">How to measure global marketing efforts</a></li><li><a href="#7steps">7 steps for marketers and project managers to effectively localize their marketing content</a></li></ul><h2 id="What-is-localization-in-marketing"><a href="#What-is-localization-in-marketing" class="headerlink" title="What is localization in marketing? "></a>What is localization in marketing? <a name="marketinglocalization"></a></h2><p>Simply put, localization in marketing is the process of adapting your marketing material to ensure that it meets the interests and needs of your various target markets. </p><p>Working across a global market means you will be interacting with different cultures and customer expectations. Being able to understand their needs will allow you to effectively translate your material and maximize your chances of converting leads into long-term customers. </p><h2 id="Why-is-localization-in-global-marketing-important"><a href="#Why-is-localization-in-global-marketing-important" class="headerlink" title="Why is localization in global marketing important? "></a>Why is localization in global marketing important? <a name="importance"></a></h2><p>Did you know that 50% of <a href="https://www.shopify.com/enterprise/global-ecommerce-statistics" title="online shoppers">online shoppers</a> purchase something from a company that is outside their home country? While globalization is a wonderful way to increase your business, competition is also incredibly tough. </p><p><a href="../localization/" title="Localization">Localization</a> will help to give your brand the edge by ensuring you are reaching customers in their native language. Localization is much more than just translation, though. It is about using the cultural idioms, phrases, and symbolism, helping to increase trust and overall satisfaction.</p><table><thead><tr><th>Process</th><th>Purpose</th><th>What is adapted</th></tr></thead><tbody><tr><td>Marketing Translation</td><td>Create marketing messages that resonate in other markets</td><td>Message (copy, text)</td></tr><tr><td>Marketing Localization</td><td>Create experiences that resonate in other markets</td><td>Message, visuals, UX elements</td></tr><tr><td>Localization Marketing</td><td>Leverage localization for growth through a digital marketing strategy</td><td>Systems and processes (to support the strategy)</td></tr></tbody></table><h2 id="How-to-implement-marketing-localization-in-your-business"><a href="#How-to-implement-marketing-localization-in-your-business" class="headerlink" title="How to implement marketing localization in your business "></a>How to implement marketing localization in your business <a name="yourbusiness"></a></h2><p>Now we have answered the question, “what is localization in marketing?” it is time to look at how you can begin to implement it into your business. This can seem a daunting process, but there are several steps to remember:</p><p><strong>1. Hire the experts</strong><br>Working with professionals is one of the most important steps, as they will have a clear idea of your demographics, the language of your target audience, their culture, and the nuances that will make you sound like a local.</p><p><strong>2. Localize your website</strong><br>Alongside your marketing materials, you should also localize your website. <a href="https://www.english.com/blog/english-language-internet/">Over 75%</a> of the world’s population does not speak English, so failing to optimize your website for non-English speakers will significantly restrict your reach and sales. </p><p><strong>3. Humanize your brand</strong><br>Another vital aspect of your localization marketing strategy should be humanizing your brand. When potential customers see your brand engaging in their language, using cultural elements, popular slang and words in their products and services, they are far more likely to complete their purchase.</p><p><strong>4. Use local partners</strong><br>Influencers now play a major role in marketing campaigns for businesses across almost every industry. However, when it comes to localizing your marketing plan, you should look at the partners you are operating with and adapt accordingly to influencers in the local market. </p><h2 id="Potential-mistakes-to-avoid-in-global-marketing-localization"><a href="#Potential-mistakes-to-avoid-in-global-marketing-localization" class="headerlink" title="Potential mistakes to avoid in global marketing localization "></a>Potential mistakes to avoid in global marketing localization <a name="mistakes"></a></h2><p>Despite its importance, there are many common mistakes that organizations make in their localization strategy, including:</p><p><strong>Focusing on a universal approach</strong>One of the most common mistakes is adopting a universal approach. Effective localization is not a one-size-fits-all and requires careful tailoring to ensure your brand is reaching the most effective touch points of your target market.</p><p><strong>Not localizing every aspect</strong>Another common mistake is only localizing certain aspects, such as print advertising. Neglecting certain areas, such as your socials or website, can lead to customers heading elsewhere. </p><p><strong>Poor translation</strong> Poor translation is another common mistake when it comes to marketing localization. Working with a professional localization partner will ensure that you are not using any embarrassing or incorrect phrasing. </p><p><a href="https://docs.locize.com/more/figma-plugin"><img src="prototyping-for-global-audience.webp" alt="Easily Create Prototypes for Multilingual Interfaces"></a></p><h2 id="Exploring-successful-global-marketing-campaigns-Examples-from-known-brands"><a href="#Exploring-successful-global-marketing-campaigns-Examples-from-known-brands" class="headerlink" title="Exploring successful global marketing campaigns: Examples from known brands "></a>Exploring successful global marketing campaigns: Examples from known brands <a name="globalexamples"></a></h2><p>Transcreation is a term used in the advertising and marketing industry to refer to the process of adapting a message from one language and culture to another while maintaining the intended emotion, tone, and context of the original message. </p><p>It goes beyond just translation as it involves the creative process of rewriting and adapting the message to fit the cultural and linguistic nuances of the target audience, while still conveying the same meaning and impact as the original message.</p><p>Transcreation is especially important for global marketing campaigns, where the same message needs to be conveyed across different languages and cultures. It allows companies to effectively communicate their brand message and values to a global audience, while also respecting the unique cultural differences and nuances of each region.</p><p>When done effectively, a global marketing campaign can transform a business and propel them onto success. Some great examples include:</p><p><strong>Red Bull</strong>One of the leading brands in the world, Red Bull can often feel like a local company. Their support of local sporting events, from F1 to Soapbox races, ensures they are continuously being placed in front of their relevant audience. </p><p><strong>Airbnb</strong> Since its launch in 2008, Airbnb has grown from its San Francisco base to become one of the most recognized businesses in the world. Its <a href="https://www.linkedin.com/pulse/made-possible-hosts-airbnb-linh-lai">“Made Possible By Hosts”</a> campaign brought the company into the homes of potential customers across the globe. </p><p><strong>McDonald’s</strong>The iconic golden arches of McDonald’s are recognized across the globe, and its marketing efforts are one of the best examples of localization. While the colors and themes remain similar, the fast food chain focuses on using region-specific menus; for instance, the use of flatbreads in the Middle East or Macaroons in France.  </p><h2 id="How-to-measure-global-marketing-efforts"><a href="#How-to-measure-global-marketing-efforts" class="headerlink" title="How to measure global marketing efforts "></a>How to measure global marketing efforts <a name="measure"></a></h2><p>While there can be no denying the benefits that come from marketing localization, it is vital that you are effectively measuring your results. </p><p>In order to determine your performance, you should first set yourself some clear goals of what you want to achieve and by when. This will act as your benchmark and will allow you to track whether you are on course to achieve them. </p><p>Of course, one of the biggest factors to consider is your ROI.</p><p>In this <a href="https://hbr.org/2017/07/a-refresher-on-marketing-roi" title="what is Marketing ROI-guide">&quot;what is Marketing ROI-guide&quot;</a> you will find more information about how to measure it.</p><p>This is a very effective method of understanding the efficiency of your global marketing efforts as there is a clear correlation between your activities and sales. You should also regularly assess your results. </p><p><img src="kpi-global-marketing.webp" alt="global marketing key performance indicators"><span style="font-size:0.7rem">Source: <a href="https://www.semrush.com/blog/kpi-marketing/" title="s">20 Marketing KPIs You Need to Be Monitoring</a></span></p><p>Progress and effectiveness in achieving key business objectives can be measured with the help of Key Performance Indicators (KPIs). Low-level KPIs focus on processes within departments such as marketing, sales, and HR. </p><p>The following global marketing KPIs can be used to assess marketing effectiveness and plan strategies and budgets for upcoming periods:</p><table><thead><tr><th>KPI</th><th>Purpose</th></tr></thead><tbody><tr><td>Sales Growth</td><td>Measures the effectiveness of marketing strategies by looking at how much of the total revenue was influenced by marketing efforts.</td></tr><tr><td>Lifetime Value of a Customer</td><td>Tracks the revenue a business can expect from one customer over a lifespan.</td></tr><tr><td>Cost of Customer Acquisition (CAC)</td><td>Measures the cost of acquiring a new customer.</td></tr><tr><td>Customer Retention</td><td>Measures how many customers continue to use the company&#39;s product or service.</td></tr><tr><td>Net Promoter Score (NPS)</td><td>Measures customer loyalty and satisfaction.</td></tr><tr><td>Digital Marketing ROI</td><td>Assesses monthly and annual performance to help plan strategies and budgets for upcoming periods.</td></tr><tr><td>Leads</td><td>Indicates the number of sales opportunities and a better chance of sales growth.</td></tr><tr><td>Website Traffic to Website Lead Ratio</td><td>Measures how many website visitors are converted into leads and indicates the quality of website traffic.</td></tr><tr><td>Website Lead to Marketing Qualified Lead (MQL) Ratio</td><td>Indicates the number of total leads generated by the website that are promoted to Marketing Qualified Lead.</td></tr><tr><td>Click-Through Rate (CTR)</td><td>Measures the number of clicks on a link compared to the number of impressions.</td></tr><tr><td>Organic Search Traffic</td><td>Measures the number of people finding the company&#39;s website through organic search results.</td></tr></tbody></table><h2 id="7-steps-for-marketers-and-project-managers-to-effectively-localize-their-marketing-content"><a href="#7-steps-for-marketers-and-project-managers-to-effectively-localize-their-marketing-content" class="headerlink" title="7 steps for marketers and project managers to effectively localize their marketing content "></a>7 steps for marketers and project managers to effectively localize their marketing content <a name="7steps"></a></h2><p><strong>1. Select your target market:</strong> Before starting the process of marketing localization, you need to identify the specific market you want to target. This involves understanding the cultural, linguistic, and other unique factors of the new market.</p><p><strong>2. Analyze and adapt your message:</strong> Once you have identified your target market, you need to analyze and adapt your message to fit the new market. This may involve changing the tone, language, and even the content of your message to be more relevant and engaging for your new audience.</p><p><strong>3. Assemble a team of local translators:</strong> To ensure the accuracy and cultural sensitivity of your message, you need to assemble a team of local translators who can translate and localize your content into the native language of your target market. This team should be well-versed in the nuances of the language and culture of the market.</p><p><strong>4. Hire a localization expert or project manager:</strong> To oversee the entire process of marketing localization, you should hire a localization expert or project manager. This person will be responsible for ensuring that the localization process is executed efficiently and effectively, and that the end result is of high quality.</p><p><strong>5. Use a modern localization platform:</strong> To streamline your marketing localization efforts, you should use a modern and lightweight <a href="../tms/" title="translation management system">translation management system</a> . This platform can help automate routine tasks and provide a single source of truth for all things localization, which allows for efficient collaboration, management, and review of translations.</p><p><strong>6. Customize the workflow:</strong> By customizing the workflow, you can build a process that works for your team and use a dashboard to maintain it. This can help you achieve consistency in tone of voice and messaging through an updated glossary and translation memory.</p><p><strong>7. Take advantage of platform features:</strong> To eliminate idle waiting time and streamline your marketing localization efforts, you should take advantage of platform features such as version control, chained tasks, and insights into bottlenecks. This can help you stay on top of your localization project and ensure that it is completed on time and to a high standard.</p>]]></content>
      
      
      
        <tags>
            
            <tag> marketing campaigns </tag>
            
            <tag> products </tag>
            
            <tag> brand </tag>
            
            <tag> competitors </tag>
            
            <tag> cultures </tag>
            
            <tag> markets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Role of i18next and Translation Management Systems in Serverless Architectures</title>
      <link href="/blog/i18n-serverless/"/>
      <url>/blog/i18n-serverless/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>In today&#39;s globalized world, localization has become a vital factor in ensuring business success. Customers prefer to interact with products and services in their native language, and businesses need to adapt to this demand.With the emergence of Serverless Architectures, it has become easier for developers to build and deploy applications without worrying about infrastructure management. But how can businesses ensure that their serverless applications are multilingual? In this article, we&#39;ll explore the role of <a href="https://www.i18next.com/">i18next</a> and <a href="../tms/">TMS</a> in serverless architectures and how they can help businesses build and deploy multilingual serverless applications.</p><h2 id="What-is-Serverless-Architecture"><a href="#What-is-Serverless-Architecture" class="headerlink" title="What is Serverless Architecture?"></a>What is Serverless Architecture?</h2><p>Serverless architecture is a cloud computing model where the cloud provider manages the infrastructure and automatically allocates resources as needed. It&#39;s a pay-per-use model, where businesses only pay for the actual usage of the application. Developers can focus on writing code and building applications without worrying about infrastructure management, scalability, and availability.</p><h2 id="What-is-i18next"><a href="#What-is-i18next" class="headerlink" title="What is i18next?"></a>What is i18next?</h2><p>i18next is an open-source internationalization framework for JavaScript that provides a complete solution for managing translations in web applications. It&#39;s lightweight and easy to integrate into serverless applications. i18next allows developers to organize translations into files, use interpolation, pluralization, and format translations based on the user&#39;s locale. i18next also has support for popular frontend frameworks such as <a href="../react-i18next/">React</a>, <a href="../angular-i18next/">Angular</a> and <a href="../i18next-vue/">Vue</a>, etc.</p><h2 id="The-Challenges-of-Multilingual-Serverless-Applications"><a href="#The-Challenges-of-Multilingual-Serverless-Applications" class="headerlink" title="The Challenges of Multilingual Serverless Applications"></a>The Challenges of Multilingual Serverless Applications</h2><p>One of the biggest challenges of building multilingual serverless applications is managing translations. Applications that are built for a global audience require content to be translated into multiple languages. Manually managing translations can be a daunting task, as it involves managing multiple translation files, keeping track of translations, and ensuring consistency across languages. Additionally, deploying multiple versions of the application for each language can be a logistical nightmare, especially if you have to manage multiple tiny parts like <a href="https://aws.amazon.com/lambda/">AWS Lambda</a> functions.</p><p>For classic web applications, you usually have 2 parts where internationalization tasks occur: The client side (usually some modern single page app) and the server side.The translation resources are usually stored in the same place, so that the client and the server can read them. In case of i18next, the client can access them useing <a href="https://github.com/i18next/i18next-http-backend">i18next-http-backend</a> and the server can access them using <a href="https://github.com/i18next/i18next-fs-backend">i18next-fs-backend</a>.</p><ul><li><a href="../react-i18next/#separate">Here</a> is an example of what this might look like on the client side.</li><li><a href="../how-does-server-side-internationalization-look-like/#pug">Here</a> for an example of how this could look on the server side.</li></ul><p>But for serverless environments, you may have multiple clients, and you may have multiple small serverless functions that respond to a request in the appropriate language, or send some emails in the user&#39;s preferred language, and so on.</p><h2 id="Serverless-E-Mails"><a href="#Serverless-E-Mails" class="headerlink" title="Serverless E-Mails"></a>Serverless E-Mails</h2><p>Let&#39;s think about a serverless function that generates and sends some emails.For example we want to send an invitation to someone.We need the email address, the recipient&#39;s preferred language, an email template and some translations.</p><p>To achieve this goal, you usually need to transform some raw data into html content (or text) to be displayed in the user&#39;s preferred language.</p><p>In this example we will use <a href="https://pugjs.org/">pug</a> (formerly known as &quot;Jade&quot;, and also originally created by <a href="https://twitter.com/tjholowaychuk">TJ Holowaychuk</a>) to define some templates that should be filled with the data needed in the email, and <a href="https://mjml.io/">mjml</a> to actually design the email content.</p><p>Let&#39;s create a new <code>mail.js</code> file, which we can use, to accomplish this.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pug <span class="keyword">from</span> <span class="string">&#x27;pug&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mjml2html <span class="keyword">from</span> <span class="string">&#x27;mjml&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (data) =&gt; &#123;</span><br><span class="line">  <span class="comment">// first let&#x27;s compile and render the mail template that will include the data needed to show in the mail content</span></span><br><span class="line">  <span class="keyword">const</span> mjml = pug.renderFile(<span class="string">&#x27;./mailTemplate.pug&#x27;</span>, data)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// then transform the mjml syntax to normal html</span></span><br><span class="line">  <span class="keyword">const</span> &#123; html, errors &#125; = mjml2html(mjml)</span><br><span class="line">  <span class="keyword">if</span> (errors &amp;&amp; errors.length &gt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errors[<span class="number">0</span>].message)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// and return the html, if there where no errors</span></span><br><span class="line">  <span class="keyword">return</span> html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>mailTemplate.pug</code> could look like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mjml</span><br><span class="line">  mj-body(background-color=&#x27;#F4F4F4&#x27; color=&#x27;#55575d&#x27; font-family=&#x27;Arial, sans-serif&#x27;)</span><br><span class="line">    mj-section(background-color=&#x27;#024b3f&#x27; background-repeat=&#x27;repeat&#x27; padding=&#x27;20px 0&#x27; text-align=&#x27;center&#x27; vertical-align=&#x27;top&#x27;)</span><br><span class="line">      mj-column</span><br><span class="line">        mj-image(align=&#x27;center&#x27; padding=&#x27;10px 25px&#x27; src=&#x27;https://raw.githubusercontent.com/i18next/i18next/master/assets/i18next-ecosystem.jpg&#x27;)</span><br><span class="line">    mj-section(background-color=&#x27;#ffffff&#x27; background-repeat=&#x27;repeat&#x27; padding=&#x27;20px 0&#x27; text-align=&#x27;center&#x27; vertical-align=&#x27;top&#x27;)</span><br><span class="line">      mj-column</span><br><span class="line">    mj-section(background-color=&#x27;#ffffff&#x27; background-repeat=&#x27;repeat&#x27; background-size=&#x27;auto&#x27; padding=&#x27;20px 0px 20px 0px&#x27; text-align=&#x27;center&#x27; vertical-align=&#x27;top&#x27;)</span><br><span class="line">      mj-column</span><br><span class="line">        mj-text(align=&#x27;center&#x27; color=&#x27;#55575d&#x27; font-family=&#x27;Arial, sans-serif&#x27; font-size=&#x27;20px&#x27; line-height=&#x27;28px&#x27; padding=&#x27;0px 25px 0px 25px&#x27;)</span><br><span class="line">          span=t(&#x27;greeting&#x27;, &#123; name: name || &#x27;there&#x27; &#125;)</span><br><span class="line">          br</span><br><span class="line">          br</span><br><span class="line">        mj-text(align=&#x27;center&#x27; color=&#x27;#55575d&#x27; font-family=&#x27;Arial, sans-serif&#x27; font-size=&#x27;16px&#x27; line-height=&#x27;28px&#x27; padding=&#x27;0px 25px 0px 25px&#x27;)</span><br><span class="line">          =t(&#x27;text&#x27;)</span><br><span class="line">    mj-section(background-color=&#x27;#024b3f&#x27; background-repeat=&#x27;repeat&#x27; padding=&#x27;20px 0&#x27; text-align=&#x27;center&#x27; vertical-align=&#x27;top&#x27;)</span><br><span class="line">      mj-column</span><br><span class="line">        mj-text(align=&#x27;center&#x27; color=&#x27;#ffffff&#x27; font-family=&#x27;Arial, sans-serif&#x27; font-size=&#x27;13px&#x27; line-height=&#x27;22px&#x27; padding=&#x27;10px 25px&#x27;)</span><br><span class="line">          =t(&#x27;ending&#x27;)&amp;nbsp;</span><br><span class="line">          a(style=&#x27;color:#ffffff&#x27; href=&#x27;https://www.i18next.com&#x27;)</span><br><span class="line">            b www.i18next.com</span><br></pre></td></tr></table></figure><p>Now let&#39;s define some translations...</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// locales/en/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;greeting&quot;</span>: <span class="string">&quot;Hi &#123;&#123;name&#125;&#125;!&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;You were invited to try i18next.&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ending&quot;</span>: <span class="string">&quot;Internationalized with&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// locales/de/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;greeting&quot;</span>: <span class="string">&quot;Hallo &#123;&#123;name&#125;&#125;!&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;Du bist eingeladen worden i18next auszuprobieren.&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ending&quot;</span>: <span class="string">&quot;Internationalisiert mit&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>...and use them in an <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dirname, join &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; readdirSync, lstatSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-fs-backend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __dirname = dirname(fileURLToPath(<span class="keyword">import</span>.meta.url))</span><br><span class="line"><span class="keyword">const</span> localesFolder = join(__dirname, <span class="string">&#x27;./locales&#x27;</span>)</span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  .use(Backend)</span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="comment">// debug: true,</span></span><br><span class="line">    <span class="attr">initImmediate</span>: <span class="literal">false</span>, <span class="comment">// setting initImediate to false, will load the resources synchronously</span></span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">preload</span>: readdirSync(localesFolder).filter(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> joinedPath = join(localesFolder, fileName)</span><br><span class="line">      <span class="keyword">return</span> lstatSync(joinedPath).isDirectory()</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">ns</span>: <span class="string">&#x27;news-mailer&#x27;</span>,</span><br><span class="line">    <span class="attr">backend</span>: &#123;</span><br><span class="line">      <span class="attr">loadPath</span>: join(localesFolder, <span class="string">&#x27;&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (lng) =&gt; i18next.getFixedT(lng)</span><br></pre></td></tr></table></figure><p>So finally, all the above can be used like that:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mail <span class="keyword">from</span> <span class="string">&#x27;./mail.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getT <span class="keyword">from</span> <span class="string">&#x27;./i18n.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t = getT(<span class="string">&#x27;en&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = mail(&#123;</span><br><span class="line">  t,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// that html now can be sent via some mail provider...</span></span><br><span class="line"><span class="comment">// await send(&#x27;john@example.com&#x27;, t(&#x27;subject&#x27;), html)</span></span><br></pre></td></tr></table></figure><p>This is how the resulting html could look like:</p><p><img src="mail_preview.jpg" alt="mail preview"></p><p><em>🧑‍💻 A code example can be found <a href="https://github.com/i18next/i18next-fs-backend/blob/master/example/fastify/app.js#L14-L19">here</a>.</em></p><h2 id="Translation-Management-Systems-in-Serverless-Architecture"><a href="#Translation-Management-Systems-in-Serverless-Architecture" class="headerlink" title="Translation Management Systems in Serverless Architecture"></a>Translation Management Systems in Serverless Architecture</h2><p>Ok, i18next seems to be able to handle these i18n tasks. But what about managing of all those translation files in these different serverless functions and also in the different clients?There&#39;s no central location anymore - it&#39;s all distributed.<br />We need a solution for that! We need a <a href="../i18n-l10n-t9n-tms/">Translation Management System</a>.</p><p>A Translation Management System (<a href="../tms/">TMS</a>) is a software platform that enables businesses to manage their translation workflow. It provides a central repository for storing translations and enables collaboration between translators. When integrated with i18next, TMS such as <a href="/">locize</a> can streamline the localization process in a serverless architecture. Here are some of the benefits of using a TMS integrated with i18next in a serverless architecture:</p><h3 id="Automatic-updates-of-translations"><a href="#Automatic-updates-of-translations" class="headerlink" title="Automatic updates of translations"></a>Automatic updates of translations</h3><p>When using a TMS, translations can be automatically updated whenever a new language is added or an existing translation is changed. This eliminates the need to manually update the translations in the codebase, which can be a time-consuming task.</p><h3 id="Improved-scalability"><a href="#Improved-scalability" class="headerlink" title="Improved scalability"></a>Improved scalability</h3><p>A TMS can handle translation requests from multiple applications and languages, making it easy to scale the localization process. By integrating a TMS with i18next, businesses can easily manage translations for multiple applications without worrying about the scalability of the translation process.</p><h3 id="Reduced-costs"><a href="#Reduced-costs" class="headerlink" title="Reduced costs"></a>Reduced costs</h3><p>By using a TMS, businesses can reduce the cost of managing translations. A TMS provides a central repository for storing translations, eliminating the need to manage translations in multiple codebases. This reduces the time and effort required to manage translations, resulting in lower costs.</p><h3 id="Improved-security"><a href="#Improved-security" class="headerlink" title="Improved security"></a>Improved security</h3><p>A TMS provides a secure environment for storing translations, making it easy to manage translations without worrying about security concerns. By using a TMS integrated with i18next, businesses can ensure that their translations are stored securely and are only accessible by authorized personnel.</p><h2 id="Implementing-Possible-Approaches-for-TMS-with-i18next"><a href="#Implementing-Possible-Approaches-for-TMS-with-i18next" class="headerlink" title="Implementing Possible Approaches for TMS with i18next"></a>Implementing Possible Approaches for TMS with i18next</h2><h3 id="Client-side"><a href="#Client-side" class="headerlink" title="Client side"></a>Client side</h3><p>For the client side it&#39;s that we can go full steam ahead. We can live download the translations on demand directly from the <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">locize CDN</a>. This way we can change translations or add new languages directly in locize without having to modify or redeploy the client app.</p><p>In addition, we can unleash a lot of extra features to speed up the localization process. For example:</p><ul><li>We can use the <a href="../i18next-migrate/#save-missing">saveMissing</a> feature to add new keys and automatically translate them with machine translation.</li><li>We can <a href="https://docs.locize.com/guides-tips-and-tricks/unused-translations">find and filter</a> in locize which keys are used or not used anymore, thanks to the <a href="https://github.com/locize/locize-lastused">last-used</a> plugin.</li><li>We can find and edit translations directly in the <a href="https://docs.locize.com/more/incontext-editor">In-Context editor</a>.</li></ul><p>Have a look at <a href="../react-i18next/">this tutorial</a> or <a href="https://youtu.be/jeRxew3OV64">this video</a> to just see just a few of these cool things.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/jeRxew3OV64" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="Server-less-side"><a href="#Server-less-side" class="headerlink" title="Server(less) side"></a>Server(less) side</h3><p>For the serverless side we could trigger a new serverless deployment every time a new <a href="https://docs.locize.com/more/versioning">translation version</a> is published. Using <a href="https://docs.locize.com/integration/webhook#versionpublished">webhook events</a> or triggering a Github Action via <a href="https://docs.locize.com/integration/github-repository-dispatch-event">GitHub Repository Dispatch Event</a>.</p><p>Or download the latest translations each time a serverless function is built and deployed using the <a href="https://github.com/locize/locize-cli#download-current-published-files">locize-cli</a> or with the <a href="https://github.com/marketplace/actions/locize-download">Github Action</a>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># i.e. for our email example, that we implemented</span></span><br><span class="line">locize download --project-id=3183fd58-99d0-4d4b-896d-5768ca438c24 --ver=latest --namespace=news-mailer --clean=<span class="literal">true</span> --path=./locales</span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>In summary, i18next and a translation management system like locize are powerful tools for managing translations in a serverless architecture. By integrating i18next with a TMS, businesses can streamline the localization process and reduce the cost of managing translations. The integration also provides improved scalability and security. Enterprises and developers can easily implement a TMS integrated with i18next in their serverless architecture by following the steps outlined above.</p><ul><li><em>If you&#39;re already using i18next and want to unleash its full potential, have a look at <a href="../i18next-migrate/">this</a>.</em></li><li><em>If you&#39;re new to i18next, have a look at <a href="../react-i18next/">this guide</a> and check out the free <a href="https://youtu.be/SA_9i4TtxLQ">crash course</a>.</em></li><li><em>If you want to see a nice overview of the different i18n formats, have a look at <a href="../i18n-formats-javascript/">this</a>.</em></li><li><em>If you like to see how locize looks like, check out <a href="https://youtu.be/TFV_vhJs5DY">this video</a> and try the <a href="https://www.locize.app/register">free trial</a>.</em></li></ul><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/TFV_vhJs5DY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "What is i18next?",      "acceptedAnswer": {        "@type": "Answer",        "text": "i18next is an internationalization-framework written in and for JavaScript. But it's much more than that. i18next goes beyond just providing the standard i18n features such as (plurals, context, interpolation, format). It provides you with a complete solution to localize your product from web to mobile and desktop."      }    }, {      "@type": "Question",      "name": "What is serverless architecture?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Serverless architecture is a cloud computing model where the cloud provider manages the infrastructure and automatically allocates resources as needed. Developers can focus on writing code and building applications without worrying about infrastructure management, scalability, and availability. It's a pay-per-use model, where businesses only pay for the actual usage of the application."      }    }, {      "@type": "Question",      "name": "What are the challenges of building multilingual serverless applications?",      "acceptedAnswer": {        "@type": "Answer",        "text": "One of the biggest challenges of building multilingual serverless applications is managing translations. Applications that are built for a global audience require content to be translated into multiple languages. Manually managing translations can be a daunting task, as it involves managing multiple translation files, keeping track of translations, and ensuring consistency across languages. Additionally, deploying multiple versions of the application for each language can be a logistical nightmare, especially if you have to manage multiple tiny parts like AWS Lambda functions."      }    }, {      "@type": "Question",      "name": "What are the Translation Management Systems (TMS) in Serverless Architecture?",      "acceptedAnswer": {        "@type": "Answer",        "text": "A Translation Management System (TMS) is a software platform that enables businesses to manage their translation workflow. It provides a central repository for storing translations and enables collaboration among translators. When integrated with i18next, TMS like locize can streamline the localization process in a serverless architecture. Some of the benefits of using a TMS integrated with i18next in serverless architecture include automatic updates of translations, centralized translation management, and easier collaboration among translators."      }    }, {      "@type": "Question",      "name": "How can businesses ensure that their serverless applications are multilingual?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Businesses can ensure that their serverless applications are multilingual by using i18next and TMS in serverless architecture. i18next is an internationalization framework that allows developers to manage translations in web applications. TMS provides a central repository for storing translations and enables collaboration among translators. By integrating i18next and TMS, businesses can streamline the localization process in a serverless architecture, automate the updates of translations, and ensure consistency across languages."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> serverless </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastest way to unleash the full power of i18next (in 3 steps)</title>
      <link href="/blog/i18next-migrate/"/>
      <url>/blog/i18next-migrate/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>Internationalization (<a href="../what-is-i18n/">i18n</a>) and localization (<a href="../localization/">l10n</a>) are crucial for businesses that want to expand globally and reach a wider audience. To do this, you need a robust solution that can handle different languages and cultural nuances, and this is where <a href="https://www.i18next.com/">i18next</a> and <a href="/">locize</a> come in. These two elements have been designed to help you get the most out of your i18n efforts, and when used together, they are a powerhouse combination that can help you achieve your goals faster and more efficiently.<br />In this article, we&#39;ll explore the fastest way to unleash the full power of i18next in 3 steps.</p><h2 id="Precondition"><a href="#Precondition" class="headerlink" title="Precondition"></a>Precondition</h2><p>We assume you know i18next and already use it. If you don&#39;t know i18next, we suggest you read <a href="../react-i18next/">this</a>.<br />In this article, we also assume you&#39;re loading your translation resources via <a href="https://github.com/i18next/i18next-http-backend">i18next-http-backend</a> plugin, but that&#39;s not really mandatory.</p><h2 id="Step-1-Create-a-locize-project"><a href="#Step-1-Create-a-locize-project" class="headerlink" title="Step 1 - Create a locize project"></a>Step 1 - Create a locize project</h2><p>Sign up and create a new locize project for free, like described <a href="https://docs.locize.com/integration/getting-started#step-1-signup-and-create-a-project">here</a>.</p><p><img src="add_project.jpg"></p><p>Define your source language and if needed change the <a href="https://docs.locize.com/integration/supported-i18n-formats">i18n format</a>.</p><p>Then, add all your target languages, as described <a href="https://docs.locize.com/integration/getting-started/add-content#add-languages">here</a></p><p><img src="add_lng.jpg"></p><h2 id="Step-2-Migrate-your-translations"><a href="#Step-2-Migrate-your-translations" class="headerlink" title="Step 2 - Migrate your translations"></a>Step 2 - Migrate your translations</h2><p>Execute the <a href="https://github.com/locize/locize-cli">locize cli</a> <a href="https://github.com/locize/locize-cli#migration-of-existing-i18next-files">migrate</a> command.</p><p>Copy-Paste the project-id and the api-key from your locize project settings page, and use it as arguments for your command. Also, make sure to pass the path of your current translation files.</p><p><code>npx locize migrate --project-id d950a914-a349-4b04-94ac-000fdf28beed --api-key 4cde8595-062b-44a7-b645-6a3fe739e792 --path public/locales</code></p><p><img src="cli.jpg"></p><h2 id="Step-3-i18next-locize-backend"><a href="#Step-3-i18next-locize-backend" class="headerlink" title="Step 3 - i18next-locize-backend"></a>Step 3 - i18next-locize-backend</h2><p>Install the <a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a> plugin and replace your current backend plugin.</p><p>Copy the project-id and pass it via i18next backend options.</p><p><img src="backend.jpg"></p><h2 id="Done"><a href="#Done" class="headerlink" title="Done!"></a>Done!</h2><p>Yes, the important part is already done.<br />Now the translations are directly coming from locize. This means you can also delete your old locales directory.</p><p>If you change a translation text in locize, you can see the updated texts in your UI.</p><p>This is already awesome, but we can do more.</p><h2 id="Extra-Step-4-InContext-editor"><a href="#Extra-Step-4-InContext-editor" class="headerlink" title="Extra Step 4 - InContext editor"></a>Extra Step 4 - InContext editor</h2><p>By installing the <a href="https://github.com/locize/locize">locize</a> module and passing it to i18next, we can work directly within the <a href="https://docs.locize.com/different-views/incontext">InContext view</a> of locize.</p><p><img src="incontext.jpg"></p><h2 id="Extra-Step-5-Save-missing-keys"><a href="#Extra-Step-5-Save-missing-keys" class="headerlink" title="Extra Step 5 - Save missing keys "></a>Extra Step 5 - Save missing keys <a name="save-missing"></a></h2><p>Enabling the saveMissing option of i18next and passing the api-key via backend options, will automatically add newly defined keys to locize.<br />Additionally, if you enable the <a href="https://docs.locize.com/whats-inside/auto-machine-translation">automatic machine translation</a> option in locize, the passed default value of your new keys is automatically translated into your target languages.</p><p><img src="save_missing.jpg"></p><p>That&#39;s just a first sneak peek on how you can power up i18next.<br />locize offers a lot more.</p><p><a href="https://www.locize.app/register">Try it for free</a> and <a href="mailto:support@locize.com">send us</a> your feedback.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/jeRxew3OV64" frameborder="0" loading="lazy" allowfullscreen></iframe></div><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "What is i18next?",      "acceptedAnswer": {        "@type": "Answer",        "text": "i18next is an internationalization-framework written in and for JavaScript. But it's much more than that. i18next goes beyond just providing the standard i18n features such as (plurals, context, interpolation, format). It provides you with a complete solution to localize your product from web to mobile and desktop."      }    }, {      "@type": "Question",      "name": "What is locize?",      "acceptedAnswer": {        "@type": "Answer",        "text": "locize is a powerful l10n solution that works in conjunction with i18next to help businesses achieve their goals faster and more efficiently."      }    }, {      "@type": "Question",      "name": "How do I use i18next and locize together?",      "acceptedAnswer": {        "@type": "Answer",        "text": "To use i18next and locize together, you can follow the three steps outlined in the article: create a locize project, migrate your translations, and replace your current backend plugin with the i18next-locize-backend plugin."      }    }, {      "@type": "Question",      "name": "What is the InContext editor in locize?",      "acceptedAnswer": {        "@type": "Answer",        "text": "The InContext editor in locize is a feature that allows you to work directly within the locize platform to edit your translations. By installing the locize module, you can use the InContext view to make changes to your translations directly from within your UI."      }    }, {      "@type": "Question",      "name": "How do I add new keys to locize automatically?",      "acceptedAnswer": {        "@type": "Answer",        "text": "You can add new keys to locize automatically by enabling the saveMissing option of i18next and passing the api-key via the backend options. Additionally, if you enable the automatic machine translation option in locize, the default values of your new keys will be automatically translated into your target languages."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Why does app localization matter for growth?</title>
      <link href="/blog/what-is-mobile-app-localization/"/>
      <url>/blog/what-is-mobile-app-localization/</url>
      
        <content type="html"><![CDATA[<p><img src="app-localization.webp" alt="app localization"></p><p>Today you&#39;re going to learn what app localization is and how to use it to greatly simplify your app&#39;s content management.</p><h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul><li><a href="#what">What is mobile app localization?</a></li><li><a href="#scale">Make your app scalable with localization</a></li><li><a href="#term">What is the difference between localization and internationalization?</a></li><li><a href="#process">What is the process of localization?</a></li><li><a href="#appstore">App-store optimization for localization</a></li><li><a href="#translators">How to find translators?</a></li><li><a href="#tips">App-localization-tips: How to localize your app</a></li><li><a href="#how">How it worked for others</a></li><li><a href="#conclusion">Conclusion</a></li></ul><p>In fact, this tips have helped three clients of us to manage multiple languages and significantly growth their potential user base. Effective <a href="../localization/">localization</a> will ensure that your product is not only meeting the requirements of your chosen demographics, but also helping you to reach new audiences. </p><p>Therefore, you&#39;ll appreciate this article <strong>if you wish to increase the number of registrations</strong> for your mobile application.</p><p>Let&#39;s begin by having an understanding of the purpose of app localization.</p><h2 id="What-is-mobile-app-localization"><a href="#What-is-mobile-app-localization" class="headerlink" title="What is mobile app localization? "></a>What is mobile app localization? <a name="what"></a></h2><p>In this highly connected digital world, globalization is an essential part of any business. Being able to effectively reach and engage with customers around the world is crucial, especially for mobile app developers. </p><p>With the rise of smartphones, apps have become a core part of our daily lives. From ordering food to watching films, research has shown that over <a href="https://www.statista.com/statistics/271644/worldwide-free-and-paid-mobile-app-store-downloads/" title="230 billion mobile apps">230 billion mobile apps</a>  were downloaded in 2021 alone. </p><p>This extensive use means localization of an app is crucial in ensuring your products can reach consumers anywhere in the world. What is this localization, though, and how can it help?</p><h2 id="Make-your-app-scalable-with-localization"><a href="#Make-your-app-scalable-with-localization" class="headerlink" title="Make your app scalable with localization "></a>Make your app scalable with localization <a name="scale"></a></h2><p>Mobile-app-localization is a highly beneficial aspect of any business. This is a unique process that requires you to adapt your app so that it can be used by consumers in a wide range of localities. </p><p>This could require adapting the wording so that it is in the right language, or even changing the layout to suit the target market. With nearly <a href="https://www.statista.com/statistics/274774/forecast-of-mobile-phone-users-worldwide/">five billion smartphone users</a> in the world, the localization of apps ensures that your product can be enjoyed by customers no matter where they might be located. </p><p><img src="smartphone-users.webp" alt="five billion smartphone users" title="five billion smartphone users"></p><h2 id="What-is-the-difference-between-localization-and-internationalization"><a href="#What-is-the-difference-between-localization-and-internationalization" class="headerlink" title="What is the difference between localization and internationalization? "></a>What is the difference between localization and internationalization? <a name="term"></a></h2><p>Localization and internationalization are two vital strategies for any business, but many people often confuse the two. While they are two similar methods and both rely on each other, they do have two very different approaches. </p><p>Internationalization is the process of adapting your mobile app code so that it can be easily modified and adapted into the required language. On the other hand, localization is the process of actually customizing the content so that it meets the expectations of the chosen destination. </p><p>This means that internationalization needs to happen first, ensuring that mobile app coding is ready to meet the adaptations of localization. </p><p>Find out more about internationalization in our guide on <a href="../what-is-i18n/" title="what is i18n">what is i18n</a>.</p><p>You can&#39;t wait to see how others did it. Please read through some <a href="#how">success stories</a> .<a href="https://nakipower.com/" title="mobile app"><img src="mobile-app.webp" alt="mobile app" title="mobile app"></a></p><h2 id="What-is-the-process-of-localization"><a href="#What-is-the-process-of-localization" class="headerlink" title="What is the process of localization? "></a>What is the process of localization? <a name="process"></a></h2><p>While there can be no denying the many benefits that come from localization, it is a comprehensive and time-consuming task. To help you, we have taken a closer look at the process:</p><h3 id="1-Planning"><a href="#1-Planning" class="headerlink" title="1)      Planning"></a>1)      Planning</h3><p>The first stage of any localization strategy is to ensure that you focus on your planning.This process should cover:</p><ul>  <li>deciding which countries and regions to target with your app localization efforts.</li>   <li> the research into the languages you are looking to focus on, how you will do this, and what requirements are needed to successfully meet the demands of your target audience.</li> </ul><h3 id="2-Execution"><a href="#2-Execution" class="headerlink" title="2)      Execution"></a>2)      Execution</h3><p>Once you have comprehensively planned your <a href="/blog/localization-strategy" title="localization strategy">localization strategy</a> for the app, the next step is to execute the changes. This should be taken with the utmost care and attention, carefully working through every aspect and feature of the app to ensure that they are meeting the requirements. </p><p>Here are some examples: </p><ul>  <li>Translate your app's title, description, and keywords into the target language to improve visibility and search ranking in local app stores.</li>   <li>Adapt your app's screenshots and videos to better fit the cultural preferences and expectations of local users.</li> </ul><p><a href="#appstore">The coming chapter</a> gives you the full list of potential optimizations for a mobile app.</p><h3 id="3-Testing"><a href="#3-Testing" class="headerlink" title="3)      Testing"></a>3)      Testing</h3><p>With the translations made, you need to ensure that you are conducting a comprehensive testing strategy to ensure that it meets the exact requirements of your target audience.  A beta test is the most effective way of doing this. </p><p>Beta testing is the process of having the app reviewed by native speakers of your target demographics, having them review the copy and design. This should not be rushed, and you should be methodical with your beta testing to guarantee the very best result. </p><ul>  <li style="padding: 1rem 0">Test your app with real users in your area, and ask them to give you feedback on the localization as they use it.</li>   <li style="padding: 1rem 0">Verify text and character encoding to ensure that everything is accurately encoded and shown on all devices.</li>   <li style="padding: 1rem 0">Verify linguistic and cultural consistency: Make sure that all app components, including text, graphics, and sounds, are suitable from a culture standpoint and adhere to regional norms.</li>   <li style="padding: 1rem 0">Test the language switching capability of the app to ensure that users can quickly and simply switch between languages.</li> </ul><p>Including an in-app feedback feature can be very beneficial, with research showing that it can increase feedback by <a href="https://instabug.com/blog/benefits-of-in-app-feedback-during-beta-testing/?src=InstabugBlog&mdm=internal&ref=mobile_app_localization" title="up to 750%">up to 750%</a>.</p><h3 id="4-Publish-your-updates"><a href="#4-Publish-your-updates" class="headerlink" title="4)      Publish your updates"></a>4)      Publish your updates</h3><p>Once your beta tests have been completed, it is time to publish your updates. This is the final step to getting your mobile app out there and being used by consumers. </p><h3 id="5-Bonus-tip-–-read-customer-reviews-and-check-analytics-data"><a href="#5-Bonus-tip-–-read-customer-reviews-and-check-analytics-data" class="headerlink" title="5)      Bonus tip – read customer reviews and check analytics data"></a>5)      Bonus tip – read customer reviews and check analytics data</h3><p>Of course, there is no better way to ensure that your app is the very best it can be than by reading customer reviews. This is your chance to see exactly what customers are thinking, allowing you to adapt the app accordingly. </p><p>Your app analytics are an excellent location to look for potential growth directions. Determine where the majority of your consumers or loyal users originate from.</p><p><img src="process-of-localization.webp" alt="process of localization" title="process of localization"></p><h2 id="App-store-optimization-in-terms-of-localization"><a href="#App-store-optimization-in-terms-of-localization" class="headerlink" title="App-store optimization in terms of localization  "></a>App-store optimization in terms of localization  <a name="appstore"></a></h2><ol>  <li style="padding: 1rem 0">    Translate app metadata: To improve visibility and search ranking in local app stores, translate your app's title, description, and keywords into the target language.  </li>  <li style="padding: 1rem 0">    Target local keywords: Conduct keyword research to identify relevant local keywords and include them in the metadata of your app.  </li>  <li style="padding: 1rem 0">    Localize app visual assets: Tailor your app's screenshots and videos to the cultural preferences and expectations of your target audience.  </li>  <li style="padding: 1rem 0">    Provide local payment options: To increase conversion rates among local users, provide local payment options such as local currency and popular payment methods.  </li>  <li style="padding: 1rem 0">    Engage with local communities, such as online forums and social media groups, to raise awareness and promote your app to potential users.  </li>  <li style="padding: 1rem 0">    Provide local customer support: To provide a better experience for local users, provide local customer support, such as a local language helpline or chat service.  </li>  <li style="padding: 1rem 0">    Customize in-app content: Tailor in-app content like promotions and notifications to the local culture and language.  </li>  <li style="padding: 1rem 0">    Localize in-app purchases: To improve conversion rates and user experience, localize in-app purchases such as pricing and product descriptions.  </li>  <li style="padding: 1rem 0">    Monitor your app's ranking in local app stores and make any necessary adjustments to your ASO strategy based on the results.  </li></ol> ## How to find translators? <a name="translators"></a>Comprehensive translation is essential to any localization process, but finding the right translator can be tough. There are several tips to remember when finding a translator, including:<h4 id="1-Background"><a href="#1-Background" class="headerlink" title="1)      Background"></a>1)      Background</h4><p>The first thing to do is to review their background. You want to ensure that your chosen translator has a proven history in your target language, either being a native speaker or has spent considerable time in that country. </p><h4 id="2-Be-clear"><a href="#2-Be-clear" class="headerlink" title="2)      Be clear"></a>2)      Be clear</h4><p>When engaging with a translator, you should make sure that you are as clear and straightforward as possible. The more thorough you are with your instructions, the better your translator will be able to understand your requirements. </p><h4 id="3-Ask-for-examples"><a href="#3-Ask-for-examples" class="headerlink" title="3)      Ask for examples"></a>3)      Ask for examples</h4><p>Another top tip when it comes to finding the very best translator possible is to ask for examples. Any professional translator will be happy to showcase their past work, allowing you to review their results. </p><p>In our ecosystem, there is a way we make this much easier for you. Learn here how to <a href="/services.html#translationservices" title="find a translator">find a translator</a>.</p><p><a class="btn btn-outline btn-xl" style="color:white" href="/services.html#translationservices" title="find a translator">find a translator</a></p><p><img src="find-a-translator.jpg" alt="find a translator" title="find a translator"></p><h3 id="How-to-choose-the-right-localization-technology"><a href="#How-to-choose-the-right-localization-technology" class="headerlink" title="How to choose the right localization technology"></a>How to choose the right localization technology</h3><p>Technology has transformed the world around us, helping to make things more efficient and easier. This is true when it comes to mobile-app localization, and there are some fantastic options out there to help you make the process as quick and as easy as possible. </p><p>However, it is essential that you are utilizing the right technology. Not having the right localization-tools can lead to poor results, so when it comes to finding the right localization technology, there are certain things you should look for:</p><ul><li>   A collaborative process that allows copywriters, designers, managers, and more, to work together. </li><li>   A solution that lets you reuse app strings and content, helping to save you time and money. </li><li>   A built-in glossary of mobile app terms to ensure consistency. </li><li>   Automation tools for tasks such as string extractions, performance monitoring, workflow management, and screenshot generation. </li><li>   Integration with other essential apps such as Slack and Jira. </li><li>   Ability to support multiple file types and file-format.</li></ul><p>You can improve the user experience of your global app and attract more customers by implementing a proper translating-app process for your content. This is why every app-business should use localization services.</p><p><a class="btn btn-outline btn-xl" style="color:white" href="https://docs.locize.com/" title="introduction">Learn more</a></p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/YQryHo1iHb8" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="App-localization-tips-How-to-localize-your-app"><a href="#App-localization-tips-How-to-localize-your-app" class="headerlink" title="App-localization-tips: How to localize your app  "></a>App-localization-tips: How to localize your app  <a name="tips"></a></h2><p>When it comes to app localization, there are several top tips to remember. The first is to ensure that you are being as comprehensive as possible in your beta testing. This will give you the knowledge and insight on what is working and what areas still need to be improved. </p><p>You should also ensure that you are being as flexible as possible when it comes to adapting your mobile app into different languages. You also want to ensure that your app is able to support languages that read right-to-left and left-to-right, guaranteeing that it flows for readers no matter where in the world that they might be based. </p><p>The support of numerous languages will also have a <b>favorable impact on the app store listing </b>.</p><p>Another helpful tip is to transfer strings from code to resource files. Because storing strings in resource files before deploying code allows the team to access those files for translation later without having to change the code. The team may access those files for translation without having to update the code itself.</p><p>Check out our <a href="/" title="localization software">localization software</a>; it&#39;s exactly what we can help you with, and it only takes a few steps to get started.</p><h3 id="How-it-works-for-others"><a href="#How-it-works-for-others" class="headerlink" title="How it works for others "></a>How it works for others <a name="how"></a></h3><p>We offer a simple and scalable <a href="/blog/tms/" title="translation management system">translation management system</a>  that has assisted many of our customers in attaining their development with mobile applications.</p><h4 id="1-naki"><a href="#1-naki" class="headerlink" title="1) naki"></a>1) <a href="https://nakipower.com/de/">naki</a></h4><p>Naki was able to manage and keep up their products in more than six languages. Locize is for them, they claimed:</p><blockquote><p>As a product company which releases mobile applications throughout Europe, we were looking for a tool that allows us to easily involve who translate and keep the maintenance of the copywriting seamless.</p></blockquote><p><a href="https://nakipower.com/de/" title="nakipower"><img src="nakipower.png" alt="nakipower" title="nakipower"></a></p><h4 id="2-retraced-com"><a href="#2-retraced-com" class="headerlink" title="2) retraced.com"></a>2) <a href="https://www.retraced.com/">retraced.com</a></h4><p>Retraced, a blockchain-based platform for supply chain transparency that focuses on the end user, uses locize for its app localization</p><blockquote><p>We utilise locize throughout our infrastructure in two mobile applications. Locize is a very reliable service and scales beautifully with the business.</p></blockquote><p><a href="https://www.retraced.com/" title="retraced"><img src="retraced.png" alt="retraced" title="retraced"></a></p><h4 id="3-barntools-com"><a href="#3-barntools-com" class="headerlink" title="3) barntools.com"></a>3) <a href="https://barntools.com/">barntools.com</a></h4><p>BarnTools, a digital biosecurity platform created by producers for producers, used locize to quickly and easily localize its mobile application.</p><blockquote><p>It enables our global team perform the translation work anywhere and anytime. We also get to maintain the translations in realtime.</p></blockquote><p><a href="https://barntools.com/" title="barntools"><img src="barntools.png" alt="barntools" title="barntools"></a></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion "></a>Conclusion <a name="conclusion"></a></h2><p>It is now up to you to make a decision. </p><p>The process of adjusting a mobile app&#39;s functionality and user experience for users in various target markets is known as localization.</p><p>Start to plan your target regions and langauges.</p><p>A highly scaleable solution will ensure that your iOS, Android, or other app meets your customers&#39; needs and that you can execute the project efficiently. </p><p><strong>Because how you handle the app translation process will determine your mobile application&#39;s success and ability to reach a worldwide audience.</strong></p><p>You may discover how to use locize in your development and how your team can work with it by clicking the link below.</p><p><strong>In the end, localizing your apps will increase your revenue and enhance user experience.</strong></p><p><a class="btn btn-outline btn-xl" style="color:white" href="/for-your-team.html" title="for your team">For your team</a></p><p>Now we&#39;d like to invite you to share this with any developer, project manager, or business that could benefit from it.</p>]]></content>
      
      
      
        <tags>
            
            <tag> software </tag>
            
            <tag> mobile app </tag>
            
            <tag> android </tag>
            
            <tag> app store </tag>
            
            <tag> localization tools </tag>
            
            <tag> language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Translate: Accuracy &amp; Alternatives</title>
      <link href="/blog/google-translate-accuracy/"/>
      <url>/blog/google-translate-accuracy/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p><a href="https://translate.google.com/">Google Translate</a> is one of the most widely used machine translation services in the world, with over 100 million active users relying on it for their translation needs. Despite its popularity, the accuracy of Google Translate continues to be a topic of discussion among both language experts and casual users. In this article, we will examine the technology behind Google Translate, its limitations, real-life examples, effective and efficient use, and ethical and privacy concerns related to the use of machine translation services.</p><h2 id="The-Technology-Behind-Google-Translate"><a href="#The-Technology-Behind-Google-Translate" class="headerlink" title="The Technology Behind Google Translate"></a>The Technology Behind Google Translate</h2><p>Google Translate is a combination of machine learning algorithms and statistical models that translate text from one language to another. It uses statistical machine translation, which involves training the system on large amounts of parallel text data. This data is then used to identify patterns and relationships between words in different languages, allowing Google Translate to accurately translate text.</p><p>Google Translate is continually updated and improved, adding new language pairs and refining existing ones. The service also solicits user feedback and suggestions for improvement, which further improves its accuracy over time.</p><h2 id="The-Limitations-of-Google-Translate"><a href="#The-Limitations-of-Google-Translate" class="headerlink" title="The Limitations of Google Translate"></a>The Limitations of Google Translate</h2><p>Google Translate is a highly advanced machine translation system, but it is still limited by its technology and data. Some of the key limitations of Google Translate include:</p><ul>  <li>    <b>Lack of Context</b>: Google Translate heavily relies on the input text, which can lead to incorrect translations if it doesn't understand the context of a sentence. For example, the phrase "I'm falling for you" can be translated as "Estoy cayendo por ti" in Spanish, which can mean both "I am falling for you" and "I am falling physically".  </li>  <li>    <b>Ambiguity</b>: Words can often have ambiguous meanings, especially when translating between languages with different grammatical structures. This can result in translations that are inaccurate or convey a different meaning than intended. For example, the English word "bass" can mean a type of fish or a low-frequency sound, but both meanings have different translations in other languages.  </li>  <li>    <b>Cultural Differences</b>: Language is closely tied to culture, and cultural differences can impact the accuracy of Google Translate. For example, idioms and cultural references can be challenging to translate accurately. For instance, the English phrase "beating around the bush" cannot be translated accurately to some cultures who do not have similar idioms.  </li>  <li>    <b>Syntax Awareness</b>: Text used in <a href="../what-is-software-localization/">software localization</a> (<a href="../what-is-i18n/">internationalization</a>) often contains interpolation specific syntax - tags that are specific to the <a href="../i18n-formats-javascript/">i18n format</a> used. Google Translate often does not respect these syntax rules. More specific machine translation tools such as <a href="https://translate.i18next.com/" target="_blank">translate.i18next.com</a> or the more complete cat version of <a href="/" target="_blank">locize</a> are better suited to handle these types of use cases.  </li></ul><h2 id="Factors-That-Affect-Google-Translate-39-s-Accuracy"><a href="#Factors-That-Affect-Google-Translate-39-s-Accuracy" class="headerlink" title="Factors That Affect Google Translate&#39;s Accuracy"></a>Factors That Affect Google Translate&#39;s Accuracy</h2><p>Several factors can impact the accuracy of Google Translate, including:</p><ul>  <li>    <b>Quality of Input Text</b>: The quality of the input text is critical in determining the accuracy of Google Translate. Poorly written text, with grammatical errors and typos, can result in incorrect translations.  </li>  <li>    <b>Domain-Specific Terminology</b>: Google Translate is trained on a broad range of text data, but it may struggle to accurately translate domain-specific terminology. For example, technical terms in medicine or law can be challenging to translate.  </li>  <li>    <b>User Feedback</b>: Google Translate invites user feedback and suggestions for improvement, which can impact its accuracy over time. The more feedback it receives, the better it can become at translating text in a specific language or domain.  </li></ul><h2 id="Effective-and-Efficient-Usage-of-Google-Translate"><a href="#Effective-and-Efficient-Usage-of-Google-Translate" class="headerlink" title="Effective and Efficient Usage of Google Translate"></a>Effective and Efficient Usage of Google Translate</h2><p>Google Translate can be a highly effective and efficient tool for translating text, but it&#39;s important to use it properly to get the best results. Here are some tips for using Google Translate effectively and efficiently:</p><ol>  <li>    <b>Use proper input text</b>: As mentioned earlier, the quality of the input text is critical in determining the accuracy of Google Translate. Ensure that the text is well-written and free of grammatical errors and typos to get the most accurate translation possible.  </li>  <li>    <b>Use specific language pairs</b>: Google Translate supports many language pairs, but it is always better to use the language pair with the highest accuracy rate. For instance, if you are translating from English to Spanish, it's better to use English to Spanish rather than English to French to Spanish.  </li>  <li>    <b>Consider the context</b>: Google Translate heavily relies on the input text and may not always understand the context of a sentence. If possible, provide additional context to ensure that the translation is accurate.  </li>  <li>    <b>Check for cultural references</b>: Language is closely tied to culture, and cultural references can impact the accuracy of Google Translate. Always check for cultural references and idioms before relying on the translation.  </li>  <li>    <b>Utilize user feedback</b>: Google Translate invites user feedback and suggestions for improvement, which can impact its accuracy over time. If you come across a translation that is not accurate, you can provide feedback to help improve the service for everyone.  </li>  <li>    <b>Use it for general understanding</b>: Google Translate is not suitable for professional or critical translations but can be very helpful for understanding the general meaning of a text in a foreign language.  </li></ol><p>By following these tips, you can get the most out of your experience with Google Translate and ensure that your translations are as accurate and reliable as possible.</p><h2 id="Ethical-and-Privacy-Concerns-of-Machine-Translation-Services"><a href="#Ethical-and-Privacy-Concerns-of-Machine-Translation-Services" class="headerlink" title="Ethical and Privacy Concerns of Machine Translation Services"></a>Ethical and Privacy Concerns of Machine Translation Services</h2><p>The use of machine translation services raises several ethical and privacy concerns that should be considered when using such tools. Here are some of the key issues to be aware of:</p><ol>  <li>    <b>Data Privacy</b>: Machine translation services collect and store large amounts of user data, including the text being translated. This data can be sensitive in nature and can be misused by the service provider or others.  </li>  <li>    <b>Bias and Discrimination</b>: Machine learning algorithms are only as unbiased as the data they are trained on. If the training data contains biases, the algorithm can perpetuate these biases and discriminate against certain groups.  </li>  <li>    <b>Translation Accuracy</b>: Machine translation services can be used to translate intellectual property, including patents, trademarks, and copyrights. This can raise issues of copyright infringement and potential legal disputes.  </li>  <li>    <b>Intellectual Property</b>: Machine translation can raise questions about intellectual property rights and the unauthorized use of copyrighted content.  </li>  <li>    <b>National Security</b>: The use of machine translation services can pose a threat to national security, as the text being translated may contain sensitive information that can be accessed by unauthorized individuals or organizations.  </li></ol><p>These are important issues to consider when using machine translation services, and it&#39;s important to be aware of the risks involved and take appropriate steps to mitigate these risks.</p><h2 id="Competitors-of-Google-Translate"><a href="#Competitors-of-Google-Translate" class="headerlink" title="Competitors of Google Translate "></a>Competitors of Google Translate <a name="google-translate-competitors"></a></h2><p>Google Translate may be the most popular machine translation tool, but it is not the only one. There are several other translation tools available, some of which offer features that Google Translate does not. Some of Google Translate&#39;s competitors include:</p><ul><li><a href="https://translator.microsoft.com/">Microsoft Translator</a></li><li><a href="https://aws.amazon.com/translate/">Amazon Translate</a></li><li><a href="https://www.deepl.com/">Deepl</a></li><li><a href="https://www.systran.net/translate/">Systran Translate</a></li><li><a href="https://itranslate.com/">iTranslate</a></li><li><a href="https://www.reverso.net/">Reverso</a></li><li><a href="https://chat.openai.com/">ChatGPT</a></li></ul><p>Each of these tools has its own unique features and strengths, and many of them have their own dedicated user bases. Some, like Amazon Translate and Microsoft Translator, are part of larger tech companies and offer advanced features like automatic language detection and real-time speech translation. Others, like Deepl and Reverso, specialize in more specific language pairs and offer high-quality translations in multiple languages.</p><p>One of the newer players in the field of machine translation is ChatGPT, a large language model developed by <a href="https://openai.com/">OpenAI</a>. ChatGPT offers a conversational interface for translating text, and has the ability to learn from user interactions and improve its translations over time. While it may not be as advanced as some of the other tools on this list, it offers a unique user experience that sets it apart from the rest.</p><p>When choosing a machine translation tool, it is important to consider your specific needs and requirements. Whether you are looking for speed, accuracy, or versatility, there is likely a tool out there that will meet your needs. By considering the features and strengths of each tool, you can choose the one that is right for you and get the most out of your translation efforts.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Google Translate is a widely used machine translation service that combines machine learning algorithms and statistical models to translate text from one language to another. Despite its popularity, the accuracy of Google Translate is still a topic of discussion due to its limitations such as lack of context, ambiguity, and cultural differences. Factors such as the quality of the input text, domain-specific terminology, and user feedback can also affect accuracy. However, Google Translate is continually updated and improved, and user feedback plays an important role in improving its performance. There are several other machine translation tools available, each with its own unique features and strengths. When choosing a machine translation tool, it is important to consider your specific needs and requirements.On the other hand, for a higher degree of accuracy, a <a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators">human translation</a> service like <a href="../supertext-partnership/">Supertext</a> may be a better option.</p><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "What is Google Translate?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Google Translate is a machine translation service that translates text from one language to another. It uses statistical machine learning algorithms and statistical models to identify patterns and relationships between words in different languages."      }    },{      "@type": "Question",      "name": "How does Google Translate work?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Google Translate works by training the system on large amounts of parallel text data. This data is used to identify patterns and relationships between words in different languages, allowing the system to accurately translate text."      }    },{      "@type": "Question",      "name": "What are the limitations of Google Translate?",      "acceptedAnswer": {        "@type": "Answer",        "text": "The limitations of Google Translate include lack of context, ambiguity, cultural differences, and domain-specific terminology. It heavily relies on the input text and may not always understand the context of a sentence, which can result in incorrect translations."      }    },{      "@type": "Question",      "name": "How does the quality of input text affect Google Translate's accuracy?",      "acceptedAnswer": {        "@type": "Answer",        "text": "The quality of the input text is critical in determining the accuracy of Google Translate. Poorly written text, with grammatical errors and typos, can result in incorrect translations."      }    },{      "@type": "Question",      "name": "What are the ethical and privacy concerns related to the use of machine translation services?",      "acceptedAnswer": {        "@type": "Answer",        "text": "The use of machine translation services raises ethical and privacy concerns such as the potential misuse of personal information, the impact on employment in the translation industry, and the limitations of machine translation in accurately translating culturally specific references and idioms."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> l10n </tag>
            
            <tag> translation </tag>
            
            <tag> machine translation </tag>
            
            <tag> globalization </tag>
            
            <tag> g11n </tag>
            
            <tag> global localization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The joy, the pride and the burden of maintaining open source</title>
      <link href="/blog/maintaining-open-source/"/>
      <url>/blog/maintaining-open-source/</url>
      
        <content type="html"><![CDATA[<p><img src="opensource-title.jpg"></p><p>As a <a href="https://github.com/i18next/i18next/graphs/contributors">maintainer</a> of <a href="https://www.i18next.com/">i18next</a>, an open-source localization library, I can attest that there is nothing quite like the feeling of joy and pride that comes from contributing to the open-source community. Seeing others use and appreciate your work is a feeling like no other. But with great power comes great responsibility, and maintaining an open-source project can sometimes be a heavy burden at times.</p><p>Let me paint you a picture: It&#39;s a sunny Sunday afternoon, and you&#39;re ready to relax and enjoy the weekend. But then, your phone starts buzzing. It&#39;s a notification from <a href="https://github.com/">GitHub</a>, alerting you to a new issue or pull request. You try to ignore it, but the nagging <strong>sense of responsibility</strong> sets in. You can&#39;t help but wonder, &quot;What if this is a critical bug that needs to be fixed ASAP?&quot; And so, you reluctantly open your laptop, ready to tackle the problem at hand. That, my friends, is the joy and the burden of maintaining open source.</p><p><img src="sunday-interruption.jpg"></p><p>But it&#39;s not just the constant <strong>influx of issues and pull requests</strong> that can be overwhelming. It&#39;s also the pressure to <strong>constantly improve</strong> and update the project to keep up with the ever-changing technology landscape. With i18next, for example, we need to stay on top of new localization trends and technologies, as well as ensure <strong>compatibility with the latest versions of popular frameworks and libraries</strong>. It can be a lot to keep up with, especially when you&#39;re also <strong>trying to balance</strong> a full-time job, family, and other commitments.</p><p><img src="i18next_ecosystem.webp"></p><p>Despite the challenges, maintaining an open-source project is a <strong>rewarding experience</strong> that I wouldn&#39;t trade for anything. The sense of community and collaboration is truly special, and it&#39;s an <strong>honor to be a part</strong> of something that helps so many people. Plus, there&#39;s nothing quite like the <strong>feeling of satisfaction</strong> when you finally fix that tricky bug or implement a new feature that makes the project even better.</p><p><img src="satisfaction.jpg"></p><p>Another aspect of maintaining an open source project that can be challenging is <strong>dealing with demanding users</strong>. While most users understand and appreciate the hard work that goes into maintaining a project, some can be quite demanding, even threatening to stop using the library if their special request isn&#39;t implemented. It can be difficult to navigate these situations, as you want to keep your users happy, but you also need to consider the overall direction and goals of the project. It&#39;s important to remember that, as the maintainer, you have the final say over what gets added to the project, and what doesn&#39;t. It&#39;s also important to communicate with your users, and explain your reasoning behind certain decisions.</p><p>When maintaining an open source project, remember that <strong>no one is forcing anyone to use it</strong>. While it&#39;s important to listen to feedback and try to meet your users&#39; needs, it&#39;s also important to remember that the project is open source and free to use. This means that users have the freedom to use the project or not, and they also have the ability to contribute to it, or even fork it if they want to make significant changes. As maintainers, we should always be open to feedback and suggestions, but we must also be confident in our decisions and the direction of the project. We should also remember that most of us are volunteering, and that for most of us, this is a hobby, passion, or side project, not a paid job. We should not burn ourselves out trying to please every user. When users start insisting on <strong>free and ongoing support</strong>, that&#39;s not good.</p><p>A common challenge in maintaining an open source project is dealing with users who report GitHub <strong>issues without enough information</strong> to reproduce and investigate the problem. Unfortunately, it&#39;s not uncommon for users to simply say &quot;there&#39;s a bug&quot; or &quot;it doesn&#39;t work&quot; without providing any additional details or context. This can make it extremely difficult for maintainers to understand and fix the problem.</p><p>This is where the concept of a <a href="https://minimum-reproduction.wtf/"><strong>minimal reproducible example</strong></a> comes in. A minimal reproducible example is a small, self-contained snippet of code that demonstrates the problem. It should include all the information necessary for the maintainer to reproduce the problem, including the version of the library, the environment, and any relevant configuration.</p><p>Providing a minimal reproducible example can greatly reduce the time and effort required to investigate and fix a problem. Without it, the maintainer may have to spend hours trying to understand and reproduce the problem, which can be frustrating for both the maintainer and the user.</p><p>It&#39;s important to educate users about the importance of providing a minimal reproducible example, and to communicate this clearly in your project&#39;s documentation. Some maintainers even have a <strong>template for issues</strong> and/or pull requests that requires the user to provide such an example.</p><p><img src="mre.jpg"></p><p>It&#39;s also important to be patient and understanding when dealing with users who may not be familiar with the concept of a minimal reproducible example. Maintaining an open source project is a community effort, and it&#39;s important to work together to make the project better. Also, a pull request that includes a <strong>negative test case</strong> is very valuable.</p><p>Sometimes it is useful to write a larger guide or blog post that users can go through to avoid basic problems.For example, for using i18next in a React application, we wrote <a href="../react-i18next/">this blog post</a> that covers all the initial issues and hurdles.</p><p>Remember that as a user of an open source library, you have the power to contribute to its development and make it even better. Don&#39;t be afraid to jump in and make a contribution, no matter how small. Every little bit helps, and it&#39;s a great way to <strong>give back to the community</strong>. Even if you are not a developer, you can contribute in other ways, such as writing documentation, or helping answer other users&#39; questions.</p><p>In fact, the best way to get a bug in an open source library fixed is to <strong>fix it yourself and submit a pull request</strong>. It&#39;s not only a great way to give back to the community, but it also helps you learn new skills and understand the codebase better and learn new skills. So don&#39;t hesitate to roll up your sleeves and get involved.</p><p>In conclusion, maintaining an open source project is a challenging but rewarding experience. It takes dedication, hard work, and a lot of patience to keep an open source project running smoothly. But the <strong>sense of community and collaboration</strong> that comes with open source makes it all worthwhile. As a maintainer, it&#39;s important to remember that <strong>you&#39;re not alone</strong> in this journey, and that there are always other maintainers and contributors willing to help. As a user, remember that you have the <strong>power to contribute</strong> and make a difference.</p><p><img src="contribute.jpg"></p><p>Open source is a community effort, and <strong>everyone plays a role</strong> in its success. Maintainers, contributors, and users all have a responsibility to work together to improve the project. Maintainers should be open to feedback and suggestions, and users should provide clear, detailed information about their problems and, if possible, suggest solutions or provide minimal reproducible examples.</p><p>In short, maintaining an open source project is a challenging but rewarding experience that brings people together to work toward a common goal. It&#39;s important for everyone to work together. So let&#39;s continue to support and <strong>contribute to open source projects</strong> and make the world a better place, one line of code at a time.</p><p><img src="team-work.jpg"></p><p>Finally, I would like to thank <a href="https://locize.com/i18next.html#official-sponsor">locize</a> for giving us the opportunity to support our i18next community and allowing us to invest in open source activities.Without this support, i18next would not be where it is today.</p><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "What is i18next?",      "acceptedAnswer": {        "@type": "Answer",        "text": "i18next is an internationalization-framework written in and for JavaScript. But it's much more than that. i18next goes beyond just providing the standard i18n features such as (plurals, context, interpolation, format). It provides you with a complete solution to localize your product from web to mobile and desktop."      }    },{      "@type": "Question",      "name": "What are the challenges of maintaining an open-source project?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Constantly having to address new issues and pull requests, staying up-to-date with the latest trends and technologies, balancing other commitments and dealing with demanding users are some of the challenges of maintaining an open-source project."      }    },{      "@type": "Question",      "name": "How does one handle demanding users?",      "acceptedAnswer": {        "@type": "Answer",        "text": "The maintainer has the final say on what gets added to the project. It's important to communicate with users, explain reasoning behind decisions and remember that the project is open source and free to use."      }    },{      "@type": "Question",      "name": "What is the feeling of joy and pride in contributing to an open-source project?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Contributing to an open-source project brings a sense of joy and pride from seeing others use and appreciate one's work."      }    },{      "@type": "Question",      "name": "Is maintaining an open-source project always easy?",      "acceptedAnswer": {        "@type": "Answer",        "text": "No, maintaining an open-source project can be a heavy burden at times due to the constant influx of issues and pull requests and the pressure to constantly improve and update the project."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> open-source </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is website localization with examples (update)</title>
      <link href="/blog/website-localization/"/>
      <url>/blog/website-localization/</url>
      
        <content type="html"><![CDATA[<p><img src="website-localization.webp" alt="website localization"></p><p>This is the most comprehensive guide about <strong>website localization</strong>,  the process of <strong>adapting an existing website to the language and culture of a target market</strong>. </p><p>This article is specific for websites, if you need more general information, check out our blogpost about <a href="../what-is-software-localization/">software localization</a>.</p><p><b>The question is: How can you get the most efficient way to localize your website for your users? This is where the following guide comes into play.</b> </p><h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul><li><a href="#weblocalization">What is website localization?</a></li><li><a href="#good-outcome">Why should you be interested in a positive outcome?</a></li><li><a href="#right-time">When is it appropriate to localize your website?</a></li><li><a href="#half-done">Prepare the localization of your website</a></li><li><a href="#step-by-step">A step-by-step process for web localization</a></li><li><a href="#examples">Examples: Popular and from our clients</a></li><li><a href="#quality">How to measure the quality</a></li><li><a href="#platform">Choose the right platform</a></li><li><a href="#conclusion">Conclusion</a></li></ul><h2 id="What-is-website-localization"><a href="#What-is-website-localization" class="headerlink" title="What is website localization? "></a>What is website localization? <a name="weblocalization"></a></h2><p>It is part of internationalization and localization and entails much more than just simple text translation; it must take into account all language and cultural variables. If you are selling a decent product in your home market, it is possible that you are also doing so in other countries. If you wish to sell in Spain, for example, your information must be translated into an adapted message in their original language. </p><p>You understand what website localization is? Now, let&#39;s find out why it&#39;s important:</p><h2 id="Why-should-you-be-interested-in-a-positive-outcome"><a href="#Why-should-you-be-interested-in-a-positive-outcome" class="headerlink" title="Why should you be interested in a positive outcome? "></a>Why should you be interested in a positive outcome? <a name="good-outcome"></a></h2><p>A good website localization may help <a href="https://www.investopedia.com/terms/m/multinationalcorporation.asp">multinational businesses</a>  establish significant brand awareness outside of their home country.</p><p><b>People on the internet clearly desire to buy from websites in their own language</b>, as evidenced by several <a href="https://insights.csa-research.com/reportaction/305013126/Marketing">studies</a>. Many firms utilize landingpages for a specific area to provide basic corporate information. </p><p>This is not the strategy to take since the target audience may perceive a lack of enthusiasm for their location and requirements. Local customers anticipate a website that is identical to the one in your primary market.</p><p><img src="fifty-two-percent.webp" alt="fifty-two-percent"></p><p>The localization of a <b>website can increase the revenue</b> of your company. It appears to be an administrative concern in most circumstances, but it is an investment in yourself and your organization.</p><h2 id="When-is-it-appropriate-to-localize-your-website"><a href="#When-is-it-appropriate-to-localize-your-website" class="headerlink" title="When is it appropriate to localize your website? "></a>When is it appropriate to localize your website? <a name="right-time"></a></h2><p>You&#39;re wondering when to start localizing a site. This varies from firm to company, and a variety of factors can influence when the ideal time is reached.</p><p>However, there are a few scenarios to bring you to start thinking about it:</p><ul><li>Your business is launching a new product.</li><li>You must adhere to market standards.</li><li>Your company is expanding internationally.</li><li>Your company establishes a new branch in another country.</li><li>Your business follows the franchising model.</li><li>Your business figures are lower in some areas than in others.</li><li>Your company acts as a global platform.</li><li>Your company&#39;s global branding strategy is shifting.</li></ul><h2 id="Prepare-the-localization-of-your-website"><a href="#Prepare-the-localization-of-your-website" class="headerlink" title="Prepare the localization of your website "></a>Prepare the localization of your website <a name="half-done"></a></h2><p>Look for a good preparation of your <a href="../localization-strategy/" title="localization strategy">localization strategy</a>, because it will end up in more than just translate some sentence. This process should be part of your overall business strategy, because there are many non-technical-aspects to consider when going into new markets:</p><h3 id="A-step-by-step-checklist-for-the-business-questions"><a href="#A-step-by-step-checklist-for-the-business-questions" class="headerlink" title="A step-by-step checklist for the business questions"></a>A step-by-step checklist for the business questions</h3><p>  ➡️ Examine the market - is there a possible audience?</p><p>  ➡️ Determine the local compliance needs</p><p>  ➡️ Determine the best technology for localization</p><p>  ➡️ Determine how we will market in the new place</p><p>  ➡️ Decide who is part of the team (lead project manager, marketing expert, developer, etc.)</p><p>  ➡️ Construct a list of quality assurance criteria</p><p>If you come up with a strong plan and take into account all of the above checkpoints. Then it&#39;s time to go more into the webpage&#39;s details.</p><h2 id="A-step-by-step-process-for-web-localization"><a href="#A-step-by-step-process-for-web-localization" class="headerlink" title="A step-by-step process for web localization "></a>A step-by-step process for web localization <a name="step-by-step"></a></h2><ol><li><a href="#half-done">Define the strategy</a>  of your website localisation </li><li>Design the content of all pages with internationalization in mind</li><li>Execute <a href="../what-is-i18n/" title="i18n">i18n</a> on your website</li><li>Arrange your team the right way</li><li>Translate your webpages</li><li><a href="#quality">Measure the quality</a> and strategy</li><li>Keep up localization with the <a href="#platform">right software</a></li></ol><p>Keep the following techniques in mind for a successful implementation:</p><ul><li>Place the language selector correctly</li><li>Change the formatting design - a sentence in some languages can be substantially longer</li><li>The curreny should be according to customer need</li><li>Think about the update of graphic and videos</li><li>Ensure a proper <a href="https://www.usability.gov/what-and-why/information-architecture.html">information architecture</a></li><li>Make it easy to update content</li><li>Think about SEO-Localization - SEO should be done parallel to development (industry standard)</li><li>Allow website integrations</li><li>Verify the translations and results</li></ul><h3 id="Elements-to-consider-on-website"><a href="#Elements-to-consider-on-website" class="headerlink" title="Elements to consider on website"></a>Elements to consider on website</h3><p>This list gives you an overview about what you need to keep an eye on when internationalize your website:</p><ul><li>the text</li><li>the date and time formats</li><li>the unit of measurement</li><li>the holiday seasons</li><li>the local currency</li><li>the methods consumer can pay </li><li>the way an address is written</li><li>the local letters, symbols, grammar, etc.</li><li>the plurals</li><li>the phone numbers</li><li>the privacy policy</li><li>the images</li><li>the videos</li></ul><p>All information must be given in a genuine manner to other locals so that they feel it is tailored to them. Also, the website&#39;s navigation may vary as visitors from different regions engage differently with your website. Gender-specific words can also be another possibility, which we do not discuss in detail here, but take that in mind. </p><p>Understanding the language is frequently insufficient, because people will not buy from a webpage in English if it is not their first language. The material must reflect all of their familiar conditions, not just the language. </p><h3 id="Best-practices"><a href="#Best-practices" class="headerlink" title="Best practices"></a>Best practices</h3><p>➡️ More about the topic? Check the <a href="../website-internationalization-best-practices/">website-internationalization-best practices</a></p><p>The article highlights effective practices for companies entering foreign markets and requiring website translation. There is a significant distinction between translation and localization. With these ideas, you may save a lot of money and time when your website becomes internationally. Furthermore, the best practices article provides a system for translating content and managing these translations.</p><p><img src="establish.webp" alt="Create considerable brand awareness"></p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples "></a>Examples <a name="examples"></a></h2><p>There are well-known examples all across the world of <b>companies that have effectively implemented multilingual websites</b> as part of their overall business strategy. <a href="https://www.tesla.com/">www.tesla.com</a> was one of the most well-known examples we checked out. </p><p>They offer a large number of regions from which to choose. They also adjust things like privacy policies and graphics to meet the needs of different locations. They do an excellent job of localizing their website, but it isn&#39;t perfect, and there are certain areas where they could improve. </p><p>The following improvements are some general areas that, in the author&#39;s view, may be improved by not deeply analyzing their situation. </p><h5 id="First-finding"><a href="#First-finding" class="headerlink" title="First finding"></a>First finding</h5><p>In the author&#39;s opinion, the language selector is difficult to discover and therefore not well situated for a good <a href="https://blog.hubspot.com/marketing/improve-your-websites-user-experience/">website-experience</a>. It&#39;s great that the website displays it based on IP address in advance.</p><h5 id="Second-finding"><a href="#Second-finding" class="headerlink" title="Second finding"></a>Second finding</h5><p>In the author&#39;s opinion, although switching languages is possible, the user does not receive sufficient tailored info for his intended location. The available Tesla Store Locations are hidden in a bottom menu and are difficult to find. It may help to direct the user&#39;s attention to these Locations, allowing the consumer to feel more home.</p><h5 id="Third-finding"><a href="#Third-finding" class="headerlink" title="Third finding"></a>Third finding</h5><p>In the author&#39;s opinion, some product description information is tailored to a larger geographic area, such as Europe. It isn&#39;t particular to different areas of Europe; they used the same data across many countries. However, this may be wanted from them, because the efforts would be excessive in comparison to the results they would get. &quot;The product speaks for itself&quot;.</p><p>The author is unable to conduct a thorough analysis of the technical localization aspects as part of this article.</p><h3 id="Locize-examples"><a href="#Locize-examples" class="headerlink" title="Locize examples"></a>Locize examples</h3><p>We, at locize <a href="/">localization management platform</a>, <b>have assisted many customers in achieving their goals with website-localization</b>. The following examples can assist you:</p><h4 id="1-globalfinreg-com"><a href="#1-globalfinreg-com" class="headerlink" title="1) globalfinreg.com"></a>1) <a href="https://globalfinreg.com/">globalfinreg.com</a></h4><p>Globalfinreg has been able to efficiently localize their two websites thanks to <a href="/">locize</a>. They said locize is for them:</p><blockquote><p>An easy-to-use interface for managing translations. It is possible to regulate exactly what each translator sees, and they enjoy doing so. The UI also allows you to easily check which translations are needed and divide your application into separate namespaces.</p></blockquote><p><a href="https://globalfinreg.com/" title="globalfinreg"><img src="finreg.png" alt="globalfinreg" title="globalfinreg"></a></p><h4 id="2-www-redcross-ch"><a href="#2-www-redcross-ch" class="headerlink" title="2) www.redcross.ch"></a>2) <a href="https://support.redcross.ch/">www.redcross.ch</a></h4><blockquote><p>Thanks to the generous support and the features of locize, the headless websites of the Swiss Red Cross can be translated into different languages within a short time!</p></blockquote><p><a href="https://support.redcross.ch" title="swiss red cross"><img src="redcross.svg" alt="swiss red cross" title="redcross"></a></p><h2 id="Quality-ensurance"><a href="#Quality-ensurance" class="headerlink" title="Quality ensurance "></a>Quality ensurance <a name="quality"></a></h2><p>The quality check is essential for the team to get a measurement of where the project is standing in order to provide the correct website-experience. As a result of this, improving any project milestones or refining website content will be beneficial. This should also contain a check to see if the translators did a good job. </p><p>In some circumstances, contemporary technology such as machine translation will automate the procedure. As a result, human monitoring can assure not only the quality of the language on the website, but also its functionality and site experience.</p><p>We have the following two areas of testing for localization in the web:</p><h3 id="Language-Testing"><a href="#Language-Testing" class="headerlink" title="Language Testing"></a>Language Testing</h3><p>Is the language properly tested, and are all words correct and understood? Ensure consistency since success and failure can be determined by trust. This list might be useful for testing local language:</p><ul><li>Wrong use of language</li><li>Spelling mistakes</li><li>Restricted words in a culture</li><li>Non readable sentence</li><li>Language Errors</li></ul><h3 id="Localization-Testing"><a href="#Localization-Testing" class="headerlink" title="Localization Testing"></a>Localization Testing</h3><p>Testing the localization ensures that your various language site versions work properly. Distribute your testers by newly targeted markets. </p><p>Check the operation of all web forms and checkout functionality. Also if there is any broken design to fix. A short list you can find below:</p><ul><li>Check for non-translated strings </li><li>Long website loading times </li><li>Wrong date and time format discovered </li><li>Check for broken strings </li><li>Check hardware compatibility </li><li>Ensure Hyperlinks operate </li><li>Form and Checkout features must be tested</li></ul><h2 id="Choose-the-right-platform"><a href="#Choose-the-right-platform" class="headerlink" title="Choose the right platform "></a>Choose the right platform <a name="platform"></a></h2><p>A multilingual website is typically a large undertaking, and using a well-established localization management solution will assist you in completing it more quickly. When choosing a platform, make sure it was created specifically for your needs. You will be able to provide greater user-experience and add appropriate tools as a result of this.</p><p>➡️ <a href="https://docs.locize.com/">Watch our introduction video</a></p><p>➡️ <a href="https://www.locize.app/register">Create a new user account for free</a></p><p>➡️ <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">Check out how to add a new project</a></p><p>With locize, a modern and economical <a href="https://locize.com/">localization management platform</a>, you can bridge the gap between translation and development. It makes your site, app, game, or whatever project you&#39;re working on more global, dynamic, and engaging, particularly when you use the continuous localization features.</p><p>While we hope you enjoy our services, we will not lock you into a contract. We believe in the added value of our services, so you can export your translations and utilize them with <a href="https://www.i18next.com/">i18next</a>. If you are a developer, this could be a possibility for you, or you can look at our step-by-step guide for <a href="/javascript-localization.html">JavaScript localization</a></p><p><img src="locize-project.png" alt="locize" title="locize"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion "></a>Conclusion <a name="conclusion"></a></h2><p>Consumers have a clear requirement for a website that is tailored to customized and localized content. As a result, the localization of a site is the tech-part for any company looking to expand into new areas or market segment. As we have built it up for you, it must comprise a good business strategy, which is the starting point for a solid technological implementation.</p><h3 id="Global-brands-do-it"><a href="#Global-brands-do-it" class="headerlink" title="Global brands do it"></a>Global brands do it</h3><p>As you can see from our real-world examples, the most well-known organizations in any industry have used website localization. As a result, <b>you should address it as soon as possible</b> in <b>your company&#39;s internationalization process</b>. It is significant due to the commitment your organization would make to potential clients in the newly targeted area. </p><h3 id="Users-will-appreciate-it"><a href="#Users-will-appreciate-it" class="headerlink" title="Users will appreciate it"></a>Users will appreciate it</h3><p>Your target audience will thank you by buying your product or service. In this market, your company&#39;s brand awareness will grow as well, which is essential for internet business success.</p><h3 id="Use-this-guide"><a href="#Use-this-guide" class="headerlink" title="Use this guide"></a>Use this guide</h3><p>The &quot;How to locize your website?&quot; is <b>easy to answer, select the right platform for your needs</b> and plan all steps needed for the <a href="../language-localization/" title="language localization">language localization</a> in advance. </p><h3 id="Keep-it-organized"><a href="#Keep-it-organized" class="headerlink" title="Keep it organized"></a>Keep it organized</h3><p>The <a href="/">localization management platform</a> can assist you in remaining organized and adaptable during your continuous-localization.</p><h2 id="Why-locize-should-be-your-choice"><a href="#Why-locize-should-be-your-choice" class="headerlink" title="Why locize should be your choice"></a>Why locize should be your choice</h2><p>Our team has considerable experience to assist you with your project or development needs, thanks to many <a href="/customers.html">customers</a> that we assisted with the localization of their website. </p><p>We&#39;ve also supplied the <b>most valuable pricing</b> of our <a href="/website-localization-services.html">website localization services</a> because of our many years of expertise with these consumers, and we don&#39;t require you to sign long-term contracts.</p>]]></content>
      
      
      
        <tags>
            
            <tag> best practices </tag>
            
            <tag> guide </tag>
            
            <tag> localization techniques </tag>
            
            <tag> refining website content </tag>
            
            <tag> native language </tag>
            
            <tag> localization project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7 steps to master translation project management (2023)</title>
      <link href="/blog/translation-project-management/"/>
      <url>/blog/translation-project-management/</url>
      
        <content type="html"><![CDATA[<p><img src="translation-project-management.webp" title="translation project management"></p><p>Are you looking to improve the efficiency and success of your translation projects? Look no further! In this guide, we will walk you through 7 proven steps to master translation project management. </p><p>So, let&#39;s get started and unlock the secrets to a successful language translation management.</p><h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul><li><a href="#plan">How to plan project management for translation</a></li><li><a href="#streamline">Streamline your translation project with a tool</a></li></ul><p>This guide will provide you with the project management tools and information you need to take your translation projects to the next level. </p><p>This includes defining the project&#39;s scope and needs, as well as selecting the best team and tools to deliver high-quality translations on time and on budget.</p><p>Whether you&#39;re a seasoned pro or just starting out in the world of translation project management, these steps will help you streamline your workflow, increase collaboration, and ultimately deliver better results for your clients.</p><h2 id="How-to-plan-project-management-for-translation"><a href="#How-to-plan-project-management-for-translation" class="headerlink" title="How to plan project management for translation "></a>How to plan project management for translation <a name="plan"></a></h2><p>The first step in any translation project is to assess the client&#39;s needs. This includes determining the target languages, the type of content that needs to be translated, and any specific requirements or constraints that need to be taken into account. </p><p>Once these details have been established, the project manager can create a project plan outlining the steps that need to be taken to complete the project on time and within budget.</p><ol><li>Budget allocation for the project</li><li>Define the scope and requirements</li><li>Team and responsibilities</li><li>Find the translators</li><li>Define the project plan</li><li>Review the work</li><li>Translation delivery</li></ol><p><img src="project-management-tools.webp" title="project management tools"></p><h3 id="1-Budget-allocation-for-translation-projects"><a href="#1-Budget-allocation-for-translation-projects" class="headerlink" title="1. Budget allocation for translation projects"></a>1. Budget allocation for translation projects</h3><p>The translation project&#39;s budget should be established early in the planning phase. This will help to ensure that adequate resources are given for the project and that possible cost overruns are detected and handled before they occur.</p><p>Generally, the costs of a translation process can be as follows:</p><ul><li>Cost of required tools and software (licenses) project managers&#39; and translators&#39; fees</li><li>Continuing costs for tasks such as <a target="__blank" href="https://en.wikipedia.org/wiki/Translation" title="translation">translation</a>, editing, <a target="__blank" href="https://dictionary.cambridge.org/de/worterbuch/englisch/proofreading" title="proofreading">proofreading</a>, and formatting, as well as quality assurance, testing, and <a href="../localization" title="localization">localization</a>.</li><li>The cost of any required equipment, technology, additional services, and travel charges.</li><li>Costs for any required software integration, third-party vendor services, training, and legal and regulatory needs.</li></ul><h3 id="2-What-is-required-in-the-project"><a href="#2-What-is-required-in-the-project" class="headerlink" title="2. What is required in the project"></a>2. What is required in the project</h3><p>Defining the scope and requirements of a translation project is crucial for ensuring that all stakeholders have a clear understanding of the project&#39;s expectations. This includes determining:The types of content that will be translated, whether it is text from a website, a document or any other file.</p><p>The target languages for the project and taking into consideration the unique characteristics of each language. The expertise of the translators needed for the project, such as subject-matter experts, depending on the content&#39;s industry.</p><h3 id="3-Define-who-is-responsible-for-which-tasks-in-the-project"><a href="#3-Define-who-is-responsible-for-which-tasks-in-the-project" class="headerlink" title="3. Define who is responsible for which tasks in the project"></a>3. Define who is responsible for which tasks in the project</h3><p>A project team should be assembled, with clear roles and responsibilities assigned to each team member. This includes identifying a <a target="__blank" href="https://www.forbes.com/advisor/business/software/what-is-a-project-manager/" title="project manager">project manager</a> or coordinator who will oversee the project, as well as translators, editors, and any other team members who will be involved in the project.</p><h3 id="4-Find-the-translators"><a href="#4-Find-the-translators" class="headerlink" title="4. Find the translators"></a>4. Find the translators</h3><p>One of the most important aspects of translation management is selecting the right translators for the job. </p><p>The project manager will need to assess the translators&#39; qualifications, experience, and expertise to ensure that they have the right skills to handle the content that needs to be translated. </p><p>These professionals will also need to coordinate with the translators to ensure that they are aware of the project&#39;s timelines and deliverables.</p><h3 id="5-Define-the-project-plan"><a href="#5-Define-the-project-plan" class="headerlink" title="5. Define the project plan"></a>5. Define the project plan</h3><p>Another key aspect of translation project management is managing the timeline and budget of the project. This includes setting deadlines for each stage of the project, such as translation, editing, and proofreading, and ensuring that these deadlines are met. </p><p>The project manager will also need to monitor the progress of the project and take any necessary steps to keep it on track.</p><h3 id="6-Review-the-work"><a href="#6-Review-the-work" class="headerlink" title="6. Review the work"></a>6. Review the work</h3><p>Quality assurance is also a critical part of project management in translation. The professionals will need to ensure that the final translated content meets the client&#39;s expectations and is of high quality. </p><p>This may involve conducting a review of the translated content, or working with a team of editors and proofreaders to ensure that the content is error-free and accurate.</p><h3 id="7-Translation-delivery"><a href="#7-Translation-delivery" class="headerlink" title="7. Translation delivery"></a>7. Translation delivery</h3><p>The final translated content should be delivered to the client in the appropriate format and in a timely manner. Any necessary final adjustments should be made at this time, and the project should be closed out according to the project plan.</p><h2 id="Streamline-your-translation-project-with-a-tool"><a href="#Streamline-your-translation-project-with-a-tool" class="headerlink" title="Streamline your translation project with a tool"></a>Streamline your translation project with a tool<a name="streamline"></a></h2><p>For a translation project, the management can be essentially improved with following features:</p><h4 id="Translation-management"><a href="#Translation-management" class="headerlink" title="Translation management"></a>Translation management</h4><p>Allows customers to post and manage their content under a single dashboard, as well as collaborate with and assess translators&#39; work.</p><h4 id="In-context-editing"><a href="#In-context-editing" class="headerlink" title="In-context editing"></a>In-context editing</h4><p>This feature enables users to modify translations directly within the context of their website or application, which can assist verify that translations are accurate and suitable.</p><h4 id="Machine-translation"><a href="#Machine-translation" class="headerlink" title="Machine translation"></a>Machine translation</h4><p>This technology uses machine learning algorithms to automatically translate text, saving time and effort.</p><h4 id="Translation-memory"><a href="#Translation-memory" class="headerlink" title="Translation memory"></a>Translation memory</h4><p>Remembers previous translations and offers them when comparable information is encountered, so ensuring consistency and reducing the need for retranslation.</p><h4 id="Versioning"><a href="#Versioning" class="headerlink" title="Versioning"></a>Versioning</h4><p>Allows users to keep track of changes to translations over time and, if necessary, roll back to previous versions.</p><h4 id="Analytics"><a href="#Analytics" class="headerlink" title="Analytics"></a>Analytics</h4><p>Provides information on how translations are used and how people interact with them, which can aid in the localization process.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/TFV_vhJs5DY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>Locize, the management system for translations and localization, is designed to interact with a wide number of platforms and tools, including website builders, content management systems, and software development kits.</p><h2 id="Locize-What-is-it"><a href="#Locize-What-is-it" class="headerlink" title="Locize: What is it "></a>Locize: What is it <a name="nextlevel"></a></h2><p>Locize is a cloud-based <a href="../tms/" title="translation management system">translation management system</a> that enables teams to cooperate on website and app localization. </p><p>To help with the localization process, it includes capabilities like machine translation, translation memory, and terminology management. It also has an API and integration possibilities for a variety of development frameworks and platforms.</p><p>Locize is also a <a href="/" title="localization software">localization software</a> that provides a variety of features for managing and translating website and application content.</p><p>Now we&#39;d like to hand it on to you:</p><p>Do you have a plan for your translation workflow or project?</p><p>We can handle the project more efficiently if we work together.</p><p>If you are already experienced with integrating our solution into your technology stack, we are now offering a 14-day free trial period. Simply join our platform below to get started!</p><p><a class="btn btn-outline btn-xl" style="color:white" href="https://www.locize.app/register" title="register to locize">register</a> <a class="btn btn-outline btn-xl" style="color:white" href="https://docs.locize.com/" title="learn more">Learn more</a></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>To summarize, translation project management is a difficult process that necessitates precise organization and attention to detail. </p><p>Coordination with translators, management of timetables and budgets, and ensuring that the final result fulfills the client&#39;s expectations are all part of the job. </p><p>Translation project managers may help guarantee that localization projects are finished on time and under budget, while also ensuring that the end result is of high quality by following the best practices and utilizing the appropriate tools.</p><p>To increase the accuracy and efficiency of the translation process, the <a href="/services.html#translationservices" title="translation industry">translation industry</a> is facing rule-based automation and artificial intelligence.</p>]]></content>
      
      
      
        <tags>
            
            <tag> translation management </tag>
            
            <tag> language translation </tag>
            
            <tag> project management </tag>
            
            <tag> translation tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unleashing the Full Potential of i18next: Tips and Tricks</title>
      <link href="/blog/i18next-tips-and-tricks/"/>
      <url>/blog/i18next-tips-and-tricks/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>Internationalization (<a href="../what-is-i18n/">i18n</a>) and localization (<a href="../localization/">l10n</a>) are important aspects of any web or mobile application. i18next is a powerful JavaScript library that makes it easy to handle i18n and <a href="/blog/l10n/" titel="l10n">l10n</a> in your application. In this post, we&#39;ll explore some tips and tricks for using <a href="https://www.i18next.com/">i18next</a> to its full potential.</p><blockquote><p>Unlock the secrets of successful translations with i18next. Explore advanced tips and techniques to handle complex translation scenarios. From pluralization to context-based translations, this guide will empower you to deliver accurate and culturally appropriate content.</p></blockquote><h2 id="1-Use-the-namespace-feature"><a href="#1-Use-the-namespace-feature" class="headerlink" title="1. Use the namespace feature:"></a>1. Use the namespace feature:</h2><p>One of the most powerful features of i18next is the ability to use namespaces. <a href="https://www.i18next.com/principles/namespaces">Namespaces</a> allow you to separate your translations into different groups, making it easier to organize and manage your translations. For example, you can create a namespace for each feature or module in your application, making it easier to update and maintain translations for that specific feature.<br /><em>Check out <a href="https://youtu.be/SA_9i4TtxLQ?t=314">this section in the video</a> crash course!</em></p><h2 id="2-Utilize-pluralization"><a href="#2-Utilize-pluralization" class="headerlink" title="2. Utilize pluralization:"></a>2. Utilize pluralization:</h2><p>i18next also has built-in support for <a href="https://www.i18next.com/translation-function/plurals">pluralization</a>, making it easy to handle different plural forms of a word in different languages. To use this feature, simply specify the different plural forms of a word in your translation file and i18next will automatically use the correct form based on the current language and count.<br /><em>Check out <a href="https://youtu.be/SA_9i4TtxLQ?t=485">this section in the video</a> crash course!</em></p><h2 id="3-Take-advantage-of-interpolation"><a href="#3-Take-advantage-of-interpolation" class="headerlink" title="3. Take advantage of interpolation:"></a>3. Take advantage of interpolation:</h2><p>i18next supports <a href="https://www.i18next.com/translation-function/interpolation">interpolation</a>, that allows you to insert dynamic values into your translations. This can be useful for displaying user-specific information, such as a username or a date. To use interpolation, simply include placeholders in your translation string, and pass an object containing the values to i18next.<br /><em>Check out <a href="https://youtu.be/SA_9i4TtxLQ?t=433">this section in the video</a> crash course!</em></p><h2 id="4-Handle-fallbacks"><a href="#4-Handle-fallbacks" class="headerlink" title="4. Handle fallbacks:"></a>4. Handle fallbacks:</h2><p>i18next provides several <a href="https://www.i18next.com/principles/fallback">fallback</a> options to handle missing translations.</p><ul><li><a href="https://www.i18next.com/principles/fallback#language-fallback">Language fallback</a>: you can specify a fallback language in case the current language is not available.</li><li><a href="https://www.i18next.com/principles/fallback#namespace-fallback">Namespace fallback</a>: you can specify a fallback namespace in case the current namespace is not available.</li><li><a href="https://www.i18next.com/principles/fallback#key-fallback">Key fallback</a>: you can specify a fallback key in case the current key is not available.</li></ul><h2 id="5-Use-a-language-detector"><a href="#5-Use-a-language-detector" class="headerlink" title="5. Use a language detector:"></a>5. Use a <a href="https://www.i18next.com/overview/plugins-and-utils#language-detector">language detector</a>:</h2><p><a href="https://github.com/i18next/i18next-browser-languageDetector">i18next-browser-languagedetector</a> is a plugin that detects the user&#39;s preferred language based on their browser settings. This can be very useful for providing a better user experience by automatically displaying the website in the user&#39;s preferred language.</p><h2 id="6-Leverage-i18next-backend-plugins"><a href="#6-Leverage-i18next-backend-plugins" class="headerlink" title="6. Leverage i18next backend plugins:"></a>6. Leverage i18next backend plugins:</h2><p>i18next offers several <a href="https://www.i18next.com/overview/plugins-and-utils#backends">backend plugins</a> that allow you to load translations from various sources, such as a JSON file, a remote server, or a database. This can be useful for loading translations on demand or for providing an offline mode for your application. Some examples of i18next backend plugins include <a href="https://github.com/i18next/i18next-http-backend">i18next-http-backend</a> and <a href="https://github.com/i18next/i18next-fs-backend">i18next-fs-backend</a>. With the help of <a href="https://github.com/i18next/i18next-chained-backend">i18next-chained-backend</a> you could also combine different backends to create <a href="https://www.i18next.com/how-to/backend-fallback">fallbacks</a> or <a href="https://www.i18next.com/how-to/caching">caching</a> concepts.</p><h2 id="7-Use-the-context-feature"><a href="#7-Use-the-context-feature" class="headerlink" title="7. Use the context feature:"></a>7. Use the context feature:</h2><p>i18next provides a <a href="https://www.i18next.com/translation-function/context">context feature</a> which allows you to provide additional context information for a translation in order to disambiguate between different translations of the same key. This can be useful when a word or phrase can have multiple meanings and the context helps to disambiguate the intended meaning. For example, providing gender-specific translations, like &quot;he&quot; and &quot;she&quot; for a specific phrase.</p><h2 id="8-Use-different-i18n-formats"><a href="#8-Use-different-i18n-formats" class="headerlink" title="8. Use different i18n formats:"></a>8. Use different i18n formats:</h2><p>i18next supports different <a href="https://www.i18next.com/overview/plugins-and-utils#i18n-formats">i18n formats</a> such as <a href="../i18n-formats-javascript/#icu">ICU message</a> format which is widely used in Java and C++. This allows you to use the same translations across different platforms and technologies. To use different i18n formats, you can use i18next plugins such as <a href="https://github.com/i18next/i18next-icu">i18next-icu</a>.</p><h2 id="9-Integrate-with-locize"><a href="#9-Integrate-with-locize" class="headerlink" title="9. Integrate with locize:"></a>9. Integrate with locize:</h2><p><a href="/">locize</a> is a cloud-based translation management system (<a href="../tms/">TMS</a>) that integrates seamlessly with <a href="https://www.i18next.com/">i18next</a>. By using locize, you can easily manage your translations and collaborate with translators and editors. locize also provides a powerful <a href="https://docs.locize.com/different-views">editor</a> and a <a href="https://docs.locize.com/whats-inside/translation-memory">translation memory</a>, making it easy to reuse translations and ensure consistency across your application.To integrate locize with i18next, you can for example use the <a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a> plugin. This plugin allows you to load translations from the <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">locize CDN</a> and automatically syncs them with your application. <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY&t=294s">Here</a> you can see what this could look like.<br /><em>Check out <a href="https://youtu.be/SA_9i4TtxLQ?t=1076">this section in the video</a> crash course!</em></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion:"></a>Conclusion:</h2><p>In this post, we&#39;ve explored some tips and tricks for using i18next to its full potential. By using namespaces, pluralization, interpolation, fallbacks, i18next-browser-languagedetector, leveraging i18next backend plugins and context feature, you can provide a better user experience for your users. Integrating it with <a href="/">locize</a> allows you to easily manage your translations and collaborate with translators and editors. With i18next, you have all the tools you need to make your application truly international.If you&#39;re new to i18next, you might check out <a href="https://youtu.be/SA_9i4TtxLQ">the complete free i18next crash course video</a>:</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/SA_9i4TtxLQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>i18n with Next.js 13/14 and app directory / App Router (an i18next guide)</title>
      <link href="/blog/next-app-dir-i18n/"/>
      <url>/blog/next-app-dir-i18n/</url>
      
        <content type="html"><![CDATA[<p><img src="next-app-dir-i18n.jpg" title="locize © inweso GmbH"></p><p>At <a href="https://nextjs.org/conf">Next.js Conf</a>, the <a href="https://vercel.com/">Vercel</a> team <a href="https://nextjs.org/blog/next-13">announced Next.js 13</a> which introduced the new <a href="https://nextjs.org/docs/app">app directory / App Router paradigm</a>.<br />This article is also valid for newer Next.js versions like <a href="https://nextjs.org/blog/next-14">Next.js 14</a>.<br />It includes support for <a href="https://nextjs.org/blog/next-13#layouts">Layouts</a>, <a href="https://nextjs.org/blog/next-13#server-components">Server Components</a>, <a href="https://nextjs.org/blog/next-13#streaming">Streaming</a> and <a href="https://nextjs.org/blog/next-13#data-fetching">Support for Data Fetching</a>.</p><blockquote><p>Awesome! <strong>Next.js 13</strong> has been <a href="https://nextjs.org/blog/next-13">released</a>!<br />It seems pretty fast and it lays the foundations to be dynamic without limits.</p></blockquote><h2 id="Afterthoughts"><a href="#Afterthoughts" class="headerlink" title="Afterthoughts..."></a>Afterthoughts...</h2><p>This sounds good, but looking more into the app directory / App Router paradigm, it looks like this is a completely new Next.js setup... not really comparable to the old one...</p><blockquote><p>What does this mean regarding i18n?</p></blockquote><p>Looking at the <a href="https://nextjs.org/docs/app/building-your-application/routing/internationalization">docs</a> it seems our old approaches will not work anymore.</p><p><img src="not-planned.jpg"></p><b>Nice features provided by <a href="https://next.i18next.com" target="_blank">next-i18next</a> <i>(and other Next.js related i18n modules)</i>, like described <a href="../next-i18next/" target="_blank">here</a> and <a href="../next-i18n-static/" target="_blank">here</a> are not suited to this new app directory setup.<br /><span style="text-decoration: underline;">So you don't need next-i18next anymore!</span></b><h2 id="A-new-approach"><a href="#A-new-approach" class="headerlink" title="A new approach"></a>A new approach</h2><p>In this section, you&#39;ll see how we can internationalize the new app directory with the use of <a href="https://www.i18next.com/">i18next</a>, <a href="https://react.i18next.com/">react-i18next</a> and <a href="https://github.com/i18next/i18next-resources-to-backend">i18next-resources-to-backend</a>.<br /><code>npm install i18next react-i18next i18next-resources-to-backend</code></p><ol><li><a href="#step-1">Folder structure</a></li><li><a href="#step-2">Language detection</a></li><li><a href="#step-3">i18n instrumentation</a></li><li><a href="#step-4">Language switcher</a></li><li><a href="#step-5">Client side</a></li><li><a href="#step-6">Bonus</a></li></ol><h3 id="1-Folder-structure"><a href="#1-Folder-structure" class="headerlink" title="1. Folder structure "></a>1. Folder structure <a name="step-1"></a></h3><p>Let&#39;s start by creating a new folder structure that uses the language as url parameter. A so-called <a href="https://nextjs.org/docs/app/api-reference/functions/generate-static-params#single-dynamic-segment">dynamic segment</a>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── app</span><br><span class="line">    └── [lng]</span><br><span class="line">        ├── second-page</span><br><span class="line">        |   └── page.js</span><br><span class="line">        ├── layout.js</span><br><span class="line">        └── page.js</span><br></pre></td></tr></table></figure><p>The <code>app/[lng]/page.js</code> file could look like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params">&#123; params: &#123; lng &#125; &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi there!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/$&#123;<span class="attr">lng</span>&#125;/<span class="attr">second-page</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        second page</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the <code>app/[lng]/second-page/page.js</code> file could look like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params">&#123; params: &#123; lng &#125; &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hi from second page!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/$&#123;<span class="attr">lng</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        back</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Last the <code>app/[lng]/layout.js</code> file could look like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dir &#125; <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> languages = [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">generateStaticParams</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> languages.map(<span class="function">(<span class="params">lng</span>) =&gt;</span> (&#123; lng &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RootLayout</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  children,</span></span></span><br><span class="line"><span class="params"><span class="function">  params: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    lng</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#123;lng&#125;</span> <span class="attr">dir</span>=<span class="string">&#123;dir(lng)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">head</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;children&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Language-detection"><a href="#2-Language-detection" class="headerlink" title="2. Language detection "></a>2. Language detection <a name="step-2"></a></h2><p>Now navigating to <code>http://localhost:3000/en</code> or <code>http://localhost:3000/de</code> should show something, and also the links to the second page and back should work, but navigating to <code>http://localhost:3000</code> will return a 404 error.<br />To fix that we&#39;ll create a Next.js middleware and refactor a bit of code:</p><p>Let&#39;s first create a new file <code>app/i18n/settings.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fallbackLng = <span class="string">&#x27;en&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> languages = [fallbackLng, <span class="string">&#x27;de&#x27;</span>]</span><br></pre></td></tr></table></figure><p>Then adapt the <code>app/[lng]/layout.js</code> file:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dir &#125; <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; languages &#125; <span class="keyword">from</span> <span class="string">&#x27;../i18n/settings&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">generateStaticParams</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> languages.map(<span class="function">(<span class="params">lng</span>) =&gt;</span> (&#123; lng &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RootLayout</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  children,</span></span></span><br><span class="line"><span class="params"><span class="function">  params: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    lng</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#123;lng&#125;</span> <span class="attr">dir</span>=<span class="string">&#123;dir(lng)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">head</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;children&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And finally create a <code>middleware.js</code> file:<br /><code>npm install accept-language</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NextResponse &#125; <span class="keyword">from</span> <span class="string">&#x27;next/server&#x27;</span></span><br><span class="line"><span class="keyword">import</span> acceptLanguage <span class="keyword">from</span> <span class="string">&#x27;accept-language&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; fallbackLng, languages, cookieName &#125; <span class="keyword">from</span> <span class="string">&#x27;./app/i18n/settings&#x27;</span></span><br><span class="line"></span><br><span class="line">acceptLanguage.languages(languages)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// matcher: &#x27;/:lng*&#x27;</span></span><br><span class="line">  <span class="attr">matcher</span>: [<span class="string">&#x27;/((?!api|_next/static|_next/image|assets|favicon.ico|sw.js|site.webmanifest).*)&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">middleware</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lng</span><br><span class="line">  <span class="keyword">if</span> (req.cookies.has(cookieName)) lng = acceptLanguage.get(req.cookies.get(cookieName).value)</span><br><span class="line">  <span class="keyword">if</span> (!lng) lng = acceptLanguage.get(req.headers.get(<span class="string">&#x27;Accept-Language&#x27;</span>))</span><br><span class="line">  <span class="keyword">if</span> (!lng) lng = fallbackLng</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Redirect if lng in path is not supported</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    !languages.some(<span class="function"><span class="params">loc</span> =&gt;</span> req.nextUrl.pathname.startsWith(<span class="string">`/<span class="subst">$&#123;loc&#125;</span>`</span>)) &amp;&amp;</span><br><span class="line">    !req.nextUrl.pathname.startsWith(<span class="string">&#x27;/_next&#x27;</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> NextResponse.redirect(<span class="keyword">new</span> URL(<span class="string">`/<span class="subst">$&#123;lng&#125;</span><span class="subst">$&#123;req.nextUrl.pathname&#125;</span>`</span>, req.url))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (req.headers.has(<span class="string">&#x27;referer&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> refererUrl = <span class="keyword">new</span> URL(req.headers.get(<span class="string">&#x27;referer&#x27;</span>))</span><br><span class="line">    <span class="keyword">const</span> lngInReferer = languages.find(<span class="function">(<span class="params">l</span>) =&gt;</span> refererUrl.pathname.startsWith(<span class="string">`/<span class="subst">$&#123;l&#125;</span>`</span>))</span><br><span class="line">    <span class="keyword">const</span> response = NextResponse.next()</span><br><span class="line">    <span class="keyword">if</span> (lngInReferer) response.cookies.set(cookieName, lngInReferer)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> NextResponse.next()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="middleware.gif"></p><p>Navigating to the root path <code>/</code> will now check if there&#39;s already a cookie with the last chosen language, as fallback it will check the <code>Accept-Language</code> header and the last fallback is the defined fallback language.<br />The detected language will be used to redirect to the appropriate page.</p><h2 id="3-i18n-instrumentation"><a href="#3-i18n-instrumentation" class="headerlink" title="3. i18n instrumentation "></a>3. i18n instrumentation <a name="step-3"></a></h2><p>Let&#39;s prepare i18next in the <code>app/i18n/index.js</code> file:<br />We&#39;re not using the i18next singleton here but creating a new instance on each <code>useTranslation</code> call, because during compilation everything seems to be executed in parallel. Having a separate instance will keep the translations consistent.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> resourcesToBackend <span class="keyword">from</span> <span class="string">&#x27;i18next-resources-to-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next/initReactI18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getOptions &#125; <span class="keyword">from</span> <span class="string">&#x27;./settings&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initI18next = <span class="keyword">async</span> (lng, ns) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> i18nInstance = createInstance()</span><br><span class="line">  <span class="keyword">await</span> i18nInstance</span><br><span class="line">    .use(initReactI18next)</span><br><span class="line">    .use(resourcesToBackend(<span class="function">(<span class="params">language, namespace</span>) =&gt;</span> <span class="keyword">import</span>(<span class="string">`./locales/<span class="subst">$&#123;language&#125;</span>/<span class="subst">$&#123;namespace&#125;</span>.json`</span>)))</span><br><span class="line">    .init(getOptions(lng, ns))</span><br><span class="line">  <span class="keyword">return</span> i18nInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">useTranslation</span>(<span class="params">lng, ns, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> i18nextInstance = <span class="keyword">await</span> initI18next(lng, ns)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">t</span>: i18nextInstance.getFixedT(lng, <span class="built_in">Array</span>.isArray(ns) ? ns[<span class="number">0</span>] : ns, options.keyPrefix),</span><br><span class="line">    <span class="attr">i18n</span>: i18nextInstance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the <code>app/i18n/settings.js</code> file we&#39;ll add the i18next options:<br /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fallbackLng = <span class="string">&#x27;en&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> languages = [fallbackLng, <span class="string">&#x27;de&#x27;</span>]</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> defaultNS = <span class="string">&#x27;translation&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> cookieName = <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getOptions</span> (<span class="params">lng = fallbackLng, ns = defaultNS</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// debug: true,</span></span><br><span class="line">    <span class="attr">supportedLngs</span>: languages,</span><br><span class="line">    fallbackLng,</span><br><span class="line">    lng,</span><br><span class="line">    <span class="attr">fallbackNS</span>: defaultNS,</span><br><span class="line">    defaultNS,</span><br><span class="line">    ns</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s prepare some translation files:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── app</span><br><span class="line">    └── i18n</span><br><span class="line">        └── locales</span><br><span class="line">            ├── en</span><br><span class="line">            |   ├── translation.json</span><br><span class="line">            |   └── second-page.json</span><br><span class="line">            └── de</span><br><span class="line">                ├── translation.json</span><br><span class="line">                └── second-page.json</span><br></pre></td></tr></table></figure><p><code>app/i18n/locales/en/translation.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Hi there!&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;to-second-page&quot;</span>: <span class="string">&quot;To second page&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app/i18n/locales/de/translation.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Hallo Leute!&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;to-second-page&quot;</span>: <span class="string">&quot;Zur zweiten Seite&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app/i18n/locales/en/second-page.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Hi from second page!&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;back-to-home&quot;</span>: <span class="string">&quot;Back to home&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app/i18n/locales/de/second-page.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Hallo von der zweiten Seite!&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;back-to-home&quot;</span>: <span class="string">&quot;Zurück zur Hauptseite&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we&#39;re ready to use that in our pages...<br />Server pages can by <code>async</code> this way we can await the <code>useTranslation</code> response.</p><p><code>app/[lng]/page.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;../i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params">&#123; params: &#123; lng &#125; &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = <span class="keyword">await</span> useTranslation(lng)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;t(&#x27;title&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/$&#123;<span class="attr">lng</span>&#125;/<span class="attr">second-page</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;t(&#x27;to-second-page&#x27;)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app/[lng]/second-page/page.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;../../i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params">&#123; params: &#123; lng &#125; &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = <span class="keyword">await</span> useTranslation(lng, <span class="string">&#x27;second-page&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;t(&#x27;title&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/$&#123;<span class="attr">lng</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;t(&#x27;back-to-home&#x27;)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="app_de_1.jpg"></p><h3 id="4-Language-switcher"><a href="#4-Language-switcher" class="headerlink" title="4. Language switcher "></a>4. Language switcher <a name="step-4"></a></h3><p>Now let&#39;s define a language switcher in a Footer component:</p><p><code>app/[lng]/components/Footer/index.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Trans &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next/TransWithoutContext&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; languages &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../i18n/settings&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Footer = <span class="keyword">async</span> (&#123; lng &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = <span class="keyword">await</span> useTranslation(lng, <span class="string">&#x27;footer&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> <span class="attr">50</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;languageSwitcher&quot;</span> <span class="attr">t</span>=<span class="string">&#123;t&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Switch from <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;lng&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> to:&#123;&#x27; &#x27;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;languages.filter((l) =&gt; lng !== l).map((l, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">        return (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">key</span>=<span class="string">&#123;l&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;index &gt; 0 &amp;&amp; (&#x27; or &#x27;)&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/$&#123;<span class="attr">l</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">              &#123;l&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        )</span></span><br><span class="line"><span class="xml">      &#125;)&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You see we can also use the <a href="https://react.i18next.com/latest/trans-component">react-i18next Trans component</a>.</p><p>A new namespace:</p><p><code>app/i18n/locales/en/footer.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;languageSwitcher&quot;</span>: <span class="string">&quot;Switch from &lt;1&gt;&#123;&#123;lng&#125;&#125;&lt;/1&gt; to: &quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app/i18n/locales/de/footer.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;languageSwitcher&quot;</span>: <span class="string">&quot;Wechseln von &lt;1&gt;&#123;&#123;lng&#125;&#125;&lt;/1&gt; nach: &quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And add that Footer component to the pages:</p><p><code>app/[lng]/page.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;../i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Footer &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/Footer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params">&#123; params: &#123; lng &#125; &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = <span class="keyword">await</span> useTranslation(lng)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;t(&#x27;title&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/$&#123;<span class="attr">lng</span>&#125;/<span class="attr">second-page</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;t(&#x27;to-second-page&#x27;)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">lng</span>=<span class="string">&#123;lng&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app/[lng]/second-page/page.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;../../i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Footer &#125; <span class="keyword">from</span> <span class="string">&#x27;../components/Footer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params">&#123; params: &#123; lng &#125; &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = <span class="keyword">await</span> useTranslation(lng, <span class="string">&#x27;second-page&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;t(&#x27;title&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/$&#123;<span class="attr">lng</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;t(&#x27;back-to-home&#x27;)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">lng</span>=<span class="string">&#123;lng&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="switcher.gif"></p><p><strong>🥳 Awesome, you&#39;ve just created your first language switcher!</strong></p><h3 id="5-Client-side"><a href="#5-Client-side" class="headerlink" title="5. Client side "></a>5. Client side <a name="step-5"></a></h3><p>So far we&#39;ve created server side pages only.<br />So what do client side pages look like?</p><p>Since client side react components can&#39;t <code>async</code> we need to do some adjustments.</p><p>Let&#39;s introduce the <code>app/i18n/client.js</code> file:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next, useTranslation <span class="keyword">as</span> useTranslationOrg &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCookies &#125; <span class="keyword">from</span> <span class="string">&#x27;react-cookie&#x27;</span></span><br><span class="line"><span class="keyword">import</span> resourcesToBackend <span class="keyword">from</span> <span class="string">&#x27;i18next-resources-to-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getOptions, languages, cookieName &#125; <span class="keyword">from</span> <span class="string">&#x27;./settings&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runsOnServerSide = <span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">i18next</span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  .use(resourcesToBackend(<span class="function">(<span class="params">language, namespace</span>) =&gt;</span> <span class="keyword">import</span>(<span class="string">`./locales/<span class="subst">$&#123;language&#125;</span>/<span class="subst">$&#123;namespace&#125;</span>.json`</span>)))</span><br><span class="line">  .init(&#123;</span><br><span class="line">    ...getOptions(),</span><br><span class="line">    <span class="attr">lng</span>: <span class="literal">undefined</span>, <span class="comment">// let detect the language on client side</span></span><br><span class="line">    <span class="attr">detection</span>: &#123;</span><br><span class="line">      <span class="attr">order</span>: [<span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;htmlTag&#x27;</span>, <span class="string">&#x27;cookie&#x27;</span>, <span class="string">&#x27;navigator&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">preload</span>: runsOnServerSide ? languages : []</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useTranslation</span>(<span class="params">lng, ns, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [cookies, setCookie] = useCookies([cookieName])</span><br><span class="line">  <span class="keyword">const</span> ret = useTranslationOrg(ns, options)</span><br><span class="line">  <span class="keyword">const</span> &#123; i18n &#125; = ret</span><br><span class="line">  <span class="keyword">if</span> (runsOnServerSide &amp;&amp; lng &amp;&amp; i18n.resolvedLanguage !== lng) &#123;</span><br><span class="line">    i18n.changeLanguage(lng)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line react-hooks/rules-of-hooks</span></span><br><span class="line">    <span class="keyword">const</span> [activeLng, setActiveLng] = useState(i18n.resolvedLanguage)</span><br><span class="line">    <span class="comment">// eslint-disable-next-line react-hooks/rules-of-hooks</span></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (activeLng === i18n.resolvedLanguage) <span class="keyword">return</span></span><br><span class="line">      setActiveLng(i18n.resolvedLanguage)</span><br><span class="line">    &#125;, [activeLng, i18n.resolvedLanguage])</span><br><span class="line">    <span class="comment">// eslint-disable-next-line react-hooks/rules-of-hooks</span></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!lng || i18n.resolvedLanguage === lng) <span class="keyword">return</span></span><br><span class="line">      i18n.changeLanguage(lng)</span><br><span class="line">    &#125;, [lng, i18n])</span><br><span class="line">    <span class="comment">// eslint-disable-next-line react-hooks/rules-of-hooks</span></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (cookies.i18next === lng) <span class="keyword">return</span></span><br><span class="line">      setCookie(cookieName, lng, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">    &#125;, [lng, cookies.i18next])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>On client side the normal i18next singleton is ok. It will be initialized just once. And we can make use of the &quot;normal&quot; useTranslation hook. We just wrap it to have the possibility to pass in the language.</p><p>To align with the server side <a href="#step-2">language detection</a> we make use of <a href="https://github.com/i18next/i18next-browser-languageDetector">i18next-browser-languagedetector</a> and configure it accordingly.</p><p>We also need to create 2 versions of the Footer component.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── app</span><br><span class="line">    └── [lng]</span><br><span class="line">        └── components</span><br><span class="line">            └── Footer</span><br><span class="line">                ├── client.js</span><br><span class="line">                ├── FooterBase.js</span><br><span class="line">                └── index.js</span><br></pre></td></tr></table></figure><p><code>app/[lng]/components/Footer/FooterBase.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Trans &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next/TransWithoutContext&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; languages &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../i18n/settings&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FooterBase = <span class="function">(<span class="params">&#123; t, lng &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> <span class="attr">50</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;languageSwitcher&quot;</span> <span class="attr">t</span>=<span class="string">&#123;t&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Switch from <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;lng&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> to:&#123;&#x27; &#x27;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;languages.filter((l) =&gt; lng !== l).map((l, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">        return (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">key</span>=<span class="string">&#123;l&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;index &gt; 0 &amp;&amp; (&#x27; or &#x27;)&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/$&#123;<span class="attr">l</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">              &#123;l&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        )</span></span><br><span class="line"><span class="xml">      &#125;)&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The server side part continuous to use the <code>async</code> version, <code>app/[lng]/components/Footer/index.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; FooterBase &#125; <span class="keyword">from</span> <span class="string">&#x27;./FooterBase&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Footer = <span class="keyword">async</span> (&#123; lng &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = <span class="keyword">await</span> useTranslation(lng, <span class="string">&#x27;footer&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">FooterBase</span> <span class="attr">t</span>=<span class="string">&#123;t&#125;</span> <span class="attr">lng</span>=<span class="string">&#123;lng&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The client side part will use the new <code>i18n/client</code> version, <code>app/[lng]/components/Footer/client.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; FooterBase &#125; <span class="keyword">from</span> <span class="string">&#x27;./FooterBase&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../i18n/client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Footer = <span class="function">(<span class="params">&#123; lng &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = useTranslation(lng, <span class="string">&#x27;footer&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">FooterBase</span> <span class="attr">t</span>=<span class="string">&#123;t&#125;</span> <span class="attr">lng</span>=<span class="string">&#123;lng&#125;</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A client side page could look like this - <code>app/[lng]/client-page/page.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;../../i18n/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Footer &#125; <span class="keyword">from</span> <span class="string">&#x27;../components/Footer/client&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params">&#123; params: &#123; lng &#125; &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = useTranslation(lng, <span class="string">&#x27;client-page&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> [counter, setCounter] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;t(&#x27;title&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;t(&#x27;counter&#x27;, &#123; count: counter &#125;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCounter(Math.max(0, counter - 1))&#125;&gt;-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCounter(Math.min(10, counter + 1))&#125;&gt;+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/$&#123;<span class="attr">lng</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;t(&#x27;back-to-home&#x27;)&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">lng</span>=<span class="string">&#123;lng&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With some translation resources:</p><p><code>app/i18n/locales/en/client-page.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Client page&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_one&quot;</span>: <span class="string">&quot;one selected&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_other&quot;</span>: <span class="string">&quot;&#123;&#123;count&#125;&#125; selected&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_zero&quot;</span>: <span class="string">&quot;none selected&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;back-to-home&quot;</span>: <span class="string">&quot;Back to home&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app/i18n/locales/de/client-page.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Client Seite&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_one&quot;</span>: <span class="string">&quot;eines ausgewählt&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_other&quot;</span>: <span class="string">&quot;&#123;&#123;count&#125;&#125; ausgewählt&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_zero&quot;</span>: <span class="string">&quot;keines ausgewählt&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;back-to-home&quot;</span>: <span class="string">&quot;Zurück zur Hauptseite&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And a link in our initial page - <code>app/[lng]/page.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;../i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Footer &#125; <span class="keyword">from</span> <span class="string">&#x27;./components/Footer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params">&#123; params: &#123; lng &#125; &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = <span class="keyword">await</span> useTranslation(lng)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;t(&#x27;title&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/$&#123;<span class="attr">lng</span>&#125;/<span class="attr">second-page</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;t(&#x27;to-second-page&#x27;)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/$&#123;<span class="attr">lng</span>&#125;/<span class="attr">client-page</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;t(&#x27;to-client-page&#x27;)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">lng</span>=<span class="string">&#123;lng&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>...with translation resources:</p><p><code>app/i18n/locales/en/translation.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Hi there!&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;to-second-page&quot;</span>: <span class="string">&quot;To second page&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;to-client-page&quot;</span>: <span class="string">&quot;To client page&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app/i18n/locales/de/translation.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Hallo Leute!&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;to-second-page&quot;</span>: <span class="string">&quot;Zur zweiten Seite&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;to-client-page&quot;</span>: <span class="string">&quot;Zur clientseitigen Seite&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>🎉🥳 Congratulations 🎊🎁</strong></p><p>The result should look like this:</p><p><img src="result.gif"></p><p><em>🧑‍💻 The complete code of an example app can be found <a href="https://github.com/i18next/next-app-dir-i18next-example">here</a>. And a TypeScript version <a href="https://github.com/i18next/next-app-dir-i18next-example-ts">here</a>.</em></p><h3 id="6-Bonus"><a href="#6-Bonus" class="headerlink" title="6. Bonus "></a>6. Bonus <a name="step-6"></a></h3><p><img src="transform_your_localization_process_small.jpg" alt="transform the localization process" title="locize © inweso GmbH"></p><p>Connect to an awesome <a href="../tms/">translation management system</a> and manage your translations outside of your code.</p><p>Let&#39;s synchronize the translation files with <a href="https://locize.com/">locize</a>.This can be done on-demand or on the CI-Server or before deploying the app.</p><h4 id="What-to-do-to-reach-this-step"><a href="#What-to-do-to-reach-this-step" class="headerlink" title="What to do to reach this step:"></a>What to do to reach this step:</h4><ol><li>in locize: signup at <a href="https://locize.app/register">https://locize.app/register</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a></li><li>in locize: <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a></li><li>install the <a href="https://github.com/locize/locize-cli">locize-cli</a> (<code>npm i locize-cli</code>)</li><li>in locize: add all your additional languages (this can also be done via <a href="https://docs.locize.com/integration/api#add-new-language">API</a> or with using the <a href="https://github.com/i18next/next-app-dir-i18next-example/blob/main/package.json#L10">migrate command</a> of the locize-cli)</li></ol><h4 id="Use-the-locize-cli"><a href="#Use-the-locize-cli" class="headerlink" title="Use the locize-cli"></a>Use the <a href="https://github.com/locize/locize-cli">locize-cli</a></h4><p>Use the <code>locize download</code> command to always download the published locize translations to your local repository (<code>app/i18n/locales</code>) before bundling your app. <em><a href="https://github.com/i18next/next-app-dir-i18next-example/blob/main/package.json#L11">example</a></em></p><p>Alternatively, you can also use the <code>locize sync</code> command to synchronize your local repository (<code>app/i18n/locales</code>) with what is published on locize. <em><a href="https://github.com/i18next/next-app-dir-i18next-example/blob/main/package.json#L12">example</a></em></p><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>I hope you’ve learned a few new things about i18n in the new app directory setup, <a href="https://nextjs.org/">Next.js</a>, <a href="https://www.i18next.com/">i18next</a>, <a href="https://react.i18next.com/">react-i18next</a>, <a href="https://react.i18next.com/">react-i18next</a>, <a href="https://github.com/i18next/i18next-resources-to-backend">i18next-resources-to-backend</a> and <a href="https://locize.com/">modern localization workflows</a>.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth trying the <a href="https://locize.com/">localization management platform - locize</a>.</p><p>The founders of <a href="https://locize.com/">locize</a> are also the creators of <a href="https://www.i18next.com/">i18next</a>. So by using <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.</p><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> react </tag>
            
            <tag> react-i18next </tag>
            
            <tag> next </tag>
            
            <tag> next-i18next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Localization at Networkme (by Marcelo Manteigas)</title>
      <link href="/blog/networkme-locize/"/>
      <url>/blog/networkme-locize/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p><a href="https://www.networkme.io/">Networkme</a> is a career discovery and development platform that helps students find the best job for them to start their careers. We are often recognized as the “Linkedin for students” because we provide an ecosystem for companies to interact directly with their future talent through a platform that is better suited for this particular use case. </p><h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>From the get-go we implemented our platform in 3 languages, Portuguese, English and Spanish to cover all the Iberian market and hopefully to capture some international user and companies looking to hire/work in this region. Our initial approach was to have a local JSON file inside the application to manage the different copies in the platform. However, as we grew in size and to currently 6 different web applications, it became almost impossible to manage everything effectively. In fact, at some point any request to change copy in any of the platform was taking 2 days to fulfill and changes would only reflect in the production environment according to the deploy schedule which could take a week.</p><p>This obviously generated a lot of frustration for both the technical team because they were spending a lot of time fulfilling these requests instead of progressing in the roadmap, and the business team felt like we were not moving at the speed they needed.</p><p>We found <a href="/">locize</a> as a solution to give autonomy to business teams to make changes in the application copy and relive the technical team from this burden. Also, by using the <a href="/">locize</a> features to better encapsulate the different projects we were able to implement governance features and drastically reduce the complexity to manage application with more than 10 thousand words.</p><h2 id="Favorite-Features"><a href="#Favorite-Features" class="headerlink" title="Favorite Features"></a>Favorite Features</h2><p>The best thing about using locize that really changed our game was the ability to have an <a href="https://docs.locize.com/whats-inside/context#incontext-view">in-context editor</a> that allows non-technical collaborator to easily interface with our application copy creating an abstraction between the technical implementation in a JSON format. That is very powerful to help them navigate with agility and drastically reduced the risk of breaking anything in the application since they were changing directly in the application.</p><p><img src="incontext.jpg"></p><p>The ability to create different projects and having RBAS implemented was especially important to implement the necessary governance to avoid conflicting work or worst having users accidently committing mistakes</p><h2 id="Final-Thoughts"><a href="#Final-Thoughts" class="headerlink" title="Final Thoughts"></a>Final Thoughts</h2><p><a href="/">locize</a> really changed positively our dynamic inside Networkme between business and technical teams by reducing the amount of time managing copy in the web applications and empowering the copywriters with the autonomy to move at the speed they expect.The development team became <strong>at least 20% more productive</strong>, since the only thing they needed to do was to create the keys through the development process and all the copy management afterwards was outside the set of their responsibilities.</p><p>If you&#39;re new to locize, watch the <a href="https://youtu.be/TFV_vhJs5DY">demo video</a> to learn more about it:</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/TFV_vhJs5DY" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> guest post </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The hidden localization costs</title>
      <link href="/blog/hidden-localization-costs/"/>
      <url>/blog/hidden-localization-costs/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>Big companies that reach hundreds of countries can spend millions on translation costs alone and still not reach all their audience.</p><p>There are <a href="../grow-online-business/">revealing facts</a> about the business growth for high-quality localized content to engage new audiences, grow brand recognition and loyalty and boost revenue.</p><p>Localized content is important to enhance top of funnel efforts. Everyone can estimate the cost of content localization by obtaining bids from <a href="/services.html#translationservices">language service providers</a>.But companies often forget the actual translation work cost is just a minimal part of the complete localization costs.</p><p>What many may not consider when calculating the budget are the hidden costs of localization, for example:</p><ul><li>extract source files from your software project</li><li>copy-pasting, exporting, importing, etc... from your resource files to various file formats for translation and back again</li><li>order translations, sending emails to translators to check how much they have translated, proofreading...</li><li>converting files to different formats, getting charged by translation agencies for converting your files to formats used by the translators</li><li>import/sync translated resources back to your software project, resolve conflicts because in the meantime new features or software changes have been made, etc...</li><li>release new version of software because of translation issue, new roundtrip</li><li>for a better alignement, a dedicated resource for technical writer/translator/coordinator</li><li><a href="../help-tech-leads/">development team &lt;-&gt; translation team alignments</a></li><li>managing the localization process with tools and workflows that haven&#39;t changed for a lot of years</li><li><a href="https://youtu.be/YQryHo1iHb8">delayed rollout</a> because of delayed translations, alternatively lock down content changes 2 to 3 months ahead of the launch date to carry out localization</li><li>...</li></ul><p>In terms of your investment, the above hidden costs tend to be higher than the actual cost of translation.</p><blockquote><p>How to get rid of these hidden costs?</p></blockquote><p>➡️ Good processes and <a href="../i18n-l10n-t9n-tms/">modern tools</a> that are focused on you with your development team and not only the translation service provider.</p><p>By <a href="../8-signs-you-should-improve-your-localization-process/">improving workflow processes</a> and using a <a href="../modern-continuous-localization/">modern</a> <a href="../tms/">translation management system</a> like <a href="https://locize.com/">locize</a>, the content is translated faster and your software is released more efficiently. Moreover, you will reach your target audiences faster, trying to get ahead of your competition.</p>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> international strategy </tag>
            
            <tag> global localization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Localization at Immersive Communities (by Mario Stopfer)</title>
      <link href="/blog/immersive-locize/"/>
      <url>/blog/immersive-locize/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p><a href="https://immersive.community/">Immersive Communities</a> is a social media platform for content creators. It allows users to create their community and have mambers write articles on any topic they care about. As a solo-developer, I&#39;ve worked for just over 4 years to deliver the platform to a global audience. Since my goal was to have a global reach from day one, it goes without saying that localization was something I took seriously.</p><p>I&#39;ve decided to have the platform fully localized in 10 languages at launch. This, would certainly take a lot of time and effor, so I started looking for possible SaaS solutions to his problem. My first search result was <a href="/">locize</a> and it looked promising so I gave it a go. Needless to say, I wasn&#39;t disappoined and I neded up using <a href="/">locize</a> to fully localize my platform.</p><h2 id="Favorite-Features"><a href="#Favorite-Features" class="headerlink" title="Favorite Features"></a>Favorite Features</h2><p>The best thing about <a href="/">locize</a> that I found useful was the ability to create multiple projects. Inside each project you can have multiple documents (<a href="https://docs.locize.com/more/namespaces">namespaces</a>), which came useful to me, since I would have at least 2 different website types.</p><p>One would be the main website and the other, the other would represent all the other community websites where users can write articles on. Now I had the ability to load only the <a href="https://docs.locize.com/more/namespaces">namespaces</a> and translations I wanted, based on which website layout I was loading.</p><p>The other invaluable feature was the ability to automatically translate all your phrases using Google Translate, but <a href="/">locize</a> took it one step further by being compliant with <a href="https://www.i18next.com/">i18next</a> standards and also adding appropriate singular and plural translations. This would not be possible for me to do by myself since I would have to have inshight into the grammar rules of each language I wanted localized.</p><h2 id="Corner-Cases-handled-with-Ease"><a href="#Corner-Cases-handled-with-Ease" class="headerlink" title="Corner Cases handled with Ease"></a>Corner Cases handled with Ease</h2><p>Aside from plurals, I also had to handle time and counts of items. Luckily, using interpolation, <a href="/">locize</a> understood my request and properly formatted the time which I used to show how long ago each article was written. Also, the count of items, for example comments each article gets, was formatted properly. But this was not the biggest hurdle I had to jump over.</p><p>My real challenge was to localize my <a href="https://immersive.community/home/login">Landing Page</a>. The challenge came in the form of not only translating the text, but also adding the appropriate styling. Since different languages have different grammar rules, I couldn&#39;t just reuse a word which I translated previously, style it and add it to the phrase list.</p><p>This means that I had to use regular white font with my titles, but also had to apply a <strong>CSS</strong> color gradient on some words, to indicate important part of each title. I had to add styling for each title at a different place and then have them translated and displayed to the user. </p><p>The best part is that this was not just any text, but actually <strong>Markdown</strong>, which was then passed through a Markdown processor, which actually then generated styled <strong>HTML</strong>. The end result is that titles on the landing page have multiple styles applied to them.</p><p><img src="screens.jpg"></p><h2 id="Final-Thoughts"><a href="#Final-Thoughts" class="headerlink" title="Final Thoughts"></a>Final Thoughts</h2><p>I found <a href="/">locize</a> to be invaluable to my localization effort. I will continue using it for other projects and the ability to pause your project and pay less for your monthly subscription when you&#39;re not using it is an added bonus!</p><p>In <a href="https://betterprogramming.pub/how-i-built-a-social-network-in-4-years-as-a-solo-developer-4af70fb2d4c8">this article</a> you can read a lot more about how I built this social network in 4 years as a solo developer.</p><p>If you&#39;re new to locize, watch the <a href="https://youtu.be/TFV_vhJs5DY">demo video</a> to learn more about it:</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/TFV_vhJs5DY" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> guest post </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Multi tenant architecture | locize</title>
      <link href="/blog/multi-tenant/"/>
      <url>/blog/multi-tenant/</url>
      
        <content type="html"><![CDATA[<p><img src="multi-tenant-application.webp" alt="multi-tenant-application"></p><p>You&#39;re going to learn about a subject today that is more popular than ever.</p><p><strong>We now offer our consumers this unique functionality. Without the client having to pay more, this will contribute to raising the value of our localization software.</strong></p><p>Let&#39;s start by reviewing basic definitional information concerning multi-tenant as well as the benefits of such an architecture.</p><h2 id="Definition-Multi-tenant"><a href="#Definition-Multi-tenant" class="headerlink" title="Definition: Multi tenant"></a>Definition: Multi tenant</h2><p>A software that is multi-tenant may serve several customers with a single application instance. A single instance of a software program (and its underlying database and technology) supports several tenants in multi-tenant software architecture, also known as software multi-tenancy (or user accounts).</p><p>Each tenant can customize the program by changing some basic parameters. This might involve the look and feel of the user interface, user administration, or adding custom code to the program.</p><p>In this situation, instead of a dedicated server, the space for each tenant or client is shared. The multi-tenant nature of SaaS systems necessitates a greater emphasis on ensuring that all efforts are taken to isolate tenant resources.</p><p>There are three main types of multi tenant architecture:</p><h4 id="1-Shared-database"><a href="#1-Shared-database" class="headerlink" title="1) Shared database"></a>1) Shared database</h4><p>A multi-tenancy architecture with a multi-tenant database is a single, shared database structure. Because shared resources are used, this is the simplest of the three kinds and has a relatively low cost to tenants.To host tenants and store data, this design employs a single application and database instance. Using a single, common database schema provides for faster scaling, but can result in greater total running expenses.</p><h4 id="2-Single-database-with-several-schemas"><a href="#2-Single-database-with-several-schemas" class="headerlink" title="2) Single database with several schemas"></a>2) Single database with several schemas</h4><p>A single database with several schemas is another approach to multi-tenancy. This approach has a single application instance and separate databases for each tenant. Because of this design, each individual database incurs more expenses and requires more administrative effort. It is useful when data from various clients must be processed differently, such as when they are located in different countries with different legislation.</p><h4 id="3-Several-databases"><a href="#3-Several-databases" class="headerlink" title="3) Several databases"></a>3) Several databases</h4><p>Data is stored in numerous databases in the third type of multi-tenant architecture. This approach is very difficult in terms of administration and maintenance, however renters may be distinguished from one another using a predefined criterion.</p><p><img src="multi-tenant-architecture.webp" alt="source: diegosucaria.info"></p><h3 id="The-advantages-of-multi-tenant-applications"><a href="#The-advantages-of-multi-tenant-applications" class="headerlink" title="The advantages of multi tenant applications"></a>The advantages of multi tenant applications</h3><p>The huge advantage for shared resources is that it will make the entry cost very low and the scalability easier and faster. These are the main other advantages of multi-tenant architecture:</p><ul><li><b>Lower costs:</b> When compare to other hosting architectures, it’s costs less than a single infrastructure is used for multiple tenants</li><li><b>No maintenance at all:</b> Always up-to-date code as the host is taking care of maintenance. New features are implemented without the customer&#39;s involvement and just once.</li><li><b>Highly scalable:</b> The architecture is easily scalable on demand, new users access to the same instance</li><li><b>Easy customization:</b> It’s highly flexible, allowing each tenant client to modify the application to their individual business needs without incurring the expense, time, and risk of having an own development.</li><li><b>High productivity:</b> There is an improvement in productivity for the tenant because there is no need to manage the infrastructure.</li></ul><h3 id="Multi-tenant-vs-single-tenant"><a href="#Multi-tenant-vs-single-tenant" class="headerlink" title="Multi-tenant vs. single-tenant"></a>Multi-tenant vs. single-tenant</h3><p>The main difference is the access to source-code. In single-tenant architectures, a tenant will have a singular instance of an application dedicated to them. The key distinction is the availability of source code. A tenant in a single-tenant architecture will have a single instance of an application devoted to them.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>Assume that each client has a separate residence that is completely cut off from any nearby structures. In a multi-tenant cloud architecture, tenants reside in several apartments inside the same structure. </p><p>The same security system and communal utilities link them all. However, each tenant&#39;s privacy is protected within their apartment since they each have a key. But it&#39;s more probable that their neighbors&#39; behavior will affect how comfortable they are in the flat.</p><p><br /><br /></p><h3 id="How-locize-introduce-multi-tenant-in-translation-management"><a href="#How-locize-introduce-multi-tenant-in-translation-management" class="headerlink" title="How locize introduce multi-tenant in translation management"></a>How locize introduce multi-tenant in translation management</h3><p>For locize the multi-tenant approach is less of the classical infrastrucutre topic, but it still makes perfect sense for the translation management system since it functions as a fully independent application/project that is integrated into your own application or website.</p><p>This means that our customers (you) can in turn integrate the own customers or other projects into the account without opening another account.</p><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><h3 style="color:orange;">Uniqueness</h3><p style="color:grey;">The concept of multi-tenancy is absolutely new and exclusive to the localization industry. Use the most up to date software for this purpose, <a style="color:orange" href="https://www.locize.app/register" title="locize">locize</a></p></div><p>With the multi-tentant function to happen:</p><ul><li>With limited access, you can assign your own clients a dedicated project without spending money on new infrastructure.</li><li>Advanced user management enhances workflow flexibility in general.</li><li>The localization software will increase in scale from its current level.</li></ul><div style="border-left: 0.5px solid orange;padding: 0.5rem 2rem"><h3 style="color:orange;">Testimonials</h3><p style="color:grey;">Check out our <a href="/customers.html" title="customer success stories">customer success stories</a> for more examples of who is using our service.</p></div><p>➡️ <b>Read more:</b> <a style="color:orange" href="https://docs.locize.com/more/multi-tenant" title="multi tenant docs">Here you will find the instructions</a> how to add a multi-tenant project for locize.</p><p><img src="locize-multi-tenant.webp" alt="locize-multi-tenant"></p><p>Your primary project&#39;s material serves as the foundation for the projects developed under &quot;Tenants.&quot;</p><p>The tenant project has a complete list of all current and upcoming translations.</p><p>Now, tenants have the option of maintaining translations exactly as you gave them or changing values as necessary.</p><p>You can choose to pay such expenses by letting the consumer pay with his own credit card or by subscribing to those tenant projects using your main subscription.</p><h3 id="Additional-links"><a href="#Additional-links" class="headerlink" title="Additional links"></a>Additional links</h3><p>➡️ Create a free new <a href="https://www.locize.app/register">user account</a> for multi tenant experience</p><p>➡️ Find out more about <a href="/blog/tms/">what a translation management system is</a></p><p>➡️ Find out more about <a href="../localization/">localization</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> software architecture </tag>
            
            <tag> cloud </tag>
            
            <tag> multi-tenancy </tag>
            
            <tag> customers </tag>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Smart help for tech leaders and engineering managers</title>
      <link href="/blog/help-tech-leads/"/>
      <url>/blog/help-tech-leads/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg"></p><p>Tech leaders and engineering managers have probably one of the most schizophrenic and ambitious role.</p><p>If you are in such a position, you may know why...<br />Let&#39;s start by telling what some tasks and responsibilities this roles entail.</p><h2 id="What-is-a-tech-team-leader-engineering-manager-doing"><a href="#What-is-a-tech-team-leader-engineering-manager-doing" class="headerlink" title="What is a tech team leader / engineering manager doing?"></a>What is a tech team leader / engineering manager doing?</h2><p><img src="foreman.jpg"></p><p>If there was just one word to describe it, I would call them <strong>&quot;foreman&quot;</strong>.Because they basically set the direction for the team and making sure everyone understands and follows major technical and non-technical decisions.<br />This may sound simple, but it isn&#39;t.</p><p>On your engineering team you need to establish psychological safety, with mentoring your team members by inspiring and guiding them.You need to take ownership of your decisions.<br />The motivation of the team members needs always to be fed also by providing an environment that encourages (personal) development. This may basically create a strong team culture.<br />Manage and resolve difficult conversations with the team members, by setting clear goals and expectations. This will give your team more clarity. Also hiring the right talent is crucial.<br />And since remote working / home office is becoming more and more common, you also need to handle knowledge transfer and promote efficient coding with distributed workforces.<br />One of the imortant virtues is your and your team&#39;s adaptability.Balancing speed and quality and maintaining productivity and velocity.At the same time improving the team performance by defining it and aligning it to the business.<br />Oh yes, the business... Such a person needs to become an expert not only in communicating with its technical team, but also with the nontechnical business stakeholders.<br />For sure resolving customer issues is also important.The delicate balancing what engineers like to do versus what needs to be done.<br />Somehow manage the too often existing mentality that one group works on &quot;the business&quot; and the other works on the &quot;code&quot; or the &quot;release&quot;, by trying to &quot;connect&quot; the work that the engineers do to the business.</p><h2 id="How-may-a-tech-team-leader-engineering-manager-feel"><a href="#How-may-a-tech-team-leader-engineering-manager-feel" class="headerlink" title="How may a tech team leader / engineering manager feel?"></a>How may a tech team leader / engineering manager feel?</h2><p><img src="alone.jpg"></p><p>Often feeling disconnected from the actual coding work.<br />They no longer have peers who can trade-notes with, problem-solve, and empathize with... feeling alone.<br />In the eyes of your team they’re &quot;the business&quot; and in the eyes of the executives &quot;those coders&quot;.<br />Directly in the middle of the tension between the business sides and the technical side of the company.</p><h2 id="Some-situations"><a href="#Some-situations" class="headerlink" title="Some situations "></a>Some situations <a name="situations"></a></h2><p><img src="discuss.png"></p><p>Your team is insisting that something needs to be refactored first – long overdue tech debt that is piling up and your superior is on you to ship something by an unreasonable date.</p><p>The financial department is saying the headcount is limited, and promoting your overperforming engineer is no longer possible, because not in the budget anymore.</p><p>The head of business management obligates you to finish a feature that just doesn’t work.</p><p>The sales manager is indirectly expressing negative feelings by questioning why your team is working on a specific feature and not what they heard about from sales news.</p><p>The program manager is asking you for a list of every engineer working on a specific project.</p><p>The localization manager is telling you, your team should have submitted the source language texts 3 month ago. And you try to explain that 3 month ago, the complete feature was not required and not specified at all.<br />And your team is soberingly trying to convince you that they can&#39;t do a feature freeze since they&#39;re developing with the agile methodology.<br />So you&#39;re trying to manage also the tension between the development team and translation team.</p><p>...</p><blockquote><p>Do you start to recognize what I mean?</p></blockquote><p>And to put the cherry on top, you can&#39;t go to the head of sales to say the program manager is on your case and that your team is refusing to develop a feature.<br />You can&#39;t tell the customer, the next release will come with unverified texts and no translations, because the localization team and product development team work with different process methodologies.</p><blockquote><p>Tech team leaders / engineering managers are alone!</p></blockquote><h2 id="Is-there-something-that-we-could-do-to-help"><a href="#Is-there-something-that-we-could-do-to-help" class="headerlink" title="Is there something that we could do to help?"></a>Is there something that we could do to help?</h2><p><img src="solution.jpg"></p><p>While this may seem a bit of a caricature of the challenges of the competitive engineering lead roles, I&#39;m sure that certain situations are familiar to you in one form or another.</p><p>Of course, I don&#39;t have an all-encompassing solution to improve this, but I do have a specific suggestion for resolving a particular center of tension.</p><p>Imagine this:</p><ol><li>The developers work as usual on their features and create strings on-the-fly. Those new texts get&#39;s automatically pushed as missing strings to the <a href="../i18n-l10n-t9n-tms/#tms">translation management system (TMS)</a>.</li><li>The translators work on new translations and can instantaneously validate the translations.</li><li>Since translations are &quot;connected&quot; directly to your software product, they can be released at any time. This way you can also fix translations of your previously released product, without having to redeploy it.</li></ol><p>If you do so, you have to make sure you can have more than one version of your translations; at least one for the current released version and one for the current development branch. That way your technical writers and translators can take care of the translations from the first day and keep up with changes with ease. By doing this, it is even possible to change or add translations without shipping a new release of your software!You may also want to have some reviewing workflow, a history, integrated ordering of external translations, context information, etc...</p><blockquote><p>Cool this will for sure calm down some tensions, but isn&#39;t this a little over the top... an extra tooling and deployment — does not all this just add more complexity and effort?</p></blockquote><h4 id="You-don’t-have-to-build-this-yourself-—-There-is-locize"><a href="#You-don’t-have-to-build-this-yourself-—-There-is-locize" class="headerlink" title="You don’t have to build this yourself!!! — There is locize!"></a>You don’t have to build this yourself!!! — There is <a href="https://locize.com/">locize</a>!</h4><p><a href="https://locize.com/">locize</a> removes the pain in the translation process. No more delays in shipping your software because of missing translations. Translators can keep up with changes from day one. The continuous localization process keeps up with your demanding business.</p><p>By using <a href="https://locize.com/">locize</a>, tech team leader / engineering manager enables collaboration to bridge the gap between localization and development. This makes you faster, more efficient and saves you money overall. Just start with the free trial. There&#39;s no harm... Try everything, set up your locize project, compare it with your existing process and validate it with <a href="/for-your-team.html">your team members</a>.</p><p>Watch the <a href="https://youtu.be/TFV_vhJs5DY">demo video</a> to learn more about it:</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/TFV_vhJs5DY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><em>btw: If you&#39;re already using the open source internationalization (i18n) framework <a href="https://www.i18next.com/">i18next</a>, then you are already using locize&#39;s best partner. Because locize was created by the maintainers of i18next. <a href="/i18next.html#already-using-i18next">Integrating i18next with locize is even easier.</a></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> international strategy </tag>
            
            <tag> global localization </tag>
            
            <tag> tech lead </tag>
            
            <tag> engineering manager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Language localization - Everything you need to know</title>
      <link href="/blog/language-localization/"/>
      <url>/blog/language-localization/</url>
      
        <content type="html"><![CDATA[<p><img src="language-localization.webp" alt="language localization"></p><p>We live in a truly connected world. Technology is allowing organizations to work and operate with other businesses and consumers across the globe with ease. However, while this ability to engage with an audience anywhere in the world is allowing companies to expand and grow, it is also placing significant importance on language and the importance of effective translation. </p><p>Language localization is an essential requirement for any business operating globally, helping them to connect and build stronger relationships with their clients. What is language localization, though, and how can it help you? We thought we would explore the process further.</p><h2 id="What-is-language-localization"><a href="#What-is-language-localization" class="headerlink" title="What is language localization?"></a>What is language localization?</h2><p>Many people believe that language localization and translation are interchangeable terms; however, they are two very different things. <a href="../localization/" title="Localization">Localization</a> is the strategy of adapting your brand’s services or products so that they are targeting the audience in a specific geographical region or international market. </p><p>For example, while English might be spoken by one in four people across the globe, there are very distinctive differences between British and American English. Understanding these nuances is essential in building a strong relationship with your customers. Equally, perhaps you are looking to transfer your Spanish-language video game to a wider audience in another language. While translating the voiceovers is essential, there are also various cultural references and idioms that will need to be adapted. </p><h2 id="Why-is-language-localization-important"><a href="#Why-is-language-localization-important" class="headerlink" title="Why is language localization important?"></a>Why is language localization important?</h2><p>For any business or organization looking to work globally, language localization is essential in helping them to <a href="/blog/market-expansion/" title="market expansion strategy">break into new markets</a>. In the highly competitive world that we live in, it is vital that you are able to effectively communicate with your target audience in terms of language and cultural norms. </p><p>Language localization will help to ensure that your brand feels completely natural to your audience. When consumers feel like they are working with a brand that understands them and is talking to them directly, they are far more likely to engage with them and utilize their services. In turn, this will help you to increase your reach and boost your sales.</p><p>Of course, it is not only about increasing your reach. When customers are able to identify with your brand more closely, then you are more likely to generate much greater goodwill. It also helps you to create a stronger customer experience, ensuring you are reaching all of the required touchpoints that leave them feeling confident in your brand. </p><h2 id="What-languages-are-most-popular-for-localization"><a href="#What-languages-are-most-popular-for-localization" class="headerlink" title="What languages are most popular for localization?"></a>What languages are most popular for localization?</h2><p> Thankfully, when it comes to language localization, you do need to translate your content into one of the over 7,150 languages that are currently used in the world today. Instead, you just need to ensure that you are transposing your website, brochures, and content into the language of your destination. </p><p>Over half of the world’s population currently speaks one of 23 languages, and some of the most popular and widely used of these include:</p><ul><li>English (spoken by 16.5% of the world)</li><li>Mandarin Chinese (12.3% of the world)</li><li>Hindi (8.3% of the world)</li><li>Spanish (7% of the world)</li><li>French (3.6% of the world)</li></ul><p><img src="languages.webp" alt="languages"></p><h2 id="Examples-of-language-localization"><a href="#Examples-of-language-localization" class="headerlink" title="Examples of language localization"></a>Examples of language localization</h2><p>Language localization is an all-encompassing term, and businesses will need to review everything from their website and marketing materials to contracts and manuals. There are a lot of things to consider when conducting localization, but some of the most important include:</p><p>Spelling Spelling is one of the most important factors when it comes to localization, particularly when translating between British and American English. For example, the former uses ‘ise’ whereas the latter uses ‘ize’. </p><p>Cultural references Cultural nuances and phrases are another important consideration. For example, in English, the phrase “put the cart before the horse” is a common quote; however, in France, they use the term Bulls instead of a horse.</p><p>Visuals and colors Localization is much more than just the text. You will also need to ensure that your text is visually laid out correctly for your target audience (do they read left-to-right or right-to-left?), and you will also need to ensure you are using the right colors and themes that they will relate to. </p><p>GrammarHigh-quality language localization should also factor in the grammatical rules of your chosen language. One small mistake in your written text can be the difference between your project being a success or a failure, so comprehensive proofreading is essential. </p><p>Tone Another major factor to consider when undertaking language localization is the tone of the content. Different cultures and countries will have different expectations of the tone your documents should come in. That is why you need to ensure that you are using the correct dialect and nuances of your target audience. </p><h2 id="Translation-vs-language-localization"><a href="#Translation-vs-language-localization" class="headerlink" title="Translation vs. language localization"></a>Translation vs. language localization</h2><p>While translation and localization follow similar practices, there are distinct differences between the two. Translation involves simply transposing content from its original language into your chosen language. While this can be effective in helping readers understand the original context of the document or file, certain phrases and terms will not translate with the same meaning. </p><p>For quick communication, this might not be such a problem. However, for professional documents such as contracts, manuals, research papers, and more, this could result in a major miscommunication. Localization, on the other hand, covers everything from meaning and grammar to the cultural, ethical, and societal guidelines of the destination language. </p><p>This ensures that readers are able to get the exact same meaning from the content, no matter the language that they are reading it in. This often requires the work of a specialist who will be able to tailor and adjust the wording and structure accordingly so that it meets the expectations of the local audience. </p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>For any business looking to branch out into new countries or markets, then language localization is an essential requirement. In order to stand out above your competitors and showcase everything that makes your brand special to consumers, you need to ensure that you are communicating with them in their own language. </p><p>This goes much further than simply translating your existing content into the new destination language and requires a comprehensive understanding of the minor nuances of your new market. This is where it is essential that you are working with a professional <a href="https://locize.com" title="localization software">localization software</a> that will not only be able to accurately transform your content but also stay up to date with the latest cultural trends to ensure you are always engaging with your audience correctly. </p><p>In our ecosystem you will find all the services needed to accurately translate your website, documents, and content into the correct language, as well as ensure that the structure, flow, and meaning remain the same. So if you are planning on growing your business, speak to us today. </p><p>Making a comprehensive localization strategy for your business, along with a step-by-step plan and KPIs to achieve, can be helpful for you. Start right now with our guide on <a href="https://locize.com" title="localization strategy">localization strategy</a>, we help you to start your way in localize your business.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/PtFEPtsmp-Y" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      
        <tags>
            
            <tag> internationalization </tag>
            
            <tag> examples </tag>
            
            <tag> globalisation </tag>
            
            <tag> process </tag>
            
            <tag> language localization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Best internationalization for Gatsby (an i18next based guide)</title>
      <link href="/blog/gatsby-i18n/"/>
      <url>/blog/gatsby-i18n/</url>
      
        <content type="html"><![CDATA[<p><img src="gatsby-i18next.jpg" alt="Gatsby Localization made easy with this step-by-step guide using i18next ✅" title="Gatsby Localization example"></p><p>You know <a href="https://www.gatsbyjs.com/">Gatsby</a>, right? - If not, stop reading this article and make something else.</p><p>Yes, Gatsby an open-source framework that combines functionality from React, GraphQL and Webpack into a single tool for building static websites and apps.</p><blockquote><p>But what does internationalization (i18n) look like in Gatsby?</p></blockquote><p>There are some plugins/libraries that may help instrumenting the Gatsby code for internationalization.In this article we will use a plugin based on the famous i18n framework <a href="https://www.i18next.com/">i18next</a>, respectively its great extension for <a href="https://reactjs.org/">React.js</a> - <a href="https://react.i18next.com/">react-i18next</a>.<br />The Gatsby plugin we&#39;re using is <a href="https://github.com/microapps/gatsby-plugin-react-i18next">gatsby-plugin-react-i18next</a> created by <a href="https://twitter.com/nevzorov_d">Dmitriy Nevzorov</a>.</p><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><ul><li><a href="#why-i18next">So first of all: &quot;Why i18next?&quot;</a></li><li><a href="#start">Let&#39;s get into it...</a><ul><li><a href="#prerequisites">Prerequisites</a></li><li><a href="#getting-started">Getting started</a></li><li><a href="#language-switcher">Language Switcher</a></li><li><a href="#i18n-link">Internationalized links</a></li><li><a href="#interpolation-pluralization">Interpolation and Pluralization</a></li><li><a href="#formatting">Formatting</a></li><li><a href="#context">Context</a></li><li><a href="#extract">Key extraction</a></li><li><a href="#for-sure">For sure!</a></li><li><a href="#how-look">How does this look like?</a></li><li><a href="#more">👀 but there&#39;s more... (InContext Editor)</a></li></ul></li><li><a href="#congratulations">🎉🥳 Congratulations 🎊🎁</a></li></ul><h2 id="So-first-of-all-quot-Why-i18next-quot"><a href="#So-first-of-all-quot-Why-i18next-quot" class="headerlink" title="So first of all: &quot;Why i18next?&quot; "></a>So first of all: &quot;Why i18next?&quot; <a name="why-i18next"></a></h2><p>When it comes to React localization, one of the most popular i18n framework is <a href="https://www.i18next.com/">i18next</a> with its react extension <a href="https://react.i18next.com/">react-i18next</a>, and for good reasons:</p><p><em>i18next was created in late 2011. It&#39;s older than most of the libraries you will use nowadays, including your main frontend technology (<a href="../react-i18next/">React</a>, <a href="../angular-i18next/">Angular</a>, <a href="../i18next-vue/">Vue</a>, ...).</em><br /><strong>➡️ sustainable</strong></p><p><em>Based on how long i18next already is available open source, there is no real i18n case that could not be solved with i18next.</em><br /><strong>➡️ mature</strong></p><p><em>i18next can be used in any javascript (and a few non-javascript - .net, elm, iOS, android, ruby, ...) environment, with any UI framework, with any i18n format, ... <a href="https://www.i18next.com/overview/supported-frameworks">the possibilities are endless</a>.</em><br /><strong>➡️ extensible</strong></p><p><em>There is a plenty of features and possibilities you&#39;ll get with i18next compared to other regular i18n frameworks.</em><br /><strong>➡️ rich</strong></p><p><a href="https://www.i18next.com/overview/comparison-to-others">Here</a> you can find more information about why i18next is special and <a href="https://locize.com/i18next.html#how-does-i18next-work">how it works</a>.</p><h2 id="Let-39-s-get-into-it"><a href="#Let-39-s-get-into-it" class="headerlink" title="Let&#39;s get into it... "></a>Let&#39;s get into it... <a name="start"></a></h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites "></a>Prerequisites <a name="prerequisites"></a></h3><p>Make sure you have Node.js and npm installed. It&#39;s best, if you have some experience with simple HTML, JavaScript, React.js and basic Gatsby, before jumping to <a href="https://github.com/microapps/gatsby-plugin-react-i18next">gatsby-plugin-react-i18next</a>. This Gatsby localization example is not intended to be a Gatsby or React beginner tutorial.</p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started "></a>Getting started <a name="getting-started"></a></h3><p>Take your own Gatsby project or create a new one, i.e. with the <a href="https://www.gatsbyjs.com/docs/reference/gatsby-cli/#new">gatsby-cli</a>.</p><p><code>npx gatsby-cli new</code></p><p>We will create a language switcher to make the content change between different languages.</p><p>Let&#39;s install some i18next dependencies:</p><ul><li><a href="https://github.com/microapps/gatsby-plugin-react-i18next">gatsby-plugin-react-i18next</a></li><li><a href="https://www.i18next.com/">i18next</a></li><li><a href="https://react.i18next.com/">react-i18next</a></li></ul><p><code>npm install gatsby-plugin-react-i18next i18next react-i18next</code></p><p>Create a <code>locales</code> directory and add a subfolder for your default/reference language (i.e. <code>en</code> for English).<br />There we will then add our namespace files, like:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|-- en</span><br><span class="line">    |-- common.json</span><br><span class="line">    |-- index.json</span><br></pre></td></tr></table></figure><p>Let&#39;s add a <code>languages.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; readdirSync, lstatSync &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultLanguage = <span class="string">&#x27;en&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// based on the directories get the language codes</span></span><br><span class="line"><span class="keyword">const</span> languages = readdirSync(join(__dirname, <span class="string">&#x27;locales&#x27;</span>)).filter(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> joinedPath = join(join(__dirname, <span class="string">&#x27;locales&#x27;</span>), fileName)</span><br><span class="line">  <span class="keyword">const</span> isDirectory = lstatSync(joinedPath).isDirectory()</span><br><span class="line">  <span class="keyword">return</span> isDirectory</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// defaultLanguage as first</span></span><br><span class="line">languages.splice(languages.indexOf(defaultLanguage), <span class="number">1</span>);</span><br><span class="line">languages.unshift(defaultLanguage);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  languages,</span><br><span class="line">  defaultLanguage,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Import the <code>languages.js</code> file in the <code>gatsby-config.js</code> file and configure some plugins:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; languages, defaultLanguage &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./languages&#x27;</span>);</span><br><span class="line"><span class="comment">// somewhere in your plugins add:</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">resolve</span>: <span class="string">`gatsby-source-filesystem`</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/locales`</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">`locale`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">resolve</span>: <span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        languages,</span><br><span class="line">        defaultLanguage,</span><br><span class="line">        siteUrl,</span><br><span class="line">        <span class="attr">i18nextOptions</span>: &#123;</span><br><span class="line">          <span class="comment">// debug: true,</span></span><br><span class="line">          <span class="attr">fallbackLng</span>: defaultLanguage,</span><br><span class="line">          <span class="attr">supportedLngs</span>: languages,</span><br><span class="line">          <span class="attr">defaultNS</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">          <span class="attr">interpolation</span>: &#123;</span><br><span class="line">            <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now let&#39;s start to instrument our first internationalized text.<br />Since <a href="https://github.com/microapps/gatsby-plugin-react-i18next">gatsby-plugin-react-i18next</a> is exporting all methods and components of <a href="https://react.i18next.com/">react-i18next</a>, we can do this:<br />In a page file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Trans, useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; graphql &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> IndexPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = useTranslation();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Seo</span> <span class="attr">title</span>=<span class="string">&#123;t(</span>&#x27;<span class="attr">seo</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hi people<span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123; /* ... */&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> IndexPage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> query = graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query ($language: String!) &#123;</span></span><br><span class="line"><span class="string">    locales: allLocale(</span></span><br><span class="line"><span class="string">      filter: &#123; ns: &#123; in: [&quot;index&quot;] &#125;, language: &#123; eq: $language &#125; &#125;</span></span><br><span class="line"><span class="string">    ) &#123;</span></span><br><span class="line"><span class="string">      edges &#123;</span></span><br><span class="line"><span class="string">        node &#123;</span></span><br><span class="line"><span class="string">          ns</span></span><br><span class="line"><span class="string">          data</span></span><br><span class="line"><span class="string">          language</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>Now also define an <code>locales/en/index.json</code> namespace file, like this:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;seo&quot;</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Hi people&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And maybe also another one for German?</p><p><code>locales/de/index.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;seo&quot;</span>: <span class="string">&quot;Startseite&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Hallo Leute&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Language-Switcher"><a href="#Language-Switcher" class="headerlink" title="Language Switcher "></a>Language Switcher <a name="language-switcher"></a></h3><p>To be able to switch between different languages, we need a language switcher:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link, useI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function">(<span class="params">&#123; siteTitle &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; languages, originalPath, t, i18n &#125; = useI18next();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;main-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;/* ... */&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;languages&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;languages.map((lng) =&gt; (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;lng&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;originalPath&#125;</span> <span class="attr">language</span>=<span class="string">&#123;lng&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">textDecoration:</span> <span class="attr">i18n.resolvedLanguage</span> === <span class="string">lng</span> ? &#x27;<span class="attr">underline</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">none</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">              &#123;lng&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ))&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure><p>You should now see something like this:</p><p><img src="app_0.jpg" alt="gatsby language switcher" title="locize © inweso GmbH"></p><p>By default, on the first load, <a href="https://github.com/microapps/gatsby-plugin-react-i18next">gatsby-plugin-react-i18next</a> will fallback to the <code>defaultLanguage</code> if the browser&#39;s detected language is not included in the array of <code>languages</code>.</p><p>If you want to fallback to a different language in the <code>languages</code> array, you can set the <code>fallbackLanguage</code> option.</p><p>Now switching to <code>de</code> (German) should also work:</p><p><img src="app_1.jpg" alt="gatsby language switcher" title="locize © inweso GmbH"></p><p><strong>🥳 Awesome, you&#39;ve just created your first language switcher!</strong></p><h3 id="Internationalized-links"><a href="#Internationalized-links" class="headerlink" title="Internationalized links "></a>Internationalized links <a name="i18n-link"></a></h3><p>Let&#39;s create a second page...</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; graphql &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;../components/layout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SecondPage = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = useTranslation();</span><br><span class="line">  <span class="keyword">const</span> [count, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Seo</span> <span class="attr">title</span>=<span class="string">&#123;t(</span>&#x27;<span class="attr">title</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Page two<span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;welcome&quot;</span>&gt;</span>Welcome to page 2<span class="tag">&lt;/<span class="name">Trans</span>&gt;</span> (&#123;props.path&#125;)</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;/* ... */&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SecondPage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> query = graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query ($language: String!) &#123;</span></span><br><span class="line"><span class="string">    locales: allLocale(</span></span><br><span class="line"><span class="string">      filter: &#123; ns: &#123; in: [&quot;page-2&quot;] &#125;, language: &#123; eq: $language &#125; &#125;</span></span><br><span class="line"><span class="string">    ) &#123;</span></span><br><span class="line"><span class="string">      edges &#123;</span></span><br><span class="line"><span class="string">        node &#123;</span></span><br><span class="line"><span class="string">          ns</span></span><br><span class="line"><span class="string">          data</span></span><br><span class="line"><span class="string">          language</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>A new namespace:<br /><code>locales/en/page-2.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Page two&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span>: <span class="string">&quot;Welcome to page 2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>locales/de/page-2.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Seite zwei&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span>: <span class="string">&quot;Willkommen auf Seite 2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>...and link to that page from the first one:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link, Trans, useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; graphql &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> IndexPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = useTranslation();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Seo</span> <span class="attr">title</span>=<span class="string">&#123;t(</span>&#x27;<span class="attr">seo</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hi people<span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123; /* ... */&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/page-2/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;goToPage2&quot;</span>&gt;</span>Go to page 2<span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> IndexPage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> query = graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query ($language: String!) &#123;</span></span><br><span class="line"><span class="string">    locales: allLocale(</span></span><br><span class="line"><span class="string">      filter: &#123; ns: &#123; in: [&quot;index&quot;] &#125;, language: &#123; eq: $language &#125; &#125;</span></span><br><span class="line"><span class="string">    ) &#123;</span></span><br><span class="line"><span class="string">      edges &#123;</span></span><br><span class="line"><span class="string">        node &#123;</span></span><br><span class="line"><span class="string">          ns</span></span><br><span class="line"><span class="string">          data</span></span><br><span class="line"><span class="string">          language</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>A new translation key for <code>locales/en/index.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;seo&quot;</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Hi people&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;goToPage2&quot;</span>: <span class="string">&quot;Go to page 2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>locales/de/index.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;seo&quot;</span>: <span class="string">&quot;Startseite&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Hallo Leute&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;goToPage2&quot;</span>: <span class="string">&quot;Gehen Sie zu Seite 2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>Link</code> component exported from <code>gatsby-plugin-react-i18next</code>automatically links to the correct language.<br />The <code>Link</code> component is identical to Gatsby Link component except that you can provide an additional language prop to create a link to a page with a different language.</p><h3 id="Interpolation-and-Pluralization"><a href="#Interpolation-and-Pluralization" class="headerlink" title="Interpolation and Pluralization "></a>Interpolation and Pluralization <a name="interpolation-pluralization"></a></h3><p>i18next goes beyond just providing the standard i18n features.But for sure it&#39;s able to handle <a href="https://www.i18next.com/translation-function/plurals">plurals</a> and <a href="https://www.i18next.com/translation-function/interpolation">interpolation</a>.</p><p>Let&#39;s count each time a button gets clicked:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; graphql &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;../components/layout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SecondPage = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = useTranslation();</span><br><span class="line">  <span class="keyword">const</span> [count, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Seo</span> <span class="attr">title</span>=<span class="string">&#123;t(</span>&#x27;<span class="attr">title</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Page two<span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;welcome&quot;</span>&gt;</span>Welcome to page 2<span class="tag">&lt;/<span class="name">Trans</span>&gt;</span> (&#123;props.path&#125;)</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">          setCounter(count + 1);</span></span><br><span class="line"><span class="xml">        &#125;&#125;&gt;&#123;</span></span><br><span class="line"><span class="xml">          t(&#x27;counter&#x27;, &#123; count &#125;)</span></span><br><span class="line"><span class="xml">        &#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;/* ... */&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SecondPage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> query = graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query ($language: String!) &#123;</span></span><br><span class="line"><span class="string">    locales: allLocale(</span></span><br><span class="line"><span class="string">      filter: &#123; ns: &#123; in: [&quot;page-2&quot;] &#125;, language: &#123; eq: $language &#125; &#125;</span></span><br><span class="line"><span class="string">    ) &#123;</span></span><br><span class="line"><span class="string">      edges &#123;</span></span><br><span class="line"><span class="string">        node &#123;</span></span><br><span class="line"><span class="string">          ns</span></span><br><span class="line"><span class="string">          data</span></span><br><span class="line"><span class="string">          language</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>...and extending the translation resources:<br /><code>locales/en/page-2.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Page two&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span>: <span class="string">&quot;Welcome to page 2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_one&quot;</span>: <span class="string">&quot;clicked one time&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_other&quot;</span>: <span class="string">&quot;clicked &#123;&#123;count&#125;&#125; time&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_zero&quot;</span>: <span class="string">&quot;Click me!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>locales/de/page-2.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Seite zwei&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span>: <span class="string">&quot;Willkommen auf Seite 2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_one&quot;</span>: <span class="string">&quot;einmal angeklickt&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_other&quot;</span>: <span class="string">&quot;&#123;&#123;count&#125;&#125; Mal geklickt&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_zero&quot;</span>: <span class="string">&quot;Klick mich!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Based on the count value i18next will choose the correct plural form.</p><p>i18next provides also the ability to have a special translation for <code>&#123;count: 0&#125;</code>, so that a more natural language can be used. If the <code>count</code> is <code>0</code>, and a <code>_zero</code> entry is present, then it will be used instead of the regular language plural suffix (<code>_other</code>).</p><p>Read more about <a href="https://www.i18next.com/translation-function/plurals">pluralization</a> and <a href="https://www.i18next.com/translation-function/interpolation">interpolation</a> in the <a href="https://www.i18next.com/">official i18next documentation</a>.</p><p><img src="app_2.gif" alt="gatsby pluralization" title="locize © inweso GmbH"></p><p><em>💡 i18next is also able to handle languages with multiple plural forms, like arabic:</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// translation resources:</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;key_zero&quot;</span>: <span class="string">&quot;zero&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_one&quot;</span>: <span class="string">&quot;singular&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_two&quot;</span>: <span class="string">&quot;two&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_few&quot;</span>: <span class="string">&quot;few&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_many&quot;</span>: <span class="string">&quot;many&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_other&quot;</span>: <span class="string">&quot;other&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage:</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;); <span class="comment">// -&gt; &quot;zero&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">1</span>&#125;); <span class="comment">// -&gt; &quot;singular&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">2</span>&#125;); <span class="comment">// -&gt; &quot;two&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">3</span>&#125;); <span class="comment">// -&gt; &quot;few&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">4</span>&#125;); <span class="comment">// -&gt; &quot;few&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">5</span>&#125;); <span class="comment">// -&gt; &quot;few&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">11</span>&#125;); <span class="comment">// -&gt; &quot;many&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">99</span>&#125;); <span class="comment">// -&gt; &quot;many&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">100</span>&#125;); <span class="comment">// -&gt; &quot;other&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Why-are-my-plural-keys-not-working"><a href="#Why-are-my-plural-keys-not-working" class="headerlink" title="Why are my plural keys not working? "></a>Why are my plural keys not working? <a name="pluralsv4"></a></h4><p>Are you seeing this warning in the development console (<code>debug: true</code>)?</p><blockquote><p>i18next::pluralResolver: Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.</p></blockquote><p>With <a href="https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0">v21</a> i18next streamlined the suffix with the one used in the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules">Intl API</a>.In environments where the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules">Intl.PluralRules</a> API  is not available (like older Android devices), you may need to <a href="https://github.com/eemeli/intl-pluralrules">polyfill</a> the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules">Intl.PluralRules</a> API.In case it is not available it will fall back to the <a href="https://www.i18next.com/misc/json-format#i-18-next-json-v3">i18next JSON format v3</a> plural handling. And if your json is already using the new suffixes, your plural keys will probably not be shown.</p><p><em>tldr;</em></p><p><code>npm install intl-pluralrules</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;intl-pluralrules&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting "></a>Formatting <a name="formatting"></a></h3><p>Now, let’s check out how we can use different date formats with the help of <a href="https://www.i18next.com/">i18next</a> and <a href="https://moment.github.io/luxon">Luxon</a> to handle date and time.</p><p><code>npm install luxon</code></p><p>We like to have a footer displaying the current date:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DateTime &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Layout = <span class="function">(<span class="params">&#123; children &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t, i18n &#125; = useI18next();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// defining custom formatters is normally done immediately after the i18next.init call, but with gatsby-plugin-react-i18next is not possible, so let&#x27;s add it here</span></span><br><span class="line">  <span class="keyword">if</span> (!i18n.services.formatter.date_huge) &#123;</span><br><span class="line">    i18n.services.formatter.add(<span class="string">&#x27;date_huge&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime.DATE_HUGE)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">margin:</span> &#x27;<span class="attr">0</span> <span class="attr">auto</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">maxWidth:</span> <span class="attr">960</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">padding:</span> &#x27;<span class="attr">0</span> <span class="attr">1.0875rem</span> <span class="attr">1.45rem</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">main</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> <span class="attr">50</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">              t(&#x27;footer&#x27;, &#123; date: new Date() &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Layout;</span><br></pre></td></tr></table></figure><p>Import luxon and define a format function, like documented in the <a href="https://www.i18next.com/translation-function/formatting">documentation</a> and add the new translation key:</p><p><code>locales/en/common.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;footer&quot;</span>: <span class="string">&quot;Today is &#123;&#123;date, date_huge&#125;&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>locales/de/common.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;footer&quot;</span>: <span class="string">&quot;Heute ist &#123;&#123;date, date_huge&#125;&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>😎 Cool, now we have a language-specific date formatting!</strong></p><p>English:<img src="app_3.jpg" alt="gatsby english" title="locize © inweso GmbH"></p><p>German:<img src="app_4.jpg" alt="gatsby german" title="locize © inweso GmbH"></p><h3 id="Context"><a href="#Context" class="headerlink" title="Context "></a>Context <a name="context"></a></h3><p>What about a specific greeting message based on the current daytime? i.e. morning, evening, etc.This is possible thanks to the <a href="https://www.i18next.com/translation-function/context">context</a> feature of i18next.</p><p>Let&#39;s create a <code>getGreetingTime</code> function and use the result as context information for our footer translation:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DateTime &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getGreetingTime = <span class="function">(<span class="params">d = DateTime.now()</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> split_afternoon = <span class="number">12</span>; <span class="comment">// 24hr time to split the afternoon</span></span><br><span class="line">  <span class="keyword">const</span> split_evening = <span class="number">17</span>; <span class="comment">// 24hr time to split the evening</span></span><br><span class="line">  <span class="keyword">const</span> currentHour = <span class="built_in">parseFloat</span>(d.toFormat(<span class="string">&#x27;hh&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (currentHour &gt;= split_afternoon &amp;&amp; currentHour &lt;= split_evening) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;afternoon&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentHour &gt;= split_evening) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;evening&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;morning&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Layout = <span class="function">(<span class="params">&#123; children &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t, i18n &#125; = useI18next();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// defining custom formatters is normally done immediately after the i18next.init call, but with gatsby-plugin-react-i18next is not possible, so let&#x27;s add it here</span></span><br><span class="line">  <span class="keyword">if</span> (!i18n.services.formatter.date_huge) &#123;</span><br><span class="line">    i18n.services.formatter.add(<span class="string">&#x27;date_huge&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime.DATE_HUGE)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">margin:</span> &#x27;<span class="attr">0</span> <span class="attr">auto</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">maxWidth:</span> <span class="attr">960</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">padding:</span> &#x27;<span class="attr">0</span> <span class="attr">1.0875rem</span> <span class="attr">1.45rem</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">main</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> <span class="attr">50</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">              t(&#x27;footer&#x27;, &#123; date: new Date(), context: getGreetingTime() &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Layout;</span><br></pre></td></tr></table></figure><p>And add some context-specific translations keys:</p><p><code>locales/en/common.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;footer&quot;</span>: <span class="string">&quot;Today is &#123;&#123;date, date_huge&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;footer_afternoon&quot;</span>: <span class="string">&quot;Good afternoon! It&#x27;s &#123;&#123;date, date_huge&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;footer_evening&quot;</span>: <span class="string">&quot;Good evening! Today was the &#123;&#123;date, date_huge&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;footer_morning&quot;</span>: <span class="string">&quot;Good morning! Today is &#123;&#123;date, date_huge&#125;&#125; | Have a nice day!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>locales/de/common.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;footer&quot;</span>: <span class="string">&quot;Heute ist &#123;&#123;date, date_huge&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;footer_afternoon&quot;</span>: <span class="string">&quot;Guten Nachmittag! Es ist &#123;&#123;date, date_huge&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;footer_evening&quot;</span>: <span class="string">&quot;Guten Abend! Heute war der &#123;&#123;date, date_huge&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;footer_morning&quot;</span>: <span class="string">&quot;Guten Morgen! Heute ist &#123;&#123;date, date_huge&#125;&#125; | Einen schönen Tag noch!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>😁 Yeah, It works!</strong></p><p><img src="app_5.jpg" alt="gatsby translations" title="locize © inweso GmbH"></p><h3 id="Key-extraction"><a href="#Key-extraction" class="headerlink" title="Key extraction "></a>Key extraction <a name="extract"></a></h3><p>Thanks to the <a href="https://i18next-extract.netlify.app/">babel-plugin-i18next-extract</a> you can automatically extract translations inside the <code>t</code> function and <code>Trans</code> component from your pages and save them in the namespace files.</p><p>It works like this:<br />First, install the required dependencies:</p><p><code>npm install @babel/cli @babel/plugin-transform-typescript babel-plugin-i18next-extract</code></p><p>Create or update the <code>babel-extract.config.js</code> file (do NOT name it <code>babel.config.js</code>, or it will be used by gatsby):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defaultLanguage &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./languages&#x27;</span>);</span><br><span class="line">process.env.NODE_ENV = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&#x27;babel-preset-gatsby&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;i18next-extract&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">keyAsDefaultValue</span>: [defaultLanguage],</span><br><span class="line">        <span class="attr">useI18nextDefaultValue</span>: [defaultLanguage],</span><br><span class="line">        <span class="comment">// discardOldKeys: true,</span></span><br><span class="line">        <span class="attr">defaultNS</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">        <span class="attr">outputPath</span>: <span class="string">&#x27;locales/&#123;&#123;locale&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span>,</span><br><span class="line">        <span class="attr">customTransComponents</span>: [[<span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>, <span class="string">&#x27;Trans&#x27;</span>]],</span><br><span class="line">        <span class="attr">compatibilityJSON</span>: <span class="string">&#x27;v4&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">overrides</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: [<span class="string">`**/*.ts`</span>, <span class="string">`**/*.tsx`</span>],</span><br><span class="line">      <span class="attr">plugins</span>: [[<span class="string">`@babel/plugin-transform-typescript`</span>, &#123;<span class="attr">isTSX</span>: <span class="literal">true</span>&#125;]]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Add a script to your <code>package.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;extract&quot;</span>: <span class="string">&quot;babel --config-file ./babel-extract.config.js -o tmp/chunk.js &#x27;src/**/*.&#123;js,jsx,ts,tsx&#125;&#x27; &amp;&amp; rm -rf tmp&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you want to extract translations per page for a specific namespace, you can add a special comment at the beginning of the page:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i18next-extract-mark-ns-start index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>fyi: There are also other <a href="https://i18next-extract.netlify.app/#/comment-hints">comment hints</a> you can use.</p><p>Prepared all your pages? Nice, so let&#39;s try that:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i18next-extract-mark-ns-start index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Link, Trans, useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; graphql, Link <span class="keyword">as</span> GatsbyLink &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; StaticImage &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby-plugin-image&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;../components/layout&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Seo <span class="keyword">from</span> <span class="string">&#x27;../components/seo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> IndexPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = useTranslation();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Layout</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Seo</span> <span class="attr">title</span>=<span class="string">&#123;t(</span>&#x27;<span class="attr">seo</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hi people<span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;welcome&quot;</span>&gt;</span>Welcome to your new Gatsby site.<span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;cta&quot;</span>&gt;</span>Now go build something great.<span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/page-2/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;goToPage2&quot;</span>&gt;</span>Go to page 2<span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> IndexPage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> query = graphql<span class="string">`</span></span><br><span class="line"><span class="string">  query ($language: String!) &#123;</span></span><br><span class="line"><span class="string">    locales: allLocale(</span></span><br><span class="line"><span class="string">      filter: &#123; ns: &#123; in: [&quot;common&quot;, &quot;index&quot;] &#125;, language: &#123; eq: $language &#125; &#125;</span></span><br><span class="line"><span class="string">    ) &#123;</span></span><br><span class="line"><span class="string">      edges &#123;</span></span><br><span class="line"><span class="string">        node &#123;</span></span><br><span class="line"><span class="string">          ns</span></span><br><span class="line"><span class="string">          data</span></span><br><span class="line"><span class="string">          language</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>Running <code>npm run extract</code> will now add that new <code>cta</code> key to the namespace file:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;cta&quot;</span>: <span class="string">&quot;Now go build something great.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;goToPage2&quot;</span>: <span class="string">&quot;Go to page 2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;seo&quot;</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Hi people&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span>: <span class="string">&quot;Welcome to your new Gatsby site.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Extra-power"><a href="#Extra-power" class="headerlink" title="Extra power "></a>Extra power <a name="extra-power"></a></h3><p><strong>This is all already great, but we can do even more!</strong></p><p>It would be nice, to have an overview showing which translations are missing and which files are completely translated...<br />And think about when having extracted new keys, they would automatically be translated?<br />To make this true we need a <a href="../i18n-l10n-t9n-tms/">translation management</a>...</p><p>By sending the translations to some translators or translator agency you have more control and a direct contact with them. But this also means more work for you.This is the traditional way. But be aware, sending files around creates always an overhead.</p><blockquote><p>Does a better option exist?</p></blockquote><h4 id="For-sure"><a href="#For-sure" class="headerlink" title="For sure! "></a>For sure! <a name="for-sure"></a></h4><p>i18next helps to get the application translated, and this is great - but there is more to it.</p><ul><li>How do you integrate any translation services / agency?</li><li>How do you keep track of new or removed content?</li><li>How do you handle proper versioning?</li><li>and a lot more...</li></ul><p><strong>Looking for something like this❓</strong></p><ul><li><a href="https://docs.locize.com/integration/instrumenting-your-code#i-18-next">Easy to integrate</a></li><li>Continuous deployment? <a href="https://locize.com/how-it-works.html#continouslocalization">Continuous localization</a>!</li><li>Manage the translation files with ease</li><li><a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators">Order professional translations</a></li><li>Analytics &amp; Statistics</li><li><a href="https://docs.locize.com/more/versioning">Versioning of your translations</a></li><li><a href="https://docs.locize.com/whats-inside/auto-machine-translation">Automatic and On-Demand Machine Translation</a></li><li><a href="https://docs.locize.com/more/general-questions/how-is-locize-different-from-the-alternatives#service-lock-in">Riskfree: Take your data with you</a></li><li><a href="https://locize.com/pricing.html">Transparent and fair pricing</a></li><li>and a lot more...</li></ul><p><img src="transform_your_localization_process_small.jpg" alt="transform the localization process" title="locize © inweso GmbH"></p><h4 id="How-does-this-look-like"><a href="#How-does-this-look-like" class="headerlink" title="How does this look like? "></a>How does this look like? <a name="how-look"></a></h4><p>First you need to signup at <a href="https://locize.app/register">locize</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a>.Then <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a> in locize and add all required languages. And finally you can add your translations either by using the <a href="https://github.com/locize/react-tutorial#use-the-locize-cli">cli</a> or by <a href="https://docs.locize.com/more/general-questions/how-to-import-translations-from-a-file">importing the individual json files</a> or via <a href="https://docs.locize.com/integration/api#update-remove-translations">API</a>.</p><p>Now let&#39;s install the <a href="https://github.com/locize/locize-cli">locize-cli</a>:</p><p><code>npm install -g locize-cli</code></p><p>We&#39;ll prepare a new script that will synchronize our local changes with locize.And also an optional second script that will just download the newest translations from locize.Make sure you use your project-id and api-key:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;syncLocales&quot;</span>: <span class="string">&quot;locize sync --project-id=5d47a999-5c34-4161-a389-bc2189507a50 --ver=latest --api-key=42ca9d58-18da-44c7-8dd3-8f59b8c35bda --path=./locales&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;downloadLocales&quot;</span>: <span class="string">&quot;locize download --project-id=5d47a999-5c34-4161-a389-bc2189507a50 --ver=latest --clean=true --path=./locales&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use the <code>npm run syncLocales</code> script to synchronize your local repository with what is published on locize.</p><p>Alternatively, you can also use the <code>npm run downloadLocales</code> script to always download the published locize translations to your local repository before bundling your app.</p><p>If we now add a new translation key, like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Trans i18nKey=<span class="string">&quot;newKey&quot;</span>&gt;<span class="built_in">this</span> will be added automatically after <span class="string">&quot;extract&quot;</span> and <span class="string">&quot;syncLocales&quot;</span>&lt;/Trans&gt;</span><br></pre></td></tr></table></figure><p>and run <code>npm run export</code> and then <code>npm run syncLocales</code>, we get this:</p><p><code>locales/en/page-2.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;back&quot;</span>: <span class="string">&quot;Go back to the homepage&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_one&quot;</span>: <span class="string">&quot;clicked one time&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_other&quot;</span>: <span class="string">&quot;clicked &#123;&#123;count&#125;&#125; time&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_zero&quot;</span>: <span class="string">&quot;Click me!&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Page two&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span>: <span class="string">&quot;Welcome to page 2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;newKey&quot;</span>: <span class="string">&quot;this will be added automatically after \&quot;extract\&quot; and \&quot;syncLocales\&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>locales/de/page-2.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;back&quot;</span>: <span class="string">&quot;Gehen Sie zurück zur Startseite&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_one&quot;</span>: <span class="string">&quot;einmal angeklickt&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_other&quot;</span>: <span class="string">&quot;&#123;&#123;count&#125;&#125; Mal geklickt&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;counter_zero&quot;</span>: <span class="string">&quot;Klick mich!&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Seite zwei&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;welcome&quot;</span>: <span class="string">&quot;Willkommen auf Seite 2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;newKey&quot;</span>: <span class="string">&quot;dies wird automatisch nach \&quot;extract\&quot; und \&quot;syncLocales\&quot; hinzugefügt&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="locize_new_key.jpg" alt="new key" title="locize © inweso GmbH"></p><p><em>Thanks to the optionally enabled <a href="https://docs.locize.com/whats-inside/auto-machine-translation">automatic machine translation</a> option, new keys not only gets added to locize, while developing the app, but are also automatically translated into the target languages using machine translation.</em></p><p><img src="app_6.jpg" alt="gatsby translations" title="locize © inweso GmbH"></p><h4 id="👀-but-there-39-s-more-InContext-Editor"><a href="#👀-but-there-39-s-more-InContext-Editor" class="headerlink" title="👀 but there&#39;s more... (InContext Editor) "></a>👀 but there&#39;s more... (InContext Editor) <a name="more"></a></h4><p>With the help of the <a href="https://github.com/locize/locize">locize</a> plugin, you&#39;ll be able to use your app within the locize <a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>.</p><p>Want to see what this look like?</p><p>Ok, first install the locize dependency:</p><p><code>npm install locize</code></p><p>Then in the code (we choose our <code>layout.js</code> file) add this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; locizePlugin, setEditorLng &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Layout = <span class="function">(<span class="params">&#123; children &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t, i18n &#125; = useI18next();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// defining custom formatters is normally done immediately after the i18next.init call, but with gatsby-plugin-react-i18next is not possible, so let&#x27;s add it here</span></span><br><span class="line">  <span class="keyword">if</span> (!i18n.services.formatter.date_huge) &#123;</span><br><span class="line">    i18n.services.formatter.add(<span class="string">&#x27;date_huge&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime.DATE_HUGE)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// also the locize plugin normally is automatically configured, but here we need to do it that way</span></span><br><span class="line">    locizePlugin.init(i18n);</span><br><span class="line">    setEditorLng(i18n.resolvedLanguage);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">margin:</span> &#x27;<span class="attr">0</span> <span class="attr">auto</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">maxWidth:</span> <span class="attr">960</span>,</span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">padding:</span> &#x27;<span class="attr">0</span> <span class="attr">1.0875rem</span> <span class="attr">1.45rem</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">main</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> <span class="attr">50</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;</span></span><br><span class="line"><span class="xml">              t(&#x27;footer&#x27;, &#123; date: new Date(), context: getGreetingTime() &#125;)</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Layout;</span><br></pre></td></tr></table></figure><p>And in the <code>gatsby-config.js</code> add some new react options:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; languages, defaultLanguage &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./languages&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">resolve</span>: <span class="string">`gatsby-source-filesystem`</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/locales`</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">`locale`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">resolve</span>: <span class="string">&#x27;gatsby-plugin-react-i18next&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        languages,</span><br><span class="line">        defaultLanguage,</span><br><span class="line">        siteUrl,</span><br><span class="line">        <span class="attr">i18nextOptions</span>: &#123;</span><br><span class="line">          <span class="comment">// debug: true,</span></span><br><span class="line">          <span class="attr">fallbackLng</span>: defaultLanguage,</span><br><span class="line">          <span class="attr">supportedLngs</span>: languages,</span><br><span class="line">          <span class="attr">defaultNS</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">          <span class="attr">interpolation</span>: &#123;</span><br><span class="line">            <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">react</span>: &#123;</span><br><span class="line">            <span class="attr">bindI18n</span>: <span class="string">&#x27;languageChanged editorSaved&#x27;</span>, <span class="comment">// the editorSaved event will trigger a rerender</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then go to your locize project and define your in-context editor urls, like described <a href="https://docs.locize.com/different-views/incontext#setup-and-configuration">here</a>.</p><p><strong>The result will look like this:</strong><img src="in_context.gif" alt="i18next incontext" title="locize © inweso GmbH"></p><blockquote><p>Isn&#39;t this great?</p></blockquote><p><em>🧑‍💻 The complete code can be found <a href="https://github.com/locize/locize-gatsby-example">here</a>.</em></p><p>If you want to learn more basics about i18next, there&#39;s also an <a href="https://youtu.be/SA_9i4TtxLQ">i18next crash course video</a>.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/SA_9i4TtxLQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>I hope you’ve learned a few new things about <a href="https://github.com/microapps/gatsby-plugin-react-i18next">gatsby-plugin-react-i18next</a>, <a href="https://www.i18next.com/">i18next</a>, <a href="https://react.i18next.com/">React.js localization</a> and <a href="https://locize.com/">modern localization workflows</a>.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth trying the <a href="https://locize.com/">localization management platform - locize</a>.</p><p>The founders of <a href="https://locize.com/">locize</a> are also the creators of <a href="https://www.i18next.com/">i18next</a>. So by using <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.</p><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> react </tag>
            
            <tag> react-i18next </tag>
            
            <tag> gatsby </tag>
            
            <tag> gatsby-plugin-react-i18next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Localization - Internationalize with i18next</title>
      <link href="/blog/i18next-vue/"/>
      <url>/blog/i18next-vue/</url>
      
        <content type="html"><![CDATA[<meta name="robots" content="noindex, nofollow">![Vue Localization made easy with this step-by-step guide using i18next ✅](vue-localization.jpg "Vue Localization example")<p>Since <a href="https://vuejs.org/">Vue.js</a> is an approachable, performant and versatile framework for building web user interfaces, it also needs a best-in-class internationalization solution.You may know <a href="../give-vue-i18n-more-superpowers/">vue-i18n</a>, but for those who already know <a href="https://www.i18next.com/">i18next</a> a Vue.js adapted version of i18next would be more appropriate.</p><p>In this tutorial, we&#39;ll make use of the <a href="https://github.com/i18next/i18next-vue">i18next-vue</a> module.</p><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><ul><li><a href="#why-i18next">So first of all: &quot;Why i18next?&quot;</a></li><li><a href="#start">Let&#39;s get into it...</a><ul><li><a href="#prerequisites">Prerequisites</a></li><li><a href="#getting-started">Getting started</a></li><li><a href="#language-switcher">Language Switcher</a><ul><li><a href="#current-language">How to get the current language?</a></li></ul></li><li><a href="#interpolation-pluralization">Interpolation and Pluralization</a></li><li><a href="#formatting">Formatting</a></li><li><a href="#context">Context</a></li><li><a href="#separate">Separate translations from code</a></li><li><a href="#better-translation-management">Better translation management</a><ul><li><a href="#for-sure">For sure!</a></li><li><a href="#how-look">How does this look like?</a></li><li><a href="#save-missing">save missing translations</a></li><li><a href="#more">👀 but there&#39;s more...</a></li><li><a href="#production">📦 Let&#39;s prepare for production 🚀</a></li></ul></li></ul></li><li><a href="#congratulations">🎉🥳 Congratulations 🎊🎁</a></li></ul><h2 id="So-first-of-all-quot-Why-i18next-quot"><a href="#So-first-of-all-quot-Why-i18next-quot" class="headerlink" title="So first of all: &quot;Why i18next?&quot; "></a>So first of all: &quot;Why i18next?&quot; <a name="why-i18next"></a></h2><p>When it comes to Vue localization, one of the most popular is <a href="https://www.i18next.com/">i18next</a> with its Vue extension <a href="https://i18next.github.io/i18next-vue/">i18next-vue</a>, and for good reasons:</p><p><em>i18next was created in late 2011. It&#39;s older than most of the libraries you will use nowadays, including your main frontend technology (<a href="../react-i18next/">React</a>, <a href="../angular-i18next/">Angular</a>, Vue, ...).</em><br /><strong>➡️ sustainable</strong></p><p><em>Based on how long i18next already is available open source, there is no real i18n case that could not be solved with i18next.</em><br /><strong>➡️ mature</strong></p><p><em>i18next can be used in any javascript (and a few non-javascript - .net, elm, iOS, android, ruby, ...) environment, with any UI framework, with any <a href="../i18n-formats-javascript/">i18n format</a>, ... <a href="https://www.i18next.com/overview/supported-frameworks">the possibilities are endless</a>.</em><br /><strong>➡️ extensible</strong></p><p><em>There is a plenty of features and possibilities you&#39;ll get with i18next compared to other regular i18n frameworks.</em><br /><strong>➡️ rich</strong></p><p><a href="https://www.i18next.com/overview/comparison-to-others">Here</a> you can find more information about why i18next is special and <a href="https://locize.com/i18next.html#how-does-i18next-work">how it works</a>.</p><h2 id="Let-39-s-get-into-it"><a href="#Let-39-s-get-into-it" class="headerlink" title="Let&#39;s get into it... "></a>Let&#39;s get into it... <a name="start"></a></h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites "></a>Prerequisites <a name="prerequisites"></a></h3><p>Make sure you have Node.js and npm installed. It&#39;s best, if you have some experience with simple HTML, JavaScript and basic Vue.js, before jumping to <a href="https://i18next.github.io/i18next-vue/">i18next-vue</a>.</p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started "></a>Getting started <a name="getting-started"></a></h3><p>Take your own Vue project or create a new one, i.e. with <a href="https://cli.vuejs.org/guide/creating-a-project.html#vue-create">the vue create cli command</a>.</p><p><code>npx @vue/cli create vue-starter-project</code></p><p><img src="app_0.jpg" alt="learn vue logo" title="locize © inweso GmbH"></p><p>We are going to adapt the app to detect the language according to the user’s preference.And we will create a language switcher to make the content change between different languages.</p><p>Let&#39;s install some i18next dependencies:</p><ul><li><a href="https://www.i18next.com/">i18next</a></li><li><a href="https://github.com/i18next/i18next-vue">i18next-vue</a></li><li><a href="https://github.com/i18next/i18next-browser-languageDetector">i18next-browser-languagedetector</a></li></ul><p><code>npm install i18next i18next-vue i18next-browser-languagedetector</code></p><p>Let&#39;s prepare an <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> I18NextVue <span class="keyword">from</span> <span class="string">&#x27;i18next-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="comment">// here we will place our translations...</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(I18NextVue, &#123; i18next &#125;)</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let&#39;s import that file in our <code>main.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">i18n(createApp(App)).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Now let&#39;s try to move some hard-coded text out to the translations.</p><p>For the first text, we just use a simple <code>welcome</code> key to directly invoke the <code>$t</code> function. The <code>$t</code> is more or less the same as <a href="https://www.i18next.com/overview/api#t"><code>i18next.t</code></a>.</p><p>For the second text, we will use the <a href="https://vuejs.org/guide/essentials/template-syntax.html#raw-html"><code>v-html</code> directive</a> to directly output real HTML.</p><blockquote><p><strong>Security Warning</strong><br />Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. Only use <code>v-html</code> on trusted content and never on user-provided content.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $t(&#x27;welcome&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;$t(&#x27;descr&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;TranslationShowCase&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>The texts are now part of the translation resources:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> I18NextVue <span class="keyword">from</span> <span class="string">&#x27;i18next-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">welcome</span>: <span class="string">&#x27;Welcome to Your Vue.js App&#x27;</span>,</span><br><span class="line">          <span class="attr">descr</span>: <span class="string">&#x27;For a guide and recipes on how to configure / customize &#x27;</span></span><br><span class="line">            + <span class="string">&#x27;this project,&lt;br&gt;check out the &#x27;</span></span><br><span class="line">            + <span class="string">&#x27;&lt;a href=&quot;https://cli.vuejs.org&quot; target=&quot;_blank&quot; &#x27;</span></span><br><span class="line">            + <span class="string">&#x27;rel=&quot;noopener&quot;&gt;vue-cli documentation&lt;/a&gt;.&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(I18NextVue, &#123; i18next &#125;)</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Language-Switcher"><a href="#Language-Switcher" class="headerlink" title="Language Switcher "></a>Language Switcher <a name="language-switcher"></a></h3><p>Now let&#39;s define a language switcher:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $t(&#x27;welcome&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;$t(&#x27;descr&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;languages&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;(lng, index) in Object.keys(languages)&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;lng&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18next.resolvedLanguage !== lng&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$i18next.changeLanguage(lng)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;&#123; languages[lng].nativeName &#125;&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18next.resolvedLanguage === lng&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;&#123; languages[lng].nativeName &#125;&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;index &lt; (Object.keys(languages).length - 1)&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span>|<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;TranslationShowCase&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  data () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">languages</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">en</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;English&#x27;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">de</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;Deutsch&#x27;</span> &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>And also add some translations for the new language:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> I18NextVue <span class="keyword">from</span> <span class="string">&#x27;i18next-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">welcome</span>: <span class="string">&#x27;Welcome to Your Vue.js App&#x27;</span>,</span><br><span class="line">          <span class="attr">descr</span>: <span class="string">&#x27;For a guide and recipes on how to configure / customize &#x27;</span></span><br><span class="line">            + <span class="string">&#x27;this project,&lt;br&gt;check out the &#x27;</span></span><br><span class="line">            + <span class="string">&#x27;&lt;a href=&quot;https://cli.vuejs.org&quot; target=&quot;_blank&quot; &#x27;</span></span><br><span class="line">            + <span class="string">&#x27;rel=&quot;noopener&quot;&gt;vue-cli documentation&lt;/a&gt;.&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">de</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">welcome</span>: <span class="string">&#x27;Willkommen zu Deiner Vue.js App&#x27;</span>,</span><br><span class="line">          <span class="attr">descr</span>: <span class="string">&#x27;Eine Anleitung und Rezepte zum Konfigurieren/Anpassen &#x27;</span></span><br><span class="line">            + <span class="string">&#x27;dieses Projekts findest du&lt;br&gt;in der &#x27;</span></span><br><span class="line">            + <span class="string">&#x27;&lt;a href=&quot;https://cli.vuejs.org&quot; target=&quot;_blank&quot; &#x27;</span></span><br><span class="line">            + <span class="string">&#x27;rel=&quot;noopener&quot;&gt;vue-cli-Dokumentation&lt;/a&gt;.&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(I18NextVue, &#123; i18next &#125;)</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="app_1.jpg" alt="vue language switcher" title="locize © inweso GmbH"></p><p><strong>🥳 Awesome, you&#39;ve just created your first language switcher!</strong></p><p>Thanks to <a href="https://github.com/i18next/i18next-browser-languageDetector">i18next-browser-languagedetector</a> now it tries to detect the browser language and automatically use that language if you&#39;ve provided the translations for it. The manually selected language in the language switcher is persisted in the localStorage, next time you visit the page, that language is used as the preferred language.</p><h4 id="How-to-get-the-current-language"><a href="#How-to-get-the-current-language" class="headerlink" title="How to get the current language? "></a>How to get the current language? <a name="current-language"></a></h4><p>Since i18next v21 there is <a href="https://www.i18next.com/overview/api#resolvedlanguage"><code>i18next.resolvedLanguage</code></a>.It is set to the current resolved language and it can be used as the primary used language, for example in a language switcher.</p><p>If your detected language for example is <code>en-US</code> and you provided translations only for <code>en</code> <em>(fallbackLng)</em> instead <code>i18next.resolvedLanguage</code> will return <code>en</code>.</p><h5 id="i18next-language-vs-i18next-languages-vs-i18next-resolvedLanguage"><a href="#i18next-language-vs-i18next-languages-vs-i18next-resolvedLanguage" class="headerlink" title="i18next.language vs. i18next.languages vs. i18next.resolvedLanguage"></a>i18next.language vs. i18next.languages vs. i18next.resolvedLanguage</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* language */</span></span><br><span class="line">i18next.language;</span><br><span class="line"><span class="comment">// Is set to the current detected or set language.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* language */</span></span><br><span class="line">i18next.languages;</span><br><span class="line"><span class="comment">// Is set to an array of language codes that will be used to look up the translation value.</span></span><br><span class="line"><span class="comment">// When the language is set, this array is populated with the new language codes.</span></span><br><span class="line"><span class="comment">// Unless overridden, this array is populated with less-specific versions of that code for fallback purposes, followed by the list of fallback languages</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize with fallback languages</span></span><br><span class="line">i18next.init(&#123;</span><br><span class="line">  <span class="attr">fallbackLng</span>: [<span class="string">&quot;es&quot;</span>, <span class="string">&quot;fr&quot;</span>, <span class="string">&quot;en-US&quot;</span>, <span class="string">&quot;dev&quot;</span>]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// change the language</span></span><br><span class="line">i18next.changeLanguage(<span class="string">&quot;en-US-xx&quot;</span>);</span><br><span class="line"><span class="comment">// new language and its more generic forms, followed by fallbacks</span></span><br><span class="line">i18next.languages; <span class="comment">// [&quot;en-US-xx&quot;, &quot;en-US&quot;, &quot;en&quot;, &quot;es&quot;, &quot;fr&quot;, &quot;dev&quot;]</span></span><br><span class="line"><span class="comment">// change the language again</span></span><br><span class="line">i18next.changeLanguage(<span class="string">&quot;de-DE&quot;</span>);</span><br><span class="line"><span class="comment">// previous language is not retained</span></span><br><span class="line">i18next.languages; <span class="comment">// [&quot;de-DE&quot;, &quot;de&quot;, &quot;es&quot;, &quot;fr&quot;, &quot;en-US&quot;, &quot;dev&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* resolvedLanguage */</span></span><br><span class="line">i18next.resolvedLanguage;</span><br><span class="line"><span class="comment">// Is set to the current resolved language.</span></span><br><span class="line"><span class="comment">// It can be used as primary used language,</span></span><br><span class="line"><span class="comment">// for example in a language switcher.</span></span><br></pre></td></tr></table></figure><h3 id="Interpolation-and-Pluralization"><a href="#Interpolation-and-Pluralization" class="headerlink" title="Interpolation and Pluralization "></a>Interpolation and Pluralization <a name="interpolation-pluralization"></a></h3><p>i18next goes beyond just providing the standard i18n features.But for sure it&#39;s able to handle <a href="https://www.i18next.com/translation-function/plurals">plurals</a> and <a href="https://www.i18next.com/translation-function/interpolation">interpolation</a>.</p><p>If you like to see how this works, have a look at <a href="../react-i18next/#interpolation-pluralization">this section in that other blog post</a>.</p><h3 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting "></a>Formatting <a name="formatting"></a></h3><p>Also, <a href="https://www.i18next.com/translation-function/formatting">formatting</a> can be done.</p><p>If you like to see how this works, have a look at <a href="../react-i18next/#formatting">this section in that other blog post</a>.</p><h3 id="Context"><a href="#Context" class="headerlink" title="Context "></a>Context <a name="context"></a></h3><p>What about a specific greeting message based on the current daytime? i.e. morning, evening, etc.This is possible thanks to the <a href="https://www.i18next.com/translation-function/context">context</a> feature of i18next.</p><p>If you like to see how this works, have a look at <a href="../react-i18next/#context">this section in that other blog post</a>.</p><h3 id="Separate-translations-from-code"><a href="#Separate-translations-from-code" class="headerlink" title="Separate translations from code "></a>Separate translations from code <a name="separate"></a></h3><p>Having the translations in our <code>i18n.js</code> file works, but is not that suitable to work with, for translators.Let&#39;s separate the translations from the code and place them in dedicated json files.</p><p>Because this is a web application, <a href="https://github.com/i18next/i18next-http-backend">i18next-http-backend</a> will help us to do so.</p><p><code>npm install i18next-http-backend</code></p><p>Move the translations to the public folder:</p><p><img src="public_locales.jpg" alt="public locales" title="locize © inweso GmbH"></p><p>Adapt the <code>i18n.js</code> file to use the <code>i18next-http-backend</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> I18NextVue <span class="keyword">from</span> <span class="string">&#x27;i18next-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-http-backend&#x27;</span></span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  <span class="comment">// i18next-http-backend</span></span><br><span class="line">  <span class="comment">// loads translations from your server</span></span><br><span class="line">  <span class="comment">// https://github.com/i18next/i18next-http-backend</span></span><br><span class="line">  .use(Backend)</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(I18NextVue, &#123; i18next &#125;)</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the translations are loaded asynchronously.If you have slow network connectivity, you may notice until the translations are loaded only the i18n keys are shown.</p><p>To prevent this, we make use of the new <a href="https://vuejs.org/guide/built-ins/suspense.html">Suspense</a> functionality of Vue.js.</p><p>First, let&#39;s adapt the <code>i18n.js</code> file, by exporting the i18next init promise:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> I18NextVue <span class="keyword">from</span> <span class="string">&#x27;i18next-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-http-backend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span></span><br><span class="line">  i18nextPromise = i18next</span><br><span class="line">  <span class="comment">// i18next-http-backend</span></span><br><span class="line">  <span class="comment">// loads translations from your server</span></span><br><span class="line">  <span class="comment">// https://github.com/i18next/i18next-http-backend</span></span><br><span class="line">  .use(Backend)</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(I18NextVue, &#123; i18next &#125;)</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>...and use that promise in the <code>App.vue</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">TranslationShowCase</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TranslationShowCase <span class="keyword">from</span> <span class="string">&#x27;./components/TranslationShowCase.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; i18nextPromise &#125; <span class="keyword">from</span> <span class="string">&#x27;./i18n.js&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    TranslationShowCase</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// used in combination with Suspense.</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// useful when translations are not in-memory...</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">async</span> <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">await</span> i18nextPromise</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Let&#39;s create a new file: i.e. <code>Suspenser.vue</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;Suspenser&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    App</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>And use that in your <code>main.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./Suspenser.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">i18n(createApp(App)).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Now, as long as your translations get loaded you&#39;ll see the fallback template:<img src="app_2.jpg" title="locize © inweso GmbH"></p><p>Now your app looks still the same, but your translations are separated.If you want to support a new language, you just create a new folder and a new translation json file.This gives you the possibility to send the translations to some translators.Or if you&#39;re working with a translation management system you can just <a href="https://github.com/locize/react-tutorial#use-the-locize-cli">synchronize the files with a cli</a>.</p><h3 id="Better-translation-management"><a href="#Better-translation-management" class="headerlink" title="Better translation management "></a>Better translation management <a name="better-translation-management"></a></h3><p>By sending the translations to some translators or translator agencies you have more control and a direct contact with them. But this also means more work for you.This is a traditional way. But be aware sending files around creates always an overhead.</p><blockquote><p>Does a better option exist?</p></blockquote><h4 id="For-sure"><a href="#For-sure" class="headerlink" title="For sure! "></a>For sure! <a name="for-sure"></a></h4><p>i18next helps to get the application translated, and this is great - but there is more to it.</p><ul><li>How do you integrate any translation services / agency?</li><li>How do you keep track of new or removed content?</li><li>How do you handle proper versioning?</li><li>How do you deploy translation changes without deploying your complete application?</li><li>and a lot more...</li></ul><p><strong>Looking for something like this❓</strong></p><ul><li><a href="https://docs.locize.com/integration/instrumenting-your-code#i-18-next">Easy to integrate</a></li><li>Continuous deployment? <a href="https://locize.com/how-it-works.html#continouslocalization">Continuous localization</a>!</li><li>Manage the translation files with ease</li><li><a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators">Order professional translations</a></li><li>Analytics &amp; Statistics</li><li><a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">Profit from our content delivery network (CDN)</a></li><li><a href="https://docs.locize.com/more/versioning">Versioning of your translations</a></li><li><a href="https://docs.locize.com/whats-inside/auto-machine-translation">Automatic and On-Demand Machine Translation</a></li><li><a href="https://docs.locize.com/more/general-questions/how-is-locize-different-from-the-alternatives#service-lock-in">Riskfree: Take your data with you</a></li><li><a href="https://locize.com/pricing.html">Transparent and fair pricing</a></li><li>and a lot more...</li></ul><p><img src="transform_your_localization_process_small.jpg" alt="transform the localization process" title="locize © inweso GmbH"></p><h4 id="What-does-this-look-like"><a href="#What-does-this-look-like" class="headerlink" title="What does this look like? "></a>What does this look like? <a name="how-look"></a></h4><p>First, you need to signup at <a href="https://locize.app/register">locize</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a>.Then <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a> in locize and add your translations. You can add your translations either by using the <a href="https://github.com/locize/react-tutorial#use-the-locize-cli">cli</a> or by <a href="https://docs.locize.com/more/general-questions/how-to-import-translations-from-a-file">importing the individual json files</a> or via <a href="https://docs.locize.com/integration/api#update-remove-translations">API</a>.</p><p>Done so, we&#39;re going to replace <a href="https://github.com/i18next/i18next-http-backend">i18next-http-backend</a> with <a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a>.</p><p><code>npm install i18next-locize-backend</code></p><p>After having imported the translations to locize, delete the locales folder.</p><p>Adapt the <code>i18n.js</code> file to use the <code>i18next-locize-backend</code> and make sure you copy the project-id and api-key from within your locize project:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> I18NextVue <span class="keyword">from</span> <span class="string">&#x27;i18next-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;94c21299-0cf5-4ad3-92eb-91f36fc3f20f&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;bc8586d9-fceb-489c-86ac-2985393ed955&#x27;</span>, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span></span><br><span class="line">  i18nextPromise = i18next</span><br><span class="line">                    <span class="comment">// i18next-locize-backend</span></span><br><span class="line">                    <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">                    <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">                    .use(Backend)</span><br><span class="line">                    <span class="comment">// detect user language</span></span><br><span class="line">                    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">                    .use(LanguageDetector)</span><br><span class="line">                    <span class="comment">// init i18next</span></span><br><span class="line">                    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">                    .init(&#123;</span><br><span class="line">                      <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">                      <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">                      <span class="attr">backend</span>: locizeOptions</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(I18NextVue, &#123; i18next &#125;)</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a> offers functionality to retrieve the available languages directly from locize, let&#39;s use it:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $t(&#x27;welcome&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;$t(&#x27;descr&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123; $t(&#x27;new.key&#x27;, &#x27;this will be added automatically&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;languages&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;(lng, index) in Object.keys(languages)&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;lng&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18next.resolvedLanguage !== lng&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$i18next.changeLanguage(lng)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;&#123; languages[lng].nativeName &#125;&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18next.resolvedLanguage === lng&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            &#123;&#123; languages[lng].nativeName &#125;&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;index &lt; (Object.keys(languages).length - 1)&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span>|<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;TranslationShowCase&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  data () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">languages</span>: []</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">async</span> mounted () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.languages = <span class="keyword">await</span> i18next.services.backendConnector.backend.getLanguages()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="save-missing-translations"><a href="#save-missing-translations" class="headerlink" title="save missing translations "></a>save missing translations <a name="save-missing"></a></h4><p>Thanks to the use of the <a href="https://www.i18next.com/overview/configuration-options#missing-keys">saveMissing functionality</a>, new keys get added to locize automatically, while developing the app.</p><p>Just pass <code>saveMissing: true</code> in the i18next options:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> I18NextVue <span class="keyword">from</span> <span class="string">&#x27;i18next-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;94c21299-0cf5-4ad3-92eb-91f36fc3f20f&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;bc8586d9-fceb-489c-86ac-2985393ed955&#x27;</span>, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span></span><br><span class="line">  i18nextPromise = i18next</span><br><span class="line">                    <span class="comment">// i18next-locize-backend</span></span><br><span class="line">                    <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">                    <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">                    .use(Backend)</span><br><span class="line">                    <span class="comment">// detect user language</span></span><br><span class="line">                    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">                    .use(LanguageDetector)</span><br><span class="line">                    <span class="comment">// init i18next</span></span><br><span class="line">                    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">                    .init(&#123;</span><br><span class="line">                      <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">                      <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">                      <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">                      <span class="attr">saveMissing</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(I18NextVue, &#123; i18next &#125;)</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each time you&#39;ll use a new key, it will be sent to locize, i.e.:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i&gt;&#123;&#123; $t(<span class="string">&#x27;new.key&#x27;</span>, <span class="string">&#x27;this will be added automatically&#x27;</span>) &#125;&#125;&lt;/i&gt;</span><br></pre></td></tr></table></figure><p>will result in locize like this:</p><p><img src="missing_key.jpg" alt="missing key" title="locize © inweso GmbH"></p><h4 id="👀-but-there-39-s-more"><a href="#👀-but-there-39-s-more" class="headerlink" title="👀 but there&#39;s more... "></a>👀 but there&#39;s more... <a name="more"></a></h4><p>Thanks to the <a href="https://github.com/locize/locize-lastused">locize-lastused</a> plugin, you&#39;ll be able to <a href="https://docs.locize.com/guides-tips-and-tricks/unused-translations">find and filter in locize which keys are used or not used anymore</a>.</p><p>With the help of the <a href="https://github.com/locize/locize">locize</a> plugin, you&#39;ll be able to use your app within the locize <a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>.</p><p>Lastly, with the help of the <a href="https://docs.locize.com/whats-inside/auto-machine-translation">auto-machinetranslation workflow</a> and the use of the <a href="https://www.i18next.com/overview/configuration-options#missing-keys">saveMissing functionality</a>, new keys not only gets added to locize automatically, while developing the app, but are also automatically translated into the target languages using machine translation.</p><p><em>Check out this <a href="https://youtu.be/VfxBpSXarlU">video</a> to see what the automatic machine translation workflow looks like!</em></p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/VfxBpSXarlU" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><code>npm install locize-lastused locize</code></p><p>use them in <code>i18n.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> I18NextVue <span class="keyword">from</span> <span class="string">&#x27;i18next-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LastUsed <span class="keyword">from</span> <span class="string">&#x27;locize-lastused&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; locizePlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;94c21299-0cf5-4ad3-92eb-91f36fc3f20f&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;bc8586d9-fceb-489c-86ac-2985393ed955&#x27;</span>, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span></span><br><span class="line">  i18nextPromise = i18next</span><br><span class="line">                    <span class="comment">// locize-lastused</span></span><br><span class="line">                    <span class="comment">// sets a timestamp of last access on every translation segment on locize</span></span><br><span class="line">                    <span class="comment">// -&gt; safely remove the ones not being touched for weeks/months</span></span><br><span class="line">                    <span class="comment">// https://github.com/locize/locize-lastused</span></span><br><span class="line">                    .use(LastUsed)</span><br><span class="line">                    <span class="comment">// locize-editor</span></span><br><span class="line">                    <span class="comment">// InContext Editor of locize</span></span><br><span class="line">                    .use(locizePlugin)</span><br><span class="line">                    <span class="comment">// i18next-locize-backend</span></span><br><span class="line">                    <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">                    <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">                    .use(Backend)</span><br><span class="line">                    <span class="comment">// detect user language</span></span><br><span class="line">                    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">                    .use(LanguageDetector)</span><br><span class="line">                    <span class="comment">// init i18next</span></span><br><span class="line">                    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">                    .init(&#123;</span><br><span class="line">                      <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">                      <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">                      <span class="attr">saveMissing</span>: <span class="literal">true</span>,</span><br><span class="line">                      <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">                      <span class="attr">locizeLastUsed</span>: locizeOptions</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(I18NextVue, &#123; i18next &#125;)</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://docs.locize.com/whats-inside/auto-machine-translation">Automatic machine translation</a>:</p><p><img src="missing_key_auto_mt.jpg" alt="missing key auto" title="locize © inweso GmbH"></p><p><a href="(https://docs.locize.com/guides-tips-and-tricks/unused-translations)">Last used translations filter</a>:</p><p><img src="last_used.jpg" alt="i18next last used" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>:</p><p><img src="in_context.jpg" alt="i18next incontext" title="locize © inweso GmbH"></p><h4 id="📦-Let-39-s-prepare-for-production-🚀"><a href="#📦-Let-39-s-prepare-for-production-🚀" class="headerlink" title="📦 Let&#39;s prepare for production 🚀 "></a>📦 Let&#39;s prepare for production 🚀 <a name="production"></a></h4><p>Now, we prepare the app for <a href="https://docs.locize.com/guides-tips-and-tricks/going-production">going to production</a>.</p><p>First, in locize, create a dedicated version for production. Do not enable auto publish for that version but publish manually or via <a href="https://docs.locize.com/integration/api#publish-version">API</a> or via <a href="https://github.com/locize/locize-cli#publish-version">CLI</a>.Lastly, <a href="https://docs.locize.com/more/caching">enable Cache-Control max-age​</a> for that production version.</p><p>Let&#39;s make use of the environment feature...</p><p>Lets&#39; create a default environment file and one for development and one for production:</p><p><code>.env</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_LOCIZE_PROJECTID=94c21299-0cf5-4ad3-92eb-91f36fc3f20f</span><br></pre></td></tr></table></figure><p><code>.env.development</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_LOCIZE_VERSION=latest</span><br><span class="line">VUE_APP_LOCIZE_APIKEY=bc8586d9-fceb-489c-86ac-2985393ed955</span><br></pre></td></tr></table></figure><p><code>.env.production</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VUE_APP_LOCIZE_VERSION=production</span><br></pre></td></tr></table></figure><p>Now let&#39;s adapt the <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> I18NextVue <span class="keyword">from</span> <span class="string">&#x27;i18next-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LastUsed <span class="keyword">from</span> <span class="string">&#x27;locize-lastused&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; locizePlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isProduction = process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: process.env.VUE_APP_LOCIZE_PROJECTID,</span><br><span class="line">  <span class="attr">apiKey</span>: process.env.VUE_APP_LOCIZE_APIKEY, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">version</span>: process.env.VUE_APP_LOCIZE_VERSION</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isProduction) &#123;</span><br><span class="line">  <span class="comment">// locize-lastused</span></span><br><span class="line">  <span class="comment">// sets a timestamp of last access on every translation segment on locize</span></span><br><span class="line">  <span class="comment">// -&gt; safely remove the ones not being touched for weeks/months</span></span><br><span class="line">  <span class="comment">// https://github.com/locize/locize-lastused</span></span><br><span class="line">  i18next.use(LastUsed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span></span><br><span class="line">  i18nextPromise = i18next</span><br><span class="line">                    <span class="comment">// locize-editor</span></span><br><span class="line">                    <span class="comment">// InContext Editor of locize</span></span><br><span class="line">                    .use(locizePlugin)</span><br><span class="line">                    <span class="comment">// i18next-locize-backend</span></span><br><span class="line">                    <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">                    <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">                    .use(Backend)</span><br><span class="line">                    <span class="comment">// detect user language</span></span><br><span class="line">                    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">                    .use(LanguageDetector)</span><br><span class="line">                    <span class="comment">// init i18next</span></span><br><span class="line">                    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">                    .init(&#123;</span><br><span class="line">                      <span class="attr">debug</span>: !isProduction,</span><br><span class="line">                      <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">                      <span class="attr">saveMissing</span>: !isProduction,</span><br><span class="line">                      <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">                      <span class="attr">locizeLastUsed</span>: locizeOptions</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">  app.use(I18NextVue, &#123; i18next &#125;)</span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, during development, you&#39;ll continue to save missing keys and make use of <code>lastused</code> feature. =&gt; <code>npm run serve</code></p><p>And in the production environment, <code>saveMissing</code> and <code>lastused</code> are disabled, and also the API key is not exposed. =&gt; <code>npm run build</code></p><p><a href="https://docs.locize.com/more/caching">Caching</a>:</p><p><img src="caching.jpg" alt="i18next caching" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/versioning#merging-versions">Merging versions</a>:</p><p><img src="overwrite_version.jpg" alt="overwrite version" title="locize © inweso GmbH"></p><p><em>🧑‍💻 The complete code can be found <a href="https://github.com/locize/locize-i18next-vue-example">here</a>.</em></p><p><em>Check also the <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY&t=294s">code integration part</a> in this <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY">YouTube video</a>.</em></p><p>There&#39;s also an <a href="https://youtu.be/SA_9i4TtxLQ">i18next crash course video</a>.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/SA_9i4TtxLQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>I hope you’ve learned a few new things about <a href="https://www.i18next.com/">i18next</a>, <a href="https://i18next.github.io/i18next-vue/">Vue.js localization</a> and <a href="https://locize.com/">modern localization workflows</a>.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth trying the <a href="https://locize.com/">localization management platform - locize</a>.</p><p>The founders of <a href="https://locize.com/">locize</a> are also the creators of <a href="https://www.i18next.com/">i18next</a>. So by using <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.</p><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> vue </tag>
            
            <tag> i18next-vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A svelte-i18n guide for internationalization</title>
      <link href="/blog/svelte-i18n/"/>
      <url>/blog/svelte-i18n/</url>
      
        <content type="html"><![CDATA[<p><img src="svelte-i18n.jpg" title="locize © inweso GmbH"></p><p>It’s joyful to work with <a href="https://svelte.dev/">Svelte</a>. The design is elegant and the robust first-party additions which can be coupled with, make building browser apps a pleasure.</p><p>The most famous i18n plugin for the progressive JavaScript framework <a href="https://svelte.dev/">Svelte</a> is probably <a href="https://github.com/kaisermann/svelte-i18n">svelte-i18n</a>.</p><blockquote><p><a href="https://kaisermann.me/">Christian Kaisermann</a>, thank you for this great i18n plugin!</p></blockquote><p>In this tutorial, we will add additional superpowers to <a href="https://github.com/kaisermann/svelte-i18n">svelte-i18n</a> 😉</p><p><img src="svelte-i18n-stats.jpg" title="locize © inweso GmbH"></p><h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><ul><li><a href="#start">So how does a basic svelte-i18n setup look like? Let&#39;s get into it...</a></li><li><a href="#svelte-i18n-better">Is it possible to make a svelte-18n setup even better?</a><ul><li><a href="#prerequisites">Prerequisites</a></li><li><a href="#getting-started">Getting started</a></li><li><a href="#language-switcher">Language Switcher</a></li><li><a href="#superpowers">Where are the additional superpowers?</a></li><li><a href="#how-look">How does this look like?</a></li><li><a href="#save-missing">save missing translations</a></li><li><a href="#in-context">in context editing</a></li><li><a href="#more">👀 but there&#39;s more...</a></li><li><a href="#congratulations">🎉🥳 Congratulations 🎊🎁</a></li></ul></li></ul><h2 id="So-how-does-a-basic-svelte-i18n-setup-look-like"><a href="#So-how-does-a-basic-svelte-i18n-setup-look-like" class="headerlink" title="So how does a basic svelte-i18n setup look like? "></a>So how does a basic svelte-i18n setup look like? <a name="start"></a></h2><h2 id="Let-39-s-get-into-it"><a href="#Let-39-s-get-into-it" class="headerlink" title="Let&#39;s get into it..."></a>Let&#39;s get into it...</h2><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites "></a>Prerequisites <a name="prerequisites"></a></h2><p>Make sure you have Node.js and npm installed. It&#39;s best, if you have some experience with simple HTML, JavaScript and basic Svelte, before jumping to <a href="https://github.com/kaisermann/svelte-i18n">svelte-i18n</a>.</p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started "></a>Getting started <a name="getting-started"></a></h2><p>Take your own Svelte project or create a <a href="https://svelte.dev/blog/the-easiest-way-to-get-started">new one</a>.</p><p>Let&#39;s install the svelte-i18n dependency:</p><p><code>npm install svelte-i18n</code></p><p>Create a <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addMessages, init, getLocaleFromNavigator &#125; <span class="keyword">from</span> <span class="string">&#x27;svelte-i18n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fallbackLocale = <span class="string">&#x27;en&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> lngs = [fallbackLocale, <span class="string">&#x27;de&#x27;</span>];</span><br><span class="line"></span><br><span class="line">addMessages(<span class="string">&#x27;en&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">welcome</span>: <span class="string">&#x27;Welcome to Your Svelte App&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">addMessages(<span class="string">&#x27;de&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">welcome</span>: <span class="string">&#x27;Willkommen zu deiner Svelte-App&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> initialLocale;</span><br><span class="line"><span class="keyword">const</span> detectedLocale = getLocaleFromNavigator(); <span class="comment">// the locale could be region specific, i.e. de-CH</span></span><br><span class="line"><span class="keyword">if</span> (lngs.indexOf(detectedLocale) &gt; -<span class="number">1</span>) initialLocale = detectedLocale;</span><br><span class="line"><span class="keyword">if</span> (!initialLocale &amp;&amp; detectedLocale.indexOf(<span class="string">&#x27;-&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> foundLng = lngs.find(<span class="function">(<span class="params">l</span>) =&gt;</span> detectedLocale.indexOf(l + <span class="string">&#x27;-&#x27;</span>) === <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (foundLng) initialLocale = foundLng;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!initialLocale) initialLocale = fallbackLocale;</span><br><span class="line"></span><br><span class="line">init(&#123;</span><br><span class="line">  fallbackLocale,</span><br><span class="line">  initialLocale</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Import the <code>i18n.js</code> file, in your <code>main.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.svelte&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./i18n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> App(&#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="built_in">document</span>.body,</span><br><span class="line">  <span class="attr">props</span>: &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app;</span><br></pre></td></tr></table></figure><p>Now let&#39;s try to use our first internationalized text.In your template import <code>_</code> from <code>svelte-i18n</code> and use it like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; _ &#125; <span class="keyword">from</span> <span class="string">&#x27;svelte-i18n&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;svelte logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/svelte-logo.png&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;$_(&#x27;welcome&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Nice! Now let&#39;s add another text element...</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; _ &#125; <span class="keyword">from</span> <span class="string">&#x27;svelte-i18n&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;svelte logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/svelte-logo.png&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;$_(&#x27;welcome&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;@html $_(&#x27;descr&#x27;, &#123; values: &#123; link: `<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://svelte.dev/tutorial&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>$&#123;$_(&#x27;doc&#x27;)&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>` &#125; &#125;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>And the corresponding translations:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">addMessages(<span class="string">&#x27;en&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">welcome</span>: <span class="string">&#x27;Welcome to Your Svelte App&#x27;</span>,</span><br><span class="line">  <span class="attr">descr</span>: <span class="string">&#x27;Visit the &#123;link&#125; to learn how to build Svelte apps.&#x27;</span>,</span><br><span class="line">  <span class="attr">doc</span>: <span class="string">&#x27;Svelte tutorial&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">addMessages(<span class="string">&#x27;de&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">welcome</span>: <span class="string">&#x27;Willkommen zu deiner Svelte-App&#x27;</span>,</span><br><span class="line">  <span class="attr">descr</span>: <span class="string">&#x27;Besuchen Sie den &#123;link&#125;, um zu erfahren, wie Sie Svelte-Apps erstellen.&#x27;</span>,</span><br><span class="line">  <span class="attr">doc</span>: <span class="string">&#x27;Svelte Tutorial&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now, depending on your browser language you should see something like this:</p><p><img src="app_0.jpg" title="locize © inweso GmbH"></p><h2 id="Language-Switcher"><a href="#Language-Switcher" class="headerlink" title="Language Switcher "></a>Language Switcher <a name="language-switcher"></a></h2><p>Now we will create a language switcher to make the content change between different languages.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; _, locale, locales &#125; <span class="keyword">from</span> <span class="string">&#x27;svelte-i18n&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;svelte logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/svelte-logo.png&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;$_(&#x27;welcome&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;@html $_(&#x27;descr&#x27;, &#123; values: &#123; link: `<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://svelte.dev/tutorial&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>$&#123;$_(&#x27;doc&#x27;)&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>` &#125; &#125;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">bind:value</span>=<span class="string">&#123;$locale&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;#each $locales as locale&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#123;locale&#125;</span>&gt;</span>&#123;locale&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;/each&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>And we will store the current chosen language in the localStorage:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; addMessages, init, getLocaleFromNavigator, locale &#125; <span class="keyword">from</span> <span class="string">&#x27;svelte-i18n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fallbackLocale = <span class="string">&#x27;en&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> lngs = [fallbackLocale, <span class="string">&#x27;de&#x27;</span>];</span><br><span class="line"></span><br><span class="line">addMessages(<span class="string">&#x27;en&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">welcome</span>: <span class="string">&#x27;Welcome to Your Svelte App&#x27;</span>,</span><br><span class="line">  <span class="attr">descr</span>: <span class="string">&#x27;Visit the &#123;link&#125; to learn how to build Svelte apps.&#x27;</span>,</span><br><span class="line">  <span class="attr">doc</span>: <span class="string">&#x27;Svelte tutorial&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">addMessages(<span class="string">&#x27;de&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">welcome</span>: <span class="string">&#x27;Willkommen zu deiner Svelte-App&#x27;</span>,</span><br><span class="line">  <span class="attr">descr</span>: <span class="string">&#x27;Besuchen Sie den &#123;link&#125;, um zu erfahren, wie Sie Svelte-Apps erstellen.&#x27;</span>,</span><br><span class="line">  <span class="attr">doc</span>: <span class="string">&#x27;Svelte Tutorial&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">locale.subscribe(<span class="function">(<span class="params">lng</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (lng) <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;svelte-i18n-locale&#x27;</span>, lng);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> initialLocale;</span><br><span class="line"><span class="keyword">const</span> detectedLocale = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;svelte-i18n-locale&#x27;</span>) || getLocaleFromNavigator(); <span class="comment">// the locale could be region specific, i.e. de-CH</span></span><br><span class="line"><span class="keyword">if</span> (lngs.indexOf(detectedLocale) &gt; -<span class="number">1</span>) initialLocale = detectedLocale;</span><br><span class="line"><span class="keyword">if</span> (!initialLocale &amp;&amp; detectedLocale.indexOf(<span class="string">&#x27;-&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> foundLng = lngs.find(<span class="function">(<span class="params">l</span>) =&gt;</span> detectedLocale.indexOf(l + <span class="string">&#x27;-&#x27;</span>) === <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (foundLng) initialLocale = foundLng;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!initialLocale) initialLocale = fallbackLocale;</span><br><span class="line"></span><br><span class="line">init(&#123;</span><br><span class="line">  fallbackLocale,</span><br><span class="line">  initialLocale</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="app_1.jpg" title="locize © inweso GmbH"></p><p><strong>🥳 Awesome, you&#39;ve just created your first language switcher!</strong></p><h2 id="Where-are-the-additional-superpowers"><a href="#Where-are-the-additional-superpowers" class="headerlink" title="Where are the additional superpowers? "></a>Where are the additional superpowers? <a name="superpowers"></a></h2><p>Let&#39;s meet <a href="https://github.com/locize/locizer">locizer</a>...</p><p><a href="https://github.com/locize/locizer">locizer</a> is a lightweight module to access data from your <a href="https://www.locize.com/">locize</a> project and use that inside your application.</p><blockquote><p><a href="../react-i18next/#for-sure">What is locize?</a></p></blockquote><h3 id="How-does-this-look-like"><a href="#How-does-this-look-like" class="headerlink" title="How does this look like? "></a>How does this look like? <a name="how-look"></a></h3><p>First you need to signup at <a href="https://locize.app/register">locize</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a>.Then <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a> in locize and add your translations. You can add your translations either by <a href="https://docs.locize.com/more/general-questions/how-to-import-translations-from-a-file">importing the individual json files</a> or via <a href="https://docs.locize.com/integration/api#update-remove-translations">API</a> or by using the <a href="https://github.com/locize/locize-cli">CLI</a>.</p><p>Having the translations in your code file works, but is not that suitable to work with, for translators.Using locize separates the translations from the code.</p><p>Having imported all translations should look like this:<img src="locize_imported.jpg" title="locize © inweso GmbH"></p><p>Done so, we&#39;re going to install <a href="https://github.com/locize/locizer">locizer</a>.</p><p><code>npm install locizer</code></p><p>Let&#39;s adapt the <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; register, init, getLocaleFromNavigator, locale &#125; <span class="keyword">from</span> <span class="string">&#x27;svelte-i18n&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> locizer <span class="keyword">from</span> <span class="string">&#x27;locizer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fallbackLocale = <span class="string">&#x27;en&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> lngs = [fallbackLocale, <span class="string">&#x27;de&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> namespace = <span class="string">&#x27;messages&#x27;</span>; <span class="comment">// your namespace name added in locize</span></span><br><span class="line"></span><br><span class="line">locizer.init(&#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;your-locize-project-id&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">lngs.forEach(<span class="function">(<span class="params">l</span>) =&gt;</span> &#123;</span><br><span class="line">  register(l, <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    locizer.load(namespace, l, <span class="function">(<span class="params">err, ns</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      resolve(ns);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">locale.subscribe(<span class="function">(<span class="params">lng</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (lng) <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;svelte-i18n-locale&#x27;</span>, lng);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> initialLocale;</span><br><span class="line"><span class="keyword">const</span> detectedLocale = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;svelte-i18n-locale&#x27;</span>) || getLocaleFromNavigator();</span><br><span class="line"><span class="keyword">if</span> (lngs.indexOf(detectedLocale) &gt; -<span class="number">1</span>) initialLocale = detectedLocale;</span><br><span class="line"><span class="keyword">if</span> (!initialLocale &amp;&amp; detectedLocale.indexOf(<span class="string">&#x27;-&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> foundLng = lngs.find(<span class="function">(<span class="params">l</span>) =&gt;</span> detectedLocale.indexOf(l + <span class="string">&#x27;-&#x27;</span>) === <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (foundLng) initialLocale = foundLng;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!initialLocale) initialLocale = fallbackLocale;</span><br><span class="line"></span><br><span class="line">init(&#123;</span><br><span class="line">  fallbackLocale,</span><br><span class="line">  initialLocale</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Since the translations are now loaded asynchronous, we may also want to show a loading message until the translations are ready:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; isLoading, _, locale, locales &#125; <span class="keyword">from</span> <span class="string">&#x27;svelte-i18n&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;svelte logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/svelte-logo.png&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;#if $isLoading&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      loading translations...</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;:else&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;$_(&#x27;welcome&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;@html $_(&#x27;descr&#x27;, &#123; values: &#123; link: `<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://svelte.dev/tutorial&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>$&#123;$_(&#x27;doc&#x27;)&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>` &#125; &#125;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">bind:value</span>=<span class="string">&#123;$locale&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;#each $locales as locale&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#123;locale&#125;</span>&gt;</span>&#123;locale&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;/each&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;/if&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Now your translations are fetched directly from <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">locize CDN</a>.<br />🙀 This means you can fix translations without having to change your code or redeploy your app. 🤩</p><h3 id="save-missing-translations"><a href="#save-missing-translations" class="headerlink" title="save missing translations "></a>save missing translations <a name="save-missing"></a></h3><blockquote><p>I wish newly added keys in the code, would automatically be saved to locize.</p></blockquote><p><strong>Your wish is my command!</strong></p><p>Extend the <code>i18n.js</code> file with the locize api-key and the <code>handleMissingMessage</code> function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; register, init, getLocaleFromNavigator, locale &#125; <span class="keyword">from</span> <span class="string">&#x27;svelte-i18n&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> locizer <span class="keyword">from</span> <span class="string">&#x27;locizer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fallbackLocale = <span class="string">&#x27;en&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> lngs = [fallbackLocale, <span class="string">&#x27;de&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> namespace = <span class="string">&#x27;messages&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> apiKey = <span class="string">&#x27;my-api-key&#x27;</span>; <span class="comment">// do not expose your API-Key in production</span></span><br><span class="line"></span><br><span class="line">locizer.init(&#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;your-locize-project-id&#x27;</span>,</span><br><span class="line">  apiKey</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">lngs.forEach(<span class="function">(<span class="params">l</span>) =&gt;</span> &#123;</span><br><span class="line">  register(l, <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    locizer.load(namespace, l, <span class="function">(<span class="params">err, ns</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      resolve(ns);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">locale.subscribe(<span class="function">(<span class="params">lng</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (lng) <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;svelte-i18n-locale&#x27;</span>, lng);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> initialLocale;</span><br><span class="line"><span class="keyword">const</span> detectedLocale = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;svelte-i18n-locale&#x27;</span>) || getLocaleFromNavigator();</span><br><span class="line"><span class="keyword">if</span> (lngs.indexOf(detectedLocale) &gt; -<span class="number">1</span>) initialLocale = detectedLocale;</span><br><span class="line"><span class="keyword">if</span> (!initialLocale &amp;&amp; detectedLocale.indexOf(<span class="string">&#x27;-&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> foundLng = lngs.find(<span class="function">(<span class="params">l</span>) =&gt;</span> detectedLocale.indexOf(l + <span class="string">&#x27;-&#x27;</span>) === <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (foundLng) initialLocale = foundLng;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!initialLocale) initialLocale = fallbackLocale;</span><br><span class="line"></span><br><span class="line">init(&#123;</span><br><span class="line">  fallbackLocale,</span><br><span class="line">  initialLocale,</span><br><span class="line">  <span class="attr">handleMissingMessage</span>: apiKey ? <span class="function">(<span class="params">&#123; locale, id, defaultValue &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (locale !== locizer.referenceLng) <span class="keyword">return</span>;</span><br><span class="line">    locizer.add(namespace, id, defaultValue);</span><br><span class="line">  &#125; : <span class="literal">undefined</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now, if you add a new key in your templates, <code>&lt;h2&gt;&#123;$_(&#39;howAreYou&#39;, &#123; default: &#39;How are you?&#39; &#125;)&#125;&lt;/h2&gt;</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> &#123; isLoading, _, locale, locales &#125; <span class="keyword">from</span> <span class="string">&#x27;svelte-i18n&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;svelte logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/svelte-logo.png&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;#if $isLoading&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      loading translations...</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;:else&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;$_(&#x27;welcome&#x27;)&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;$_(&#x27;howAreYou&#x27;, &#123; default: &#x27;How are you?&#x27; &#125;)&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;@html $_(&#x27;descr&#x27;, &#123; values: &#123; link: `<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://svelte.dev/tutorial&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>$&#123;$_(&#x27;doc&#x27;)&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>` &#125; &#125;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">bind:value</span>=<span class="string">&#123;$locale&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;#each $locales as locale&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#123;locale&#125;</span>&gt;</span>&#123;locale&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;/each&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">  &#123;/if&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>It gets automatically saved to locize:<img src="locize_missing.jpg" title="locize © inweso GmbH"></p><p>Lastly, with the help of the <a href="https://docs.locize.com/whats-inside/auto-machine-translation">auto-machinetranslation workflow</a>, new keys not only gets added to locize automatically, while developing the app, but are also automatically translated into the target languages using machine translation:<img src="locize_autotranslate.jpg" title="locize © inweso GmbH"></p><p><em>Check out this <a href="https://youtu.be/VfxBpSXarlU">video</a> to see how the automatic machine translation workflow looks like!</em></p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/VfxBpSXarlU" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="in-context-editing"><a href="#in-context-editing" class="headerlink" title="in context editing "></a>in context editing <a name="in-context"></a></h3><p>There&#39;s another cool think we can do...<br /></p><p>Let&#39;s install <a href="https://github.com/locize/locize">locize</a>:</p><p><code>npm install locize</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; register, init, getLocaleFromNavigator, locale &#125; <span class="keyword">from</span> <span class="string">&#x27;svelte-i18n&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> locizer <span class="keyword">from</span> <span class="string">&#x27;locizer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; addLocizeSavedHandler &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fallbackLocale = <span class="string">&#x27;en&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> lngs = [fallbackLocale, <span class="string">&#x27;de&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> namespace = <span class="string">&#x27;messages&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> apiKey = <span class="string">&#x27;my-api-key&#x27;</span>; <span class="comment">// do not expose your API-Key in production</span></span><br><span class="line"></span><br><span class="line">locizer.init(&#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;your-locize-project-id&#x27;</span>,</span><br><span class="line">  apiKey</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">lngs.forEach(<span class="function">(<span class="params">l</span>) =&gt;</span> &#123;</span><br><span class="line">  register(l, <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    locizer.load(namespace, l, <span class="function">(<span class="params">err, ns</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      resolve(ns);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">locale.subscribe(<span class="function">(<span class="params">lng</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (lng) <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;svelte-i18n-locale&#x27;</span>, lng);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> initialLocale;</span><br><span class="line"><span class="keyword">const</span> detectedLocale = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;svelte-i18n-locale&#x27;</span>) || getLocaleFromNavigator();</span><br><span class="line"><span class="keyword">if</span> (lngs.indexOf(detectedLocale) &gt; -<span class="number">1</span>) initialLocale = detectedLocale;</span><br><span class="line"><span class="keyword">if</span> (!initialLocale &amp;&amp; detectedLocale.indexOf(<span class="string">&#x27;-&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> foundLng = lngs.find(<span class="function">(<span class="params">l</span>) =&gt;</span> detectedLocale.indexOf(l + <span class="string">&#x27;-&#x27;</span>) === <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (foundLng) initialLocale = foundLng;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!initialLocale) initialLocale = fallbackLocale;</span><br><span class="line"></span><br><span class="line">init(&#123;</span><br><span class="line">  fallbackLocale,</span><br><span class="line">  initialLocale,</span><br><span class="line">  <span class="attr">handleMissingMessage</span>: apiKey ? <span class="function">(<span class="params">&#123; locale, id, defaultValue &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (locale !== locizer.referenceLng) <span class="keyword">return</span>;</span><br><span class="line">    locizer.add(namespace, id, defaultValue);</span><br><span class="line">  &#125; : <span class="literal">undefined</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">addLocizeSavedHandler(<span class="function">() =&gt;</span> location.reload());</span><br></pre></td></tr></table></figure><p>Now open the locize <a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a> and be amazed:</p><p><img src="in_context.jpg" alt="i18n incontext editor" title="locize © inweso GmbH"></p><h3 id="👀-but-there-39-s-more"><a href="#👀-but-there-39-s-more" class="headerlink" title="👀 but there&#39;s more... "></a>👀 but there&#39;s more... <a name="more"></a></h3><p><a href="https://docs.locize.com/more/caching">Caching</a>:</p><p><img src="../react-i18next/caching.jpg" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/versioning#merging-versions">Merging versions</a>:</p><p><img src="../react-i18next/overwrite_version.jpg" title="locize © inweso GmbH"></p><p><em>🧑‍💻 The code can be found <a href="https://github.com/locize/locizer/tree/master/example/svelte">here</a>.</em></p><h1 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h1><p>I hope you’ve learned a few new things about <a href="https://github.com/kaisermann/svelte-i18n">Svelte localization</a> and <a href="https://locize.com/">modern localization workflows</a>.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth to try <a href="https://locize.com/">locize</a>.</p><h1 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h1>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> translation </tag>
            
            <tag> svelte </tag>
            
            <tag> svelte-i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Optimize Next.js translations (next-i18next guide)</title>
      <link href="/blog/next-i18next/"/>
      <url>/blog/next-i18next/</url>
      
        <content type="html"><![CDATA[<p><img src="next-i18next.jpg" title="locize © inweso GmbH"></p><p>Writing <a href="https://nextjs.org/">Next.js</a> code blurs the lines between client side and server side.<br />The code is written once and depending on your needs it is then executed as SSG (static-site generation), SSR (server-side rendering) or CSR (client-side rendering), etc.</p><blockquote><p>So also the internationalization, right?</p></blockquote><h2 id="How-to-optimize-Next-js-apps-to-best-work-with-translations-on-server-side-and-on-client-side-with-next-i18next"><a href="#How-to-optimize-Next-js-apps-to-best-work-with-translations-on-server-side-and-on-client-side-with-next-i18next" class="headerlink" title="How to optimize Next.js apps to best work with translations on server side and on client side with next-i18next?"></a>How to optimize Next.js apps to best work with translations on server side and on client side with next-i18next?</h2><p><em>If you&#39;re using Next.js 13 with app directory, have a look at <a href="../next-app-dir-i18n/">this blog post</a>.</em></p><p>Let&#39;s take the example of <a href="https://github.com/i18next/next-i18next">next-i18next</a>.While next-i18next uses <a href="https://www.i18next.com/">i18next</a> and <a href="https://react.i18next.com/">react-i18next</a> under the hood, users of next-i18next simply need to include their translation content as JSON files and don&#39;t have to worry about much else.</p><p>By default, there is one <a href="https://github.com/i18next/next-i18next#next-i18nextconfigjs">next-i18next configuration</a> that loads the translations from the local directory structure and renders the pages on server side.<br />This is ok, it works and is optimized for SEO etc. but there is more we could do.</p><p>What if we could power up the seo optimized website with always up-to-date translations without the need to redeploy your app?</p><p>We will discuss 2 different setups: <a href="#ssr">One with an active backend</a> and another <a href="#ssg">one completely statically generated</a>.</p><p>The basic target is always the same: We want everything to be SEO optimized in all languages and serve always the newest translations to our users.</p><h2 id="Example-with-a-backend-server"><a href="#Example-with-a-backend-server" class="headerlink" title="Example with a backend server "></a>Example with a backend server <a name="ssr"></a></h2><p><img src="next-build.jpg"></p><p>Having a backend server does not mean you are forced to run your own server. It can also be a PaaS or serverless solution, like <a href="https://vercel.com/">Vercel</a> or <a href="https://www.netlify.com/">Netlify</a>, etc.</p><p>Ok, let&#39;s start with the default:<br />You followed the normal <a href="https://github.com/i18next/next-i18next#setup">next-i18next setup guide</a> and now your translations are organized more or less as such:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── public</span><br><span class="line">    └── locales</span><br><span class="line">        ├── en</span><br><span class="line">        |   └── common.json</span><br><span class="line">        └── de</span><br><span class="line">            └── common.json</span><br></pre></td></tr></table></figure><p>Now let&#39;s connect to an awesome translation management system and manage your translations outside of your code.</p><p>Let&#39;s synchronize the translation files with <a href="https://locize.com/">locize</a>.This can be done on-demand or on the CI-Server or before deploying the app.</p><h3 id="What-to-do-to-reach-this-step"><a href="#What-to-do-to-reach-this-step" class="headerlink" title="What to do to reach this step:"></a>What to do to reach this step:</h3><ol><li>in locize: signup at <a href="https://locize.app/register">https://locize.app/register</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a></li><li>in locize: <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a></li><li>in locize: add all your additional languages (this can also be done via <a href="https://docs.locize.com/integration/api#add-new-language">API</a>)</li><li>install the <a href="https://github.com/locize/locize-cli">locize-cli</a> (<code>npm i locize-cli</code>)</li></ol><h3 id="Use-the-locize-cli"><a href="#Use-the-locize-cli" class="headerlink" title="Use the locize-cli"></a>Use the <a href="https://github.com/locize/locize-cli">locize-cli</a></h3><p>Use the <code>locize sync</code> command to synchronize your local repository (<code>public/locales</code>) with what is published on locize.</p><p>Alternatively, you can also use the <code>locize download</code> command to always download the published locize translations to your local repository (<code>public/locales</code>) before bundling your app.</p><blockquote><p>But you were talking about having always up-to-date translations without the need to redeploy your app?</p></blockquote><h3 id="Yes-let-39-s-adapt-for-that"><a href="#Yes-let-39-s-adapt-for-that" class="headerlink" title="Yes, let&#39;s adapt for that:"></a>Yes, let&#39;s adapt for that:</h3><p>We will use the <a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend plugin</a>, but only on client side.</p><p>Together with some other i18next dependencies:</p><ul><li><a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a></li><li><a href="https://github.com/i18next/i18next-chained-backend">i18next-chained-backend</a></li><li><a href="https://github.com/i18next/i18next-localstorage-backend">i18next-localstorage-backend</a></li></ul><p><code>npm install i18next-locize-backend i18next-chained-backend i18next-localstorage-backend</code></p><p>And we adapt the <code>next-i18next.config.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next-i18next.config.js</span></span><br><span class="line"><span class="keyword">const</span> LocizeBackend = <span class="built_in">require</span>(<span class="string">&#x27;i18next-locize-backend/cjs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ChainedBackend= <span class="built_in">require</span>(<span class="string">&#x27;i18next-chained-backend&#x27;</span>).default</span><br><span class="line"><span class="keyword">const</span> LocalStorageBackend = <span class="built_in">require</span>(<span class="string">&#x27;i18next-localstorage-backend&#x27;</span>).default</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isBrowser = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// debug: true,</span></span><br><span class="line">  <span class="attr">i18n</span>: &#123;</span><br><span class="line">    <span class="attr">defaultLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">locales</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>, <span class="string">&#x27;it&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">backend</span>: &#123;</span><br><span class="line">    <span class="attr">backendOptions</span>: [&#123;</span><br><span class="line">      <span class="attr">expirationTime</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> <span class="comment">// 1 hour</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">projectId</span>: <span class="string">&#x27;d3b405cf-2532-46ae-adb8-99e88d876733&#x27;</span>,</span><br><span class="line">      <span class="attr">version</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">backends</span>: isBrowser ? [LocalStorageBackend, LocizeBackend] : [],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">serializeConfig</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">use</span>: isBrowser ? [ChainedBackend] : []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Removing the <code>serverSideTranslation</code> to <a href="https://nextjs.org/docs/basic-features/data-fetching/get-static-props"><code>getStaticProps</code></a> or <a href="https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props"><code>getServerSideProps</code></a> (depending on your case) in the page-level components would work, but would not correctly render the server side html. But the client side would be fine.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Without the getStaticProps or getServerSideProps function,</span></span><br><span class="line"><span class="comment">// the translsations are loaded via configured i18next backend.</span></span><br><span class="line"><span class="comment">// Also make sure you set the partialBundledLanguages option to true, like here: https://github.com/i18next/i18next-http-backend/blob/master/example/next/next-i18next.config.js#L14</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// export const getStaticProps = async (&#123; locale &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   return &#123;</span></span><br><span class="line"><span class="comment">//     props: await serverSideTranslations(locale, [&#x27;common&#x27;, &#x27;footer&#x27;])</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>This can be optimized by keeping the <code>getServerSideProps</code> or <code>getStaticProps</code> function and making use of the <a href="https://www.i18next.com/overview/api#reloadresources"><code>reloadResources</code></a> functionality of i18next.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HomePage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; t, i18n &#125; = useTranslation([<span class="string">&#x27;common&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>], &#123; <span class="attr">bindI18n</span>: <span class="string">&#x27;languageChanged loaded&#x27;</span> &#125;)</span><br><span class="line">  <span class="comment">// bindI18n: loaded is needed because of the reloadResources call</span></span><br><span class="line">  <span class="comment">// if all pages use the reloadResources mechanism, the bindI18n option can also be defined in next-i18next.config.js</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    i18n.reloadResources(i18n.resolvedLanguage, [<span class="string">&#x27;common&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>])</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Header</span> <span class="attr">heading</span>=<span class="string">&#123;t(</span>&#x27;<span class="attr">h1</span>&#x27;)&#125; <span class="attr">title</span>=<span class="string">&#123;t(</span>&#x27;<span class="attr">title</span>&#x27;)&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#x27;/&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">type</span>=<span class="string">&#x27;button&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          &gt;</span></span></span><br><span class="line"><span class="xml">            &#123;t(&#x27;back-to-home&#x27;)&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStaticProps = <span class="keyword">async</span> (&#123; locale &#125;) =&gt; (&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    ...await serverSideTranslations(locale, [<span class="string">&#x27;common&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>]),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HomePage</span><br></pre></td></tr></table></figure><p>This way the ready check is also not necessary, because the translations served directly by the server are used. And as soon the translations are reloaded, new translations are shown.</p><h3 id="That-39-s-it-Let-39-s-check-the-result"><a href="#That-39-s-it-Let-39-s-check-the-result" class="headerlink" title="That&#39;s it! Let&#39;s check the result:"></a>That&#39;s it! Let&#39;s check the result:</h3><p>The HTML returned from the server looks correctly translated. So this is well optimized for search engines.<img src="ssr-translations.jpg"></p><p>And on client side, the up-to-date translations are directly fetched from the <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">locize CDN</a>.<img src="client-loading.jpg"></p><p>🙀 This means you can fix translations without having to change your code or redeploy your app. 🤩</p><p><em>🧑‍💻 The code can be found <a href="https://github.com/locize/next-i18next-locize">here</a>.</em></p><h4 id="Additional-hint"><a href="#Additional-hint" class="headerlink" title="Additional hint:"></a>Additional hint:</h4><p>If you&#39;ve configured <a href="https://docs.locize.com/more/caching">caching</a> for your locize version, you may not need the <a href="https://github.com/i18next/i18next-localstorage-backend">i18next-localstorage-backend</a> and <a href="https://github.com/i18next/i18next-chained-backend">i18next-chained-backend</a> plugin.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next-i18next.config.js</span></span><br><span class="line"><span class="keyword">const</span> LocizeBackend = <span class="built_in">require</span>(<span class="string">&#x27;i18next-locize-backend/cjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isBrowser = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// debug: true,</span></span><br><span class="line">  <span class="attr">i18n</span>: &#123;</span><br><span class="line">    <span class="attr">defaultLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">locales</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>, <span class="string">&#x27;it&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">backend</span>: isBrowser ? &#123;</span><br><span class="line">    <span class="attr">projectId</span>: <span class="string">&#x27;d3b405cf-2532-46ae-adb8-99e88d876733&#x27;</span>,</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">  &#125; : <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">serializeConfig</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">use</span>: isBrowser ? [LocizeBackend] : []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Static-Website-example"><a href="#Static-Website-example" class="headerlink" title="Static Website example "></a>Static Website example <a name="ssg"></a></h2><p><img src="next-export.jpg"></p><p>With this example, we just need a static webserver, like <a href="https://pages.github.com/">GitHub Pages</a> or similar.</p><p>It&#39;s pretty much the same as with <a href="#ssr">above example</a>, but there are some little things we need to additionally consider.</p><p>To work with static-site generation (SSG) we need to use the <code>next export</code> command, but...</p><blockquote><p>Error: i18n support is not compatible with next export. See here for more info on deploying: <a href="https://nextjs.org/docs/deployment">https://nextjs.org/docs/deployment</a></p></blockquote><p>This happens if you&#39;re using the <a href="https://nextjs.org/docs/advanced-features/i18n-routing">internationalized routing</a> feature and are trying to generate a <a href="https://nextjs.org/docs/advanced-features/static-html-export">static HTML export</a> by executing <code>next export</code>.Well, this features requires a Node.js server, or dynamic logic that cannot be computed during the build process, that&#39;s why it is <a href="https://nextjs.org/docs/advanced-features/static-html-export#unsupported-features">unsupported</a>.</p><p>There is a <a href="../next-i18n-static/">dedicated article</a> with a solution to that Next.js problem. <a href="../next-i18n-static/">Follow that guide first!</a><a href="../next-i18n-static/"><img src="../next-i18n-static/title.jpg"></a></p><h3 id="Done-so-Then-let-39-s-continue-here"><a href="#Done-so-Then-let-39-s-continue-here" class="headerlink" title="Done so? Then let&#39;s continue here:"></a>Done so? Then let&#39;s continue here:</h3><p>It&#39;s the same <code>next-i18next.config.js</code> config like in the <a href="#ssr">previous example</a>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next-i18next.config.js</span></span><br><span class="line"><span class="keyword">const</span> LocizeBackend = <span class="built_in">require</span>(<span class="string">&#x27;i18next-locize-backend/cjs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ChainedBackend= <span class="built_in">require</span>(<span class="string">&#x27;i18next-chained-backend&#x27;</span>).default</span><br><span class="line"><span class="keyword">const</span> LocalStorageBackend = <span class="built_in">require</span>(<span class="string">&#x27;i18next-localstorage-backend&#x27;</span>).default</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you&#x27;ve configured caching for your locize version, you may not need the i18next-localstorage-backend and i18next-chained-backend plugin.</span></span><br><span class="line"><span class="comment">// https://docs.locize.com/more/caching</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isBrowser = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// debug: true,</span></span><br><span class="line">  <span class="attr">i18n</span>: &#123;</span><br><span class="line">    <span class="attr">defaultLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">locales</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>, <span class="string">&#x27;it&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">backend</span>: &#123;</span><br><span class="line">    <span class="attr">backendOptions</span>: [&#123;</span><br><span class="line">      <span class="attr">expirationTime</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> <span class="comment">// 1 hour</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">projectId</span>: <span class="string">&#x27;d3b405cf-2532-46ae-adb8-99e88d876733&#x27;</span>,</span><br><span class="line">      <span class="attr">version</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">backends</span>: isBrowser ? [LocalStorageBackend, LocizeBackend] : [],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">serializeConfig</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">use</span>: isBrowser ? [ChainedBackend] : []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Extend the <code>makeStaticProps</code> function with options (<code>emptyI18nStoreStore</code>):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">makeStaticProps</span>(<span class="params">ns = [], opt = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getStaticProps</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> props = <span class="keyword">await</span> getI18nProps(ctx, ns)</span><br><span class="line">    <span class="keyword">if</span> (opt.emptyI18nStoreStore) &#123;</span><br><span class="line">      <span class="comment">// let the client fetch the translations</span></span><br><span class="line">      props._nextI18Next.initialI18nStore = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      props</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>...and use it accordingly:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getStaticProps = makeStaticProps([<span class="string">&#x27;common&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>], &#123; <span class="attr">emptyI18nStoreStore</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> &#123; getStaticPaths, getStaticProps &#125;</span><br></pre></td></tr></table></figure><h3 id="That-39-s-it-Let-39-s-check-the-result-1"><a href="#That-39-s-it-Let-39-s-check-the-result-1" class="headerlink" title="That&#39;s it! Let&#39;s check the result:"></a>That&#39;s it! Let&#39;s check the result:</h3><p>The generated static HTML looks correctly translated. So this is well optimized for search engines.<img src="ssg-translations.jpg"></p><p>And on client side, the up-to-date translations are directly fetched from the <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">locize CDN</a>.<img src="client-loading.jpg"></p><p>🙀 This means you can fix translations without having to change your code or redeploy your app. And without owning an active server. 🤩</p><p><em>🧑‍💻 The code can be found <a href="https://github.com/i18next/next-language-detector/tree/main/examples/client-loading">here</a>.</em></p><h2 id="Continuous-Localization"><a href="#Continuous-Localization" class="headerlink" title="Continuous Localization"></a>Continuous Localization</h2><p>Since we&#39;re now &quot;connected&quot; to as smart <a href="https://lociize.com/">translation management system</a>, we can try to make use of its full potential.</p><h3 id="save-missing-translations"><a href="#save-missing-translations" class="headerlink" title="save missing translations "></a>save missing translations <a name="save-missing"></a></h3><blockquote><p>I wish newly added keys in the code, would automatically be saved to locize.</p></blockquote><p><strong>Your wish is my command!</strong></p><p>Extend the next-i18next config with the locize api-key and set <code>saveMissing: true</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next-i18next.config.js</span></span><br><span class="line"><span class="keyword">const</span> LocizeBackend = <span class="built_in">require</span>(<span class="string">&#x27;i18next-locize-backend/cjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isBrowser = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// debug: true,</span></span><br><span class="line">  <span class="attr">i18n</span>: &#123;</span><br><span class="line">    <span class="attr">defaultLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">locales</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">backend</span>: &#123;</span><br><span class="line">    <span class="attr">projectId</span>: <span class="string">&#x27;d3b405cf-2532-46ae-adb8-99e88d876733&#x27;</span>,</span><br><span class="line">    <span class="attr">apiKey</span>: <span class="string">&#x27;14bbe1fa-6ffc-40f5-9226-7462aa4a042f&#x27;</span>,</span><br><span class="line">    <span class="attr">version</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">serializeConfig</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">use</span>: isBrowser ? [LocizeBackend] : [],</span><br><span class="line">  <span class="attr">saveMissing</span>: <span class="literal">true</span> <span class="comment">// do not set saveMissing to true for production and also not when using the chained backend</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each time you&#39;ll use a new key, it will be sent to locize, i.e.:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;t(<span class="string">&#x27;new.key&#x27;</span>, <span class="string">&#x27;this will be added automatically&#x27;</span>)&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>will result in locize like this:</p><p><img src="missing_key.jpg" alt="missing key" title="locize © inweso GmbH"></p><h4 id="👀-but-there-39-s-more"><a href="#👀-but-there-39-s-more" class="headerlink" title="👀 but there&#39;s more... "></a>👀 but there&#39;s more... <a name="more"></a></h4><p>Thanks to the <a href="https://github.com/locize/locize-lastused">locize-lastused</a> plugin, you&#39;ll be able to <a href="https://docs.locize.com/guides-tips-and-tricks/unused-translations">find and filter in locize which keys are used or not used anymore</a>.</p><p>With the help of the <a href="https://github.com/locize/locize">locize</a> plugin, you&#39;ll be able to use your app within the locize <a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>.</p><p>Lastly, with the help of the <a href="https://docs.locize.com/whats-inside/auto-machine-translation">auto-machinetranslation workflow</a> and the use of the <a href="https://www.i18next.com/overview/configuration-options#missing-keys">saveMissing functionality</a>, new keys not only gets added to locize automatically, while developing the app, but are also automatically translated into the target languages using machine translation.</p><p><em>Check out this <a href="https://youtu.be/VfxBpSXarlU">video</a> to see how the automatic machine translation workflow looks like!</em></p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/VfxBpSXarlU" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><code>npm install locize-lastused locize</code></p><p>use them like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next-i18next.config.js</span></span><br><span class="line"><span class="keyword">const</span> LocizeBackend = <span class="built_in">require</span>(<span class="string">&#x27;i18next-locize-backend/cjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isBrowser = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;d3b405cf-2532-46ae-adb8-99e88d876733&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;14bbe1fa-6ffc-40f5-9226-7462aa4a042f&#x27;</span>,</span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// debug: true,</span></span><br><span class="line">  <span class="attr">i18n</span>: &#123;</span><br><span class="line">    <span class="attr">defaultLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">locales</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">  <span class="attr">locizeLastUsed</span>: locizeOptions,</span><br><span class="line">  <span class="attr">serializeConfig</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">use</span>: isBrowser ? [LocizeBackend, <span class="built_in">require</span>(<span class="string">&#x27;locize&#x27;</span>).locizePlugin, <span class="built_in">require</span>(<span class="string">&#x27;locize-lastused/cjs&#x27;</span>)] : [], <span class="comment">// do not use locize-lastused on production</span></span><br><span class="line">  <span class="attr">saveMissing</span>: <span class="literal">true</span> <span class="comment">// do not set saveMissing to true for production and also not when using the chained backend</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://docs.locize.com/whats-inside/auto-machine-translation">Automatic machine translation</a>:</p><p><img src="missing_key_auto_mt.jpg" alt="missing key auto" title="locize © inweso GmbH"></p><p><a href="(https://docs.locize.com/guides-tips-and-tricks/unused-translations)">Last used translations filter</a>:</p><p><img src="last_used.jpg" alt="i18next last used" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>:</p><p><img src="in_context.jpg" alt="i18next incontext" title="locize © inweso GmbH"></p><h4 id="📦-Let-39-s-prepare-for-production-🚀"><a href="#📦-Let-39-s-prepare-for-production-🚀" class="headerlink" title="📦 Let&#39;s prepare for production 🚀 "></a>📦 Let&#39;s prepare for production 🚀 <a name="production"></a></h4><p>Now, we prepare the app for <a href="https://docs.locize.com/guides-tips-and-tricks/going-production">going to production</a>.</p><p>First in locize, create a dedicated version for production. Do not enable auto publish for that version but publish manually or via <a href="https://docs.locize.com/integration/api#publish-version">API</a> or via <a href="https://github.com/locize/locize-cli#publish-version">CLI</a>.Lastly, <a href="https://docs.locize.com/more/caching">enable Cache-Control max-age​</a> for that production version.</p><p>Let&#39;s adapt the <code>next-i18next.config.js</code> file once again:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next-i18next.config.js</span></span><br><span class="line"><span class="keyword">const</span> LocizeBackend = <span class="built_in">require</span>(<span class="string">&#x27;i18next-locize-backend/cjs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isBrowser = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;d3b405cf-2532-46ae-adb8-99e88d876733&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;14bbe1fa-6ffc-40f5-9226-7462aa4a042f&#x27;</span>,</span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// debug: true,</span></span><br><span class="line">  <span class="attr">i18n</span>: &#123;</span><br><span class="line">    <span class="attr">defaultLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">locales</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">  <span class="attr">locizeLastUsed</span>: locizeOptions,</span><br><span class="line">  <span class="attr">serializeConfig</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">use</span>: isBrowser ? [LocizeBackend, <span class="built_in">require</span>(<span class="string">&#x27;locize&#x27;</span>).locizePlugin, <span class="built_in">require</span>(<span class="string">&#x27;locize-lastused/cjs&#x27;</span>)] : [], <span class="comment">// do not use locize-lastused on production</span></span><br><span class="line">  <span class="attr">saveMissing</span>: <span class="literal">true</span> <span class="comment">// do not set saveMissing to true for production and also not when using the chained backend</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, during development, you&#39;ll continue to save missing keys and to make use of lastused feature. =&gt; <code>npm run dev</code></p><p>And in production environment, saveMissing and lastused are disabled. =&gt; <code>npm run build &amp;&amp; npm start</code></p><p><a href="https://docs.locize.com/more/caching">Caching</a>:</p><p><img src="caching.jpg" alt="i18next caching" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/versioning#merging-versions">Merging versions</a>:</p><p><img src="overwrite_version.jpg" alt="overwrite version" title="locize © inweso GmbH"></p><p><em>🧑‍💻 The complete code can be found <a href="https://github.com/locize/next-i18next-locize">here</a>.</em></p><p><em>Check also the <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY&t=294s">code integration part</a> in this <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY">YouTube video</a>.</em></p><p>There&#39;s also an <a href="https://youtu.be/SA_9i4TtxLQ">i18next crash course video</a>.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/SA_9i4TtxLQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>Awesome! Thanks to <a href="https://github.com/i18next/next-i18next">next-i18next</a>, <a href="https://www.i18next.com/">i18next</a>, <a href="https://react.i18next.com/">react-i18next</a> and <a href="https://locize.com/">locize</a> your continuous localization workflow is ready to go.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth trying the <a href="https://locize.com/">localization management platform - locize</a>.</p><p>The founders of <a href="https://locize.com/">locize</a> are also the creators of <a href="https://www.i18next.com/">i18next</a>. So by using <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.</p><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> react </tag>
            
            <tag> react-i18next </tag>
            
            <tag> next </tag>
            
            <tag> next-i18next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to internationalize a Remix application (Part 2)</title>
      <link href="/blog/remix-i18next/"/>
      <url>/blog/remix-i18next/</url>
      
        <content type="html"><![CDATA[<p><img src="remix-localization.jpg" alt="remix localization" title="Remix Localization example"></p><p>In the <a href="../remix-i18n/">previous blog post</a> we learned on a simple way how we can instrumented our <a href="https://remix.run/">Remix</a> app to be ready for localization by using <a href="https://github.com/sergiodxa/remix-i18next">remix-i18next</a>.<br />In this blog post we will try to unleash the full power of <a href="https://www.i18next.com/">i18next</a> and focus on a continuous localization workflow.</p><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><ul><li><a href="#better-translation-management">Better translation management</a><ul><li><a href="#for-sure">For sure!</a></li><li><a href="#how-look">How does this look like?</a></li><li><a href="#save-missing">save missing translations</a></li><li><a href="#more">👀 but there&#39;s more...</a></li><li><a href="#production">📦 Let&#39;s prepare for production 🚀</a></li></ul></li><li><a href="#congratulations">🎉🥳 Congratulations 🎊🎁</a></li></ul><h2 id="Better-translation-management"><a href="#Better-translation-management" class="headerlink" title="Better translation management "></a>Better translation management <a name="better-translation-management"></a></h2><p>In the previous blog post there was a <a href="../remix-i18n/#voluntary">voluntary part</a>. This already was the first step.</p><p>By sending the translations to some translators or translator agency you have more control and a direct contact with them. But this also means more work for you.This is a traditional way. But be aware sending files around creates always an overhead.</p><blockquote><p>Does a better option exist?</p></blockquote><h4 id="For-sure"><a href="#For-sure" class="headerlink" title="For sure! "></a>For sure! <a name="for-sure"></a></h4><p><a href="https://www.i18next.com/">i18next</a> helps to get the application translated, and this is great - but there is more to it.</p><ul><li>How do you integrate any translation services / agency?</li><li>How do you keep track of new or removed content?</li><li>How do you handle proper versioning?</li><li>How do you deploy translation changes without deploying your complete application?</li><li>and a lot more...</li></ul><p><strong>Looking for something like this❓</strong></p><ul><li><a href="https://docs.locize.com/integration/instrumenting-your-code#i-18-next">Easy to integrate</a></li><li>Continuous deployment? <a href="https://locize.com/how-it-works.html#continouslocalization">Continuous localization</a>!</li><li>Manage the translation files with ease</li><li><a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators">Order professional translations</a></li><li>Analytics &amp; Statistics</li><li><a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">Profit from our content delivery network (CDN)</a></li><li><a href="https://docs.locize.com/more/versioning">Versioning of your translations</a></li><li><a href="https://docs.locize.com/whats-inside/auto-machine-translation">Automatic and On-Demand Machine Translation</a></li><li><a href="https://docs.locize.com/more/general-questions/how-is-locize-different-from-the-alternatives#service-lock-in">Riskfree: Take your data with you</a></li><li><a href="https://locize.com/pricing.html">Transparent and fair pricing</a></li><li>and a lot more...</li></ul><h4 id="How-does-this-look-like"><a href="#How-does-this-look-like" class="headerlink" title="How does this look like? "></a>How does this look like? <a name="how-look"></a></h4><p>First, if not already done, you need to signup at <a href="https://locize.app/register">locize</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a>.Then <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a> in locize and add your translations. You can add your translations either by using the <a href="https://github.com/locize/react-tutorial#use-the-locize-cli">cli</a> or by <a href="https://docs.locize.com/more/general-questions/how-to-import-translations-from-a-file">importing the individual json files</a> or via <a href="https://docs.locize.com/integration/api#update-remove-translations">API</a>.</p><p>Done so, we&#39;re going change the way the translations are loaded on server side and on client side.</p><p>Currently the translations are downloaded from locize via CLI and are then served on server side in the <code>public/locales</code> folder. Thanks to remix-i18next then the translations are downloaded by the client.</p><p>We now would like the client side to directly consume the translations provided by the <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">locize CDN</a>.Instead on server side we&#39;ll continue to &quot;bundle&quot; the translations first.See <a href="https://github.com/locize/locize-remix-i18next-example/blob/main/package.json#L34">downloadLocales script in package.json</a>.We&#39;re doing so to prevent an elevated amount of downloads generated on server side. <a href="https://github.com/locize/i18next-locize-backend#important-advice-for-serverless-environments---aws-lambda-google-cloud-functions-azure-functions-etc">Read this</a> for more information about this topic about serverless environments.</p><p>We have to install <a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a>.</p><p><code>npm install i18next-locize-backend</code></p><p>Adapt the <code>entry.client.jsx</code> file to use the i18next-locize-backend and make sure you copy the project-id and api-key from within your locize project.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hydrate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; RemixBrowser &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; I18nextProvider, initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getInitialNamespaces &#125; <span class="keyword">from</span> <span class="string">&#x27;remix-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LastUsed <span class="keyword">from</span> <span class="string">&#x27;locize-lastused&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; locizePlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextOptions <span class="keyword">from</span> <span class="string">&#x27;./i18nextOptions&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;f6d74b76-9677-4a0d-b400-86e1507397ab&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;1c2bbc21-027d-4f41-995a-e8beb451cdef&#x27;</span>, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize i18next using initReactI18next and configuring it</span></span><br><span class="line"><span class="keyword">if</span> (!i18next.isInitialized) &#123; <span class="comment">// prevent i18next to be initialized multiple times</span></span><br><span class="line">  i18next</span><br><span class="line">    <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">    .use(initReactI18next)</span><br><span class="line">    <span class="comment">// i18next-locize-backend</span></span><br><span class="line">    <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">    <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">    .use(Backend)</span><br><span class="line">    <span class="comment">// detect user language</span></span><br><span class="line">    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">    .use(LanguageDetector)</span><br><span class="line">    <span class="comment">// init i18next</span></span><br><span class="line">    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      ...i18nextOptions,</span><br><span class="line">      <span class="comment">// This function detects the namespaces your routes rendered while SSR use</span></span><br><span class="line">      <span class="comment">// and pass them here to load the translations</span></span><br><span class="line">      <span class="attr">ns</span>: getInitialNamespaces(),</span><br><span class="line">      <span class="attr">detection</span>: &#123;</span><br><span class="line">        <span class="comment">// Here only enable htmlTag detection, we&#x27;ll detect the language only</span></span><br><span class="line">        <span class="comment">// server-side with remix-i18next, by using the `&lt;html lang&gt;` attribute</span></span><br><span class="line">        <span class="comment">// we can communicate to the client the language detected server-side</span></span><br><span class="line">        <span class="attr">order</span>: [<span class="string">&#x27;htmlTag&#x27;</span>],</span><br><span class="line">        <span class="comment">// Because we only use htmlTag, there&#x27;s no reason to cache the language</span></span><br><span class="line">        <span class="comment">// on the browser, so we disable it</span></span><br><span class="line">        <span class="attr">caches</span>: [],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">backend</span>: locizeOptions</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// then hydrate your app</span></span><br><span class="line">      <span class="keyword">return</span> hydrate(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">I18nextProvider</span> <span class="attr">i18n</span>=<span class="string">&#123;i18next&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">RemixBrowser</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">I18nextProvider</span>&gt;</span></span>,</span><br><span class="line">        <span class="built_in">document</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>entry.server.jsx</code> file, the <code>root.jsx</code> and the <code>i18nextOptions.js</code> file should still look the same:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/server&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; RemixServer &#125; <span class="keyword">from</span> <span class="string">&#x27;remix&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; I18nextProvider, initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-fs-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextOptions <span class="keyword">from</span> <span class="string">&#x27;./i18nextOptions&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n.server&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  request,</span></span></span><br><span class="line"><span class="params"><span class="function">  statusCode,</span></span></span><br><span class="line"><span class="params"><span class="function">  headers,</span></span></span><br><span class="line"><span class="params"><span class="function">  context</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// First, we create a new instance of i18next so every request will have a</span></span><br><span class="line">  <span class="comment">// completely unique instance and not share any state</span></span><br><span class="line">  <span class="keyword">const</span> instance = createInstance()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Then we could detect locale from the request</span></span><br><span class="line">  <span class="keyword">const</span> lng = <span class="keyword">await</span> i18n.getLocale(request)</span><br><span class="line">  <span class="comment">// And here we detect what namespaces the routes about to render want to use</span></span><br><span class="line">  <span class="keyword">const</span> ns = i18n.getRouteNamespaces(context)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// First, we create a new instance of i18next so every request will have a</span></span><br><span class="line">  <span class="comment">// completely unique instance and not share any state.</span></span><br><span class="line">  <span class="keyword">await</span> instance</span><br><span class="line">    .use(initReactI18next) <span class="comment">// Tell our instance to use react-i18next</span></span><br><span class="line">    .use(Backend) <span class="comment">// Setup our backend.init(&#123;</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      ...i18nextOptions, <span class="comment">// use the same configuration as in your client side.</span></span><br><span class="line">      lng, <span class="comment">// The locale we detected above</span></span><br><span class="line">      ns, <span class="comment">// The namespaces the routes about to render want to use</span></span><br><span class="line">      <span class="attr">backend</span>: &#123;</span><br><span class="line">        <span class="attr">loadPath</span>: resolve(<span class="string">&#x27;./public/locales/&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Then you can render your app wrapped in the I18nextProvider as in the</span></span><br><span class="line">  <span class="comment">// entry.client file</span></span><br><span class="line">  <span class="keyword">const</span> markup = renderToString(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">I18nextProvider</span> <span class="attr">i18n</span>=<span class="string">&#123;instance&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">RemixServer</span> <span class="attr">context</span>=<span class="string">&#123;context&#125;</span> <span class="attr">url</span>=<span class="string">&#123;request.url&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">I18nextProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  headers.set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span> + markup, &#123;</span><br><span class="line">    <span class="attr">status</span>: statusCode,</span><br><span class="line">    <span class="attr">headers</span>: headers,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">debug</span>: process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">supportedLngs</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>],</span><br><span class="line">  <span class="attr">defaultNS</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">  <span class="attr">react</span>: &#123; <span class="attr">useSuspense</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the <code>root.jsx</code> file we need to call <code>useRemixI18Next</code> only on server side:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Links,</span><br><span class="line">  LiveReload,</span><br><span class="line">  Meta,</span><br><span class="line">  Outlet,</span><br><span class="line">  Scripts,</span><br><span class="line">  ScrollRestoration,</span><br><span class="line">  useLoaderData</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; json &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/node&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useChangeLanguage &#125; <span class="keyword">from</span> <span class="string">&#x27;remix-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> remixI18n <span class="keyword">from</span> <span class="string">&#x27;./i18n.server&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./styles/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; i18nCookie &#125; <span class="keyword">from</span> <span class="string">&#x27;./cookie&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loader = <span class="keyword">async</span> (&#123; request &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> locale = <span class="keyword">await</span> remixI18n.getLocale(request)</span><br><span class="line">  <span class="keyword">const</span> t = <span class="keyword">await</span> remixI18n.getFixedT(request, <span class="string">&#x27;common&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = t(<span class="string">&#x27;headTitle&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> json(&#123; locale, title &#125;, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;<span class="string">&quot;Set-Cookie&quot;</span>: <span class="keyword">await</span> i18nCookie.serialize(locale)&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handle = &#123;</span><br><span class="line">  <span class="comment">// In the handle export, we could add a i18n key with namespaces our route</span></span><br><span class="line">  <span class="comment">// will need to load. This key can be a single string or an array of strings.</span></span><br><span class="line">  <span class="attr">i18n</span>: [<span class="string">&#x27;common&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">meta</span>(<span class="params">&#123; data &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">title</span>: data.title &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> links = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [&#123; <span class="attr">rel</span>: <span class="string">&#x27;stylesheet&#x27;</span>, <span class="attr">href</span>: styles &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; i18n &#125; = useTranslation()</span><br><span class="line">  <span class="keyword">const</span> &#123; locale &#125; = useLoaderData()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// This hook will change the i18n instance language to the current locale</span></span><br><span class="line">  <span class="comment">// detected by the loader, this way, when we do something to change the</span></span><br><span class="line">  <span class="comment">// language, this locale will change and i18next will load the correct</span></span><br><span class="line">  <span class="comment">// translation files</span></span><br><span class="line">  useChangeLanguage(locale)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#123;i18n.resolvedLanguage&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charSet</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Meta</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Links</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ScrollRestoration</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Scripts</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">LiveReload</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That&#39;s it:</p><p><img src="app.jpg"></p><p>The app looks more or less the same, but on client side the translations are fetched directly from the <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">locize CDN</a>.This means if you change translations in locize they will be available to your Remix app, without having to change or redeploy your app.<em>Only to have the newest translations on server side (i.e. for SEO optimizations) a new <code>npm run downloadLocales</code> and rebuild is needed.</em></p><h4 id="save-missing-translations"><a href="#save-missing-translations" class="headerlink" title="save missing translations "></a>save missing translations <a name="save-missing"></a></h4><p>Thanks to the use of the <a href="https://www.i18next.com/overview/configuration-options#missing-keys">saveMissing functionality</a>, new keys gets added to locize automatically, while developing the app.</p><p>Just pass <code>saveMissing: true</code> in the i18next options:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hydrate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; RemixBrowser &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; I18nextProvider, initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getInitialNamespaces &#125; <span class="keyword">from</span> <span class="string">&#x27;remix-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextOptions <span class="keyword">from</span> <span class="string">&#x27;./i18nextOptions&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;f6d74b76-9677-4a0d-b400-86e1507397ab&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;1c2bbc21-027d-4f41-995a-e8beb451cdef&#x27;</span>, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize i18next using initReactI18next and configuring it</span></span><br><span class="line"><span class="keyword">if</span> (!i18next.isInitialized) &#123; <span class="comment">// prevent i18next to be initialized multiple times</span></span><br><span class="line">  i18next</span><br><span class="line">    <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">    .use(initReactI18next)</span><br><span class="line">    <span class="comment">// i18next-locize-backend</span></span><br><span class="line">    <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">    <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">    .use(Backend)</span><br><span class="line">    <span class="comment">// detect user language</span></span><br><span class="line">    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">    .use(LanguageDetector)</span><br><span class="line">    <span class="comment">// init i18next</span></span><br><span class="line">    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      ...i18nextOptions,</span><br><span class="line">      <span class="comment">// This function detects the namespaces your routes rendered while SSR use</span></span><br><span class="line">      <span class="comment">// and pass them here to load the translations</span></span><br><span class="line">      <span class="attr">ns</span>: getInitialNamespaces(),</span><br><span class="line">      <span class="attr">detection</span>: &#123;</span><br><span class="line">        <span class="comment">// Here only enable htmlTag detection, we&#x27;ll detect the language only</span></span><br><span class="line">        <span class="comment">// server-side with remix-i18next, by using the `&lt;html lang&gt;` attribute</span></span><br><span class="line">        <span class="comment">// we can communicate to the client the language detected server-side</span></span><br><span class="line">        <span class="attr">order</span>: [<span class="string">&#x27;htmlTag&#x27;</span>],</span><br><span class="line">        <span class="comment">// Because we only use htmlTag, there&#x27;s no reason to cache the language</span></span><br><span class="line">        <span class="comment">// on the browser, so we disable it</span></span><br><span class="line">        <span class="attr">caches</span>: [],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">      <span class="attr">saveMissing</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// then hydrate your app</span></span><br><span class="line">      <span class="keyword">return</span> hydrate(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">I18nextProvider</span> <span class="attr">i18n</span>=<span class="string">&#123;i18next&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">RemixBrowser</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">I18nextProvider</span>&gt;</span></span>,</span><br><span class="line">        <span class="built_in">document</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each time you&#39;ll use a new key, it will be sent to locize, i.e.:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;t(<span class="string">&#x27;new.key&#x27;</span>, <span class="string">&#x27;this will be added automatically&#x27;</span>)&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>will result in locize like this:</p><p><img src="missing_key.jpg" alt="missing key" title="locize © inweso GmbH"></p><h4 id="👀-but-there-39-s-more"><a href="#👀-but-there-39-s-more" class="headerlink" title="👀 but there&#39;s more... "></a>👀 but there&#39;s more... <a name="more"></a></h4><p>Thanks to the <a href="https://github.com/locize/locize-lastused">locize-lastused</a> plugin, you&#39;ll be able to <a href="https://docs.locize.com/guides-tips-and-tricks/unused-translations">find and filter in locize which keys are used or not used anymore</a>.</p><p>With the help of the <a href="https://github.com/locize/locize">locize</a> plugin, you&#39;ll be able to use your app within the locize <a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>.</p><p>Lastly, with the help of the <a href="https://docs.locize.com/whats-inside/auto-machine-translation">auto-machinetranslation workflow</a> and the use of the <a href="https://www.i18next.com/overview/configuration-options#missing-keys">saveMissing functionality</a>, new keys not only gets added to locize automatically, while developing the app, but are also automatically translated into the target languages using machine translation.</p><p><em>Check out this <a href="https://youtu.be/VfxBpSXarlU">video</a> to see how the automatic machine translation workflow looks like!</em></p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/VfxBpSXarlU" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><code>npm install locize-lastused locize</code></p><p>use them like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hydrate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; RemixBrowser &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; I18nextProvider, initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getInitialNamespaces &#125; <span class="keyword">from</span> <span class="string">&#x27;remix-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LastUsed <span class="keyword">from</span> <span class="string">&#x27;locize-lastused&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; locizePlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextOptions <span class="keyword">from</span> <span class="string">&#x27;./i18nextOptions&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;f6d74b76-9677-4a0d-b400-86e1507397ab&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;1c2bbc21-027d-4f41-995a-e8beb451cdef&#x27;</span>, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">version</span>: <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize i18next using initReactI18next and configuring it</span></span><br><span class="line"><span class="keyword">if</span> (!i18next.isInitialized) &#123; <span class="comment">// prevent i18next to be initialized multiple times</span></span><br><span class="line">  i18next</span><br><span class="line">    <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">    .use(initReactI18next)</span><br><span class="line">    <span class="comment">// i18next-locize-backend</span></span><br><span class="line">    <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">    <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">    .use(Backend)</span><br><span class="line">    <span class="comment">// detect user language</span></span><br><span class="line">    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">    .use(LanguageDetector)</span><br><span class="line">    <span class="comment">// locize-lastused</span></span><br><span class="line">    <span class="comment">// sets a timestamp of last access on every translation segment on locize</span></span><br><span class="line">    <span class="comment">// -&gt; safely remove the ones not being touched for weeks/months</span></span><br><span class="line">    <span class="comment">// https://github.com/locize/locize-lastused</span></span><br><span class="line">    .use(LastUsed)</span><br><span class="line">    <span class="comment">// locize-editor</span></span><br><span class="line">    <span class="comment">// InContext Editor of locize</span></span><br><span class="line">    .use(locizePlugin)</span><br><span class="line">    <span class="comment">// init i18next</span></span><br><span class="line">    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      ...i18nextOptions,</span><br><span class="line">      <span class="comment">// This function detects the namespaces your routes rendered while SSR use</span></span><br><span class="line">      <span class="comment">// and pass them here to load the translations</span></span><br><span class="line">      <span class="attr">ns</span>: getInitialNamespaces(),</span><br><span class="line">      <span class="attr">detection</span>: &#123;</span><br><span class="line">        <span class="comment">// Here only enable htmlTag detection, we&#x27;ll detect the language only</span></span><br><span class="line">        <span class="comment">// server-side with remix-i18next, by using the `&lt;html lang&gt;` attribute</span></span><br><span class="line">        <span class="comment">// we can communicate to the client the language detected server-side</span></span><br><span class="line">        <span class="attr">order</span>: [<span class="string">&#x27;htmlTag&#x27;</span>],</span><br><span class="line">        <span class="comment">// Because we only use htmlTag, there&#x27;s no reason to cache the language</span></span><br><span class="line">        <span class="comment">// on the browser, so we disable it</span></span><br><span class="line">        <span class="attr">caches</span>: [],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">      <span class="attr">locizeLastUsed</span>: locizeOptions,</span><br><span class="line">      <span class="attr">saveMissing</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// then hydrate your app</span></span><br><span class="line">      <span class="keyword">return</span> hydrate(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">I18nextProvider</span> <span class="attr">i18n</span>=<span class="string">&#123;i18next&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">RemixBrowser</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">I18nextProvider</span>&gt;</span></span>,</span><br><span class="line">        <span class="built_in">document</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://docs.locize.com/whats-inside/auto-machine-translation">Automatic machine translation</a>:</p><p><img src="missing_key_auto_mt.jpg" alt="missing key auto" title="locize © inweso GmbH"></p><p><a href="(https://docs.locize.com/guides-tips-and-tricks/unused-translations)">Last used translations filter</a>:</p><p><img src="last_used.jpg" alt="i18next last used" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>:</p><p><img src="in_context.jpg" alt="i18next incontext" title="locize © inweso GmbH"></p><h4 id="📦-Let-39-s-prepare-for-production-🚀"><a href="#📦-Let-39-s-prepare-for-production-🚀" class="headerlink" title="📦 Let&#39;s prepare for production 🚀 "></a>📦 Let&#39;s prepare for production 🚀 <a name="production"></a></h4><p>Now, we prepare the app for <a href="https://docs.locize.com/guides-tips-and-tricks/going-production">going to production</a>.</p><p>First in locize, create a dedicated version for production. Do not enable auto publish for that version but publish manually or via <a href="https://docs.locize.com/integration/api#publish-version">API</a> or via <a href="https://github.com/locize/locize-cli#publish-version">CLI</a>.Lastly, <a href="https://docs.locize.com/more/caching">enable Cache-Control max-age​</a> for that production version.</p><p>Let&#39;s adapt the <code>entry.client.jsx</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hydrate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; RemixBrowser &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; I18nextProvider, initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getInitialNamespaces &#125; <span class="keyword">from</span> <span class="string">&#x27;remix-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LastUsed <span class="keyword">from</span> <span class="string">&#x27;locize-lastused&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; locizePlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextOptions <span class="keyword">from</span> <span class="string">&#x27;./i18nextOptions&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isProduction = process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;f6d74b76-9677-4a0d-b400-86e1507397ab&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: !isProduction ? <span class="string">&#x27;1c2bbc21-027d-4f41-995a-e8beb451cdef&#x27;</span> : <span class="literal">undefined</span>, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">version</span>: isProduction ? <span class="string">&#x27;production&#x27;</span> : <span class="string">&#x27;latest&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isProduction) &#123;</span><br><span class="line">  <span class="comment">// locize-lastused</span></span><br><span class="line">  <span class="comment">// sets a timestamp of last access on every translation segment on locize</span></span><br><span class="line">  <span class="comment">// -&gt; safely remove the ones not being touched for weeks/months</span></span><br><span class="line">  <span class="comment">// https://github.com/locize/locize-lastused</span></span><br><span class="line">  i18next.use(LastUsed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize i18next using initReactI18next and configuring it</span></span><br><span class="line"><span class="keyword">if</span> (!i18next.isInitialized) &#123; <span class="comment">// prevent i18next to be initialized multiple times</span></span><br><span class="line">  i18next</span><br><span class="line">    <span class="comment">// locize-editor</span></span><br><span class="line">    <span class="comment">// InContext Editor of locize</span></span><br><span class="line">    .use(locizePlugin)</span><br><span class="line">    <span class="comment">// i18next-locize-backend</span></span><br><span class="line">    <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">    <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">    .use(Backend)</span><br><span class="line">    <span class="comment">// detect user language</span></span><br><span class="line">    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">    .use(LanguageDetector)</span><br><span class="line">    <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">    .use(initReactI18next)</span><br><span class="line">    <span class="comment">// init i18next</span></span><br><span class="line">    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      ...i18nextOptions,</span><br><span class="line">      <span class="comment">// This function detects the namespaces your routes rendered while SSR use</span></span><br><span class="line">      <span class="comment">// and pass them here to load the translations</span></span><br><span class="line">      <span class="attr">ns</span>: getInitialNamespaces(),</span><br><span class="line">      <span class="attr">detection</span>: &#123;</span><br><span class="line">        <span class="comment">// Here only enable htmlTag detection, we&#x27;ll detect the language only</span></span><br><span class="line">        <span class="comment">// server-side with remix-i18next, by using the `&lt;html lang&gt;` attribute</span></span><br><span class="line">        <span class="comment">// we can communicate to the client the language detected server-side</span></span><br><span class="line">        <span class="attr">order</span>: [<span class="string">&#x27;htmlTag&#x27;</span>],</span><br><span class="line">        <span class="comment">// Because we only use htmlTag, there&#x27;s no reason to cache the language</span></span><br><span class="line">        <span class="comment">// on the browser, so we disable it</span></span><br><span class="line">        <span class="attr">caches</span>: [],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">      <span class="attr">locizeLastUsed</span>: locizeOptions,</span><br><span class="line">      <span class="attr">saveMissing</span>: !isProduction <span class="comment">// you should not use saveMissing in production</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// then hydrate your app</span></span><br><span class="line">      <span class="keyword">return</span> hydrate(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">I18nextProvider</span> <span class="attr">i18n</span>=<span class="string">&#123;i18next&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">RemixBrowser</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">I18nextProvider</span>&gt;</span></span>,</span><br><span class="line">        <span class="built_in">document</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, during development, you&#39;ll continue to save missing keys and to make use of lastused feature. =&gt; <code>npm run dev</code></p><p>And in production environment, saveMissing and lastused are disabled. =&gt; <code>npm run build &amp;&amp; npm start</code></p><p><a href="https://docs.locize.com/more/caching">Caching</a>:</p><p><img src="caching.jpg" alt="i18next caching" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/versioning#merging-versions">Merging versions</a>:</p><p><img src="overwrite_version.jpg" alt="overwrite version" title="locize © inweso GmbH"></p><p><em>🧑‍💻 The complete code can be found <a href="https://github.com/locize/locize-remix-i18next-example">here</a>.</em></p><p><em>Check also the <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY&t=294s">code integration part</a> in this <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY">YouTube video</a>.</em></p><p>There&#39;s also an <a href="https://youtu.be/SA_9i4TtxLQ">i18next crash course video</a>.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/SA_9i4TtxLQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>Awesome! Thanks to <a href="https://github.com/sergiodxa/remix-i18next">remix-i18next</a>, <a href="https://www.i18next.com/">i18next</a>, <a href="https://react.i18next.com/">react-i18next</a> and <a href="https://locize.com/">locize</a> your continuous localization workflow is ready to go.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth trying the <a href="https://locize.com/">localization management platform - locize</a>.</p><p>The founders of <a href="https://locize.com/">locize</a> are also the creators of <a href="https://www.i18next.com/">i18next</a>. So by using <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.</p><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> react </tag>
            
            <tag> react-i18next </tag>
            
            <tag> remix-i18next </tag>
            
            <tag> remix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to internationalize a Remix application (Part 1)</title>
      <link href="/blog/remix-i18n/"/>
      <url>/blog/remix-i18n/</url>
      
        <content type="html"><![CDATA[<p><img src="remix-localization.jpg" alt="remix localization" title="Remix Localization example"></p><p>Let&#39;s talk about internationalization (i18n) for <a href="https://remix.run/">Remix</a>...</p><p>When it comes to JavaScript localization, one of the most popular frameworks is <a href="https://www.i18next.com/">i18next</a> and one of the most famous Remix module for i18next is <a href="https://github.com/sergiodxa/remix-i18next">remix-i18next</a>.It was created in October 2021 by <a href="https://github.com/sergiodxa">Sergio Xalambrí</a>.</p><p><em><strong>There is also a <a href="../remix-i18next/">second part of this blog post</a>, that focuses more on a continuous localization workflow.</strong></em></p><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><ul><li><a href="#why-i18next">So first of all: &quot;Why i18next?&quot;</a></li><li><a href="#start">Let&#39;s get into it...</a><ul><li><a href="#prerequisites">Prerequisites</a></li><li><a href="#getting-started">Getting started</a></li><li><a href="#language-switcher">Language Switcher</a></li><li><a href="#voluntary">The voluntary part</a></li></ul></li><li><a href="#congratulations">🎉🥳 Congratulations 🎊🎁</a></li><li><a href="../remix-i18next/">Part 2</a></li></ul><h2 id="So-first-of-all-quot-Why-i18next-quot"><a href="#So-first-of-all-quot-Why-i18next-quot" class="headerlink" title="So first of all: &quot;Why i18next?&quot; "></a>So first of all: &quot;Why i18next?&quot; <a name="why-i18next"></a></h2><p><em>i18next was created in late 2011. It&#39;s older than most of the libraries you will use nowadays, including your main frontend technology (<a href="../react-i18next/">React</a>, <a href="../angular-i18next/">Angular</a>, <a href="../i18next-vue/">Vue</a>, ...).</em><br /><strong>➡️ sustainable</strong></p><p><em>Based on how long i18next already is available open source, there is no real i18n case that could not be solved with i18next.</em><br /><strong>➡️ mature</strong></p><p><em>i18next can be used in any javascript (and a few non-javascript - .net, elm, iOS, android, ruby, ...) environment, with any UI framework, with any i18n format, ... <a href="https://www.i18next.com/overview/supported-frameworks">the possibilities are endless</a>.</em><br /><strong>➡️ extensible</strong></p><p><em>There is a plenty of features and possibilities you&#39;ll get with i18next compared to other regular i18n frameworks.</em><br /><strong>➡️ rich</strong></p><p><a href="https://www.i18next.com/overview/comparison-to-others">Here</a> you can find more information about why i18next is special and <a href="https://locize.com/i18next.html#how-does-i18next-work">how it works</a>.</p><h2 id="Let-39-s-get-into-it"><a href="#Let-39-s-get-into-it" class="headerlink" title="Let&#39;s get into it... "></a>Let&#39;s get into it... <a name="start"></a></h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites "></a>Prerequisites <a name="prerequisites"></a></h3><p>Make sure you have Node.js and npm installed. It&#39;s best, if you have some experience with simple HTML, JavaScript and basic <a href="https://reactjs.org/">React</a> and <a href="https://remix.run/">Remix</a>, before jumping to <a href="https://github.com/sergiodxa/remix-i18next">remix-i18next</a>.</p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started "></a>Getting started <a name="getting-started"></a></h3><p>Take your own Remix project or use this example app <a href="https://github.com/locize/locize-remix-i18next-example/tree/start">here</a>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b start git@github.com:locize/locize-remix-i18next-example.git</span><br><span class="line"><span class="built_in">cd</span> locize-remix-i18next-example</span><br><span class="line">npm i</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>We are going to adapt the app to detect the language according to the user’s preference.And we will create a language switcher to make the content change between different languages.</p><p>Let&#39;s install some i18next dependencies:</p><ul><li><a href="https://github.com/sergiodxa/remix-i18next">remix-i18next</a></li><li><a href="https://www.i18next.com/">i18next</a></li><li><a href="https://react.i18next.com/">react-i18next</a></li><li><a href="https://github.com/i18next/i18next-browser-languageDetector">i18next-browser-languagedetector</a></li><li><a href="https://github.com/i18next/i18next-fs-backend">i18next-fs-backend</a></li><li><a href="https://github.com/i18next/i18next-http-backend">i18next-http-backend</a></li></ul><p><code>npm install remix-i18next i18next react-i18next i18next-browser-languagedetector i18next-fs-backend i18next-http-backend</code></p><p>Create a <code>i18nextOptions.js</code> file and add the following code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">debug</span>: process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">supportedLngs</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>],</span><br><span class="line">  <span class="attr">defaultNS</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">  <span class="attr">react</span>: &#123; <span class="attr">useSuspense</span>: <span class="literal">false</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And a <code>i18n.server.js</code> file and add the following code:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RemixI18Next &#125; <span class="keyword">from</span> <span class="string">&#x27;remix-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextOptions <span class="keyword">from</span> <span class="string">&#x27;./i18nextOptions&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-fs-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> RemixI18Next(&#123;</span><br><span class="line">  <span class="attr">detection</span>: &#123;</span><br><span class="line">    <span class="comment">// This is the list of languages your application supports</span></span><br><span class="line">    <span class="attr">supportedLanguages</span>: i18nextOptions.supportedLngs,</span><br><span class="line">    <span class="comment">// This is the language you want to use in case the user language is not</span></span><br><span class="line">    <span class="comment">// listed above</span></span><br><span class="line">    <span class="attr">fallbackLanguage</span>: i18nextOptions.fallbackLng,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// This is the configuration for i18next used when translating messages server</span></span><br><span class="line">  <span class="comment">// side only</span></span><br><span class="line">  <span class="attr">i18next</span>: &#123;</span><br><span class="line">    <span class="attr">backend</span>: &#123; <span class="attr">loadPath</span>: resolve(<span class="string">&#x27;./public/locales/&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span>) &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// The backend you want to use to load the translations</span></span><br><span class="line">  <span class="comment">// Tip: You could pass `resources` to the `i18next` configuration and avoid</span></span><br><span class="line">  <span class="comment">// a backend here</span></span><br><span class="line">  <span class="attr">backend</span>: Backend,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Prepare some folders like this:<img src="folder.jpg"></p><p>Now in your <code>entry.client.jsx</code> adapt the code like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; hydrate &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; RemixBrowser &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; I18nextProvider, initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-http-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getInitialNamespaces &#125; <span class="keyword">from</span> <span class="string">&#x27;remix-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextOptions <span class="keyword">from</span> <span class="string">&#x27;./i18nextOptions&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize i18next using initReactI18next and configuring it</span></span><br><span class="line"><span class="keyword">if</span> (!i18next.isInitialized) <span class="comment">// prevent i18next to be initialized multiple times</span></span><br><span class="line">  i18next</span><br><span class="line">    .use(initReactI18next) <span class="comment">// Tell i18next to use the react-i18next plugin</span></span><br><span class="line">    .use(LanguageDetector) <span class="comment">// Setup a client-side language detector</span></span><br><span class="line">    .use(Backend) <span class="comment">// Setup your backend</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      ...i18nextOptions,</span><br><span class="line">      <span class="attr">backend</span>: &#123; <span class="attr">loadPath</span>: <span class="string">&#x27;/locales/&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span> &#125;,</span><br><span class="line">      <span class="comment">// This function detects the namespaces your routes rendered while SSR use</span></span><br><span class="line">      <span class="comment">// and pass them here to load the translations</span></span><br><span class="line">      <span class="attr">ns</span>: getInitialNamespaces(),</span><br><span class="line">      <span class="attr">detection</span>: &#123;</span><br><span class="line">        <span class="comment">// Here only enable htmlTag detection, we&#x27;ll detect the language only</span></span><br><span class="line">        <span class="comment">// server-side with remix-i18next, by using the `&lt;html lang&gt;` attribute</span></span><br><span class="line">        <span class="comment">// we can communicate to the client the language detected server-side</span></span><br><span class="line">        <span class="attr">order</span>: [<span class="string">&#x27;htmlTag&#x27;</span>],</span><br><span class="line">        <span class="comment">// Because we only use htmlTag, there&#x27;s no reason to cache the language</span></span><br><span class="line">        <span class="comment">// on the browser, so we disable it</span></span><br><span class="line">        <span class="attr">caches</span>: [],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// then hydrate your app wrapped in the I18nextProvider</span></span><br><span class="line">      <span class="keyword">return</span> hydrate(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">I18nextProvider</span> <span class="attr">i18n</span>=<span class="string">&#123;i18next&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">RemixBrowser</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">I18nextProvider</span>&gt;</span></span>,</span><br><span class="line">        <span class="built_in">document</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>And in your <code>entry.server.jsx</code> adapt the code like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/server&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; RemixServer &#125; <span class="keyword">from</span> <span class="string">&#x27;remix&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; I18nextProvider, initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-fs-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextOptions <span class="keyword">from</span> <span class="string">&#x27;./i18nextOptions&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n.server&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  request,</span></span></span><br><span class="line"><span class="params"><span class="function">  statusCode,</span></span></span><br><span class="line"><span class="params"><span class="function">  headers,</span></span></span><br><span class="line"><span class="params"><span class="function">  context</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// First, we create a new instance of i18next so every request will have a</span></span><br><span class="line">  <span class="comment">// completely unique instance and not share any state</span></span><br><span class="line">  <span class="keyword">const</span> instance = createInstance()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Then we could detect locale from the request</span></span><br><span class="line">  <span class="keyword">const</span> lng = <span class="keyword">await</span> i18n.getLocale(request)</span><br><span class="line">  <span class="comment">// And here we detect what namespaces the routes about to render want to use</span></span><br><span class="line">  <span class="keyword">const</span> ns = i18n.getRouteNamespaces(context)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// First, we create a new instance of i18next so every request will have a</span></span><br><span class="line">  <span class="comment">// completely unique instance and not share any state.</span></span><br><span class="line">  <span class="keyword">await</span> instance</span><br><span class="line">    .use(initReactI18next) <span class="comment">// Tell our instance to use react-i18next</span></span><br><span class="line">    .use(Backend) <span class="comment">// Setup our backend.init(&#123;</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      ...i18nextOptions, <span class="comment">// use the same configuration as in your client side.</span></span><br><span class="line">      lng, <span class="comment">// The locale we detected above</span></span><br><span class="line">      ns, <span class="comment">// The namespaces the routes about to render want to use</span></span><br><span class="line">      <span class="attr">backend</span>: &#123;</span><br><span class="line">        <span class="attr">loadPath</span>: resolve(<span class="string">&quot;./public/locales/&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&quot;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Then you can render your app wrapped in the I18nextProvider as in the</span></span><br><span class="line">  <span class="comment">// entry.client file</span></span><br><span class="line">  <span class="keyword">const</span> markup = renderToString(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">I18nextProvider</span> <span class="attr">i18n</span>=<span class="string">&#123;instance&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">RemixServer</span> <span class="attr">context</span>=<span class="string">&#123;context&#125;</span> <span class="attr">url</span>=<span class="string">&#123;request.url&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">I18nextProvider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  headers.set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span> + markup, &#123;</span><br><span class="line">    <span class="attr">status</span>: statusCode,</span><br><span class="line">    <span class="attr">headers</span>: headers,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The last important piece is the <code>root.jsx</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Links,</span><br><span class="line">  LiveReload,</span><br><span class="line">  Meta,</span><br><span class="line">  Outlet,</span><br><span class="line">  Scripts,</span><br><span class="line">  ScrollRestoration,</span><br><span class="line">  useLoaderData</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; json &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/node&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useChangeLanguage &#125; <span class="keyword">from</span> <span class="string">&#x27;remix-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> remixI18n <span class="keyword">from</span> <span class="string">&#x27;./i18n.server&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./styles/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loader = <span class="keyword">async</span> (&#123; request &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> locale = <span class="keyword">await</span> remixI18n.getLocale(request)</span><br><span class="line">  <span class="keyword">const</span> t = <span class="keyword">await</span> remixI18n.getFixedT(request, <span class="string">&#x27;common&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = t(<span class="string">&#x27;headTitle&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> json(&#123; locale, title &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handle = &#123;</span><br><span class="line">  <span class="comment">// In the handle export, we could add a i18n key with namespaces our route</span></span><br><span class="line">  <span class="comment">// will need to load. This key can be a single string or an array of strings.</span></span><br><span class="line">  <span class="attr">i18n</span>: [<span class="string">&#x27;common&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">meta</span>(<span class="params">&#123; data &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">title</span>: data.title &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> links = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [&#123; <span class="attr">rel</span>: <span class="string">&#x27;stylesheet&#x27;</span>, <span class="attr">href</span>: styles &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; i18n &#125; = useTranslation()</span><br><span class="line">  <span class="keyword">const</span> &#123; locale &#125; = useLoaderData()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// This hook will change the i18n instance language to the current locale</span></span><br><span class="line">  <span class="comment">// detected by the loader, this way, when we do something to change the</span></span><br><span class="line">  <span class="comment">// language, this locale will change and i18next will load the correct</span></span><br><span class="line">  <span class="comment">// translation files</span></span><br><span class="line">  useChangeLanguage(locale)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#123;i18n.language&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charSet</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Meta</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Links</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ScrollRestoration</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Scripts</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">LiveReload</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We&#39;re ready to start to use the <code>t</code> function.<br />In your pages files, you can now use react-i18next to access the <code>t</code> function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handle = &#123;</span><br><span class="line">  <span class="comment">// In the handle export, we could add a i18n key with namespaces our route</span></span><br><span class="line">  <span class="comment">// will need to load. This key can be a single string or an array of strings.</span></span><br><span class="line">  <span class="attr">i18n</span>: [<span class="string">&#x27;index&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t, ready, i18n &#125; = useTranslation(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!ready) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span> <span class="comment">// i18next may not be ready when changing route with &lt;Link&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;t(&#x27;title&#x27;)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Add the keys to your translations, i.e. <code>public/locales/en/index.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Welcome to Remix&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can do this for all your pages and components:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link, useLoaderData &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; json &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/node&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation, withTranslation, Trans &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;../logo.svg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;../styles/app.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">&#x27;../components/Loading&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> links = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [&#123; <span class="attr">rel</span>: <span class="string">&#x27;stylesheet&#x27;</span>, <span class="attr">href</span>: styles &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LegacyWelcomeClass</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; t &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;t(&#x27;title&#x27;)&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Welcome = withTranslation(<span class="string">&#x27;index&#x27;</span>)(LegacyWelcomeClass)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component using the Trans component</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params">&#123; t &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Trans</span> <span class="attr">t</span>=<span class="string">&#123;t&#125;</span> <span class="attr">i18nKey</span>=<span class="string">&quot;description.part1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      To get started, edit <span class="tag">&lt;<span class="name">code</span>&gt;</span>src/App.js<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and save to reload.</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handle = &#123;</span><br><span class="line">  <span class="comment">// In the handle export, we could add a i18n key with namespaces our route</span></span><br><span class="line">  <span class="comment">// will need to load. This key can be a single string or an array of strings.</span></span><br><span class="line">  <span class="attr">i18n</span>: [<span class="string">&#x27;index&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t, ready, i18n &#125; = useTranslation(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!ready) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span> <span class="comment">// i18next may not be ready when changing route with &lt;Link&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Welcome</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App-intro&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">t</span>=<span class="string">&#123;t&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;t(&#x27;description.part2&#x27;)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/second&quot;</span>&gt;</span>&#123;t(&#x27;goto.second&#x27;)&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This looks like the normal <a href="https://react.i18next.com/">react-i18next</a> usage.<br />Due to we&#39;re not using <code>Suspense</code> here, just make sure you check the <code>ready</code> flag before calling the <code>t</code> function. The translations will get lazy loaded as soon as you navigate on client side to another page.</p><p>We can also translate stuff like the page title.<br />Since remix-i18next can translate text inside loaders or actions, we can do this for example in our <code>root.jsx</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Links,</span><br><span class="line">  LiveReload,</span><br><span class="line">  Meta,</span><br><span class="line">  Outlet,</span><br><span class="line">  Scripts,</span><br><span class="line">  ScrollRestoration,</span><br><span class="line">  useLoaderData</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; json &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/node&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useChangeLanguage &#125; <span class="keyword">from</span> <span class="string">&#x27;remix-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> remixI18n <span class="keyword">from</span> <span class="string">&#x27;./i18n.server&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./styles/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loader = <span class="keyword">async</span> (&#123; request &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> locale = <span class="keyword">await</span> remixI18n.getLocale(request)</span><br><span class="line">  <span class="keyword">const</span> t = <span class="keyword">await</span> remixI18n.getFixedT(request, <span class="string">&#x27;common&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = t(<span class="string">&#x27;headTitle&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> json(&#123; locale, title &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handle = &#123;</span><br><span class="line">  <span class="comment">// In the handle export, we could add a i18n key with namespaces our route</span></span><br><span class="line">  <span class="comment">// will need to load. This key can be a single string or an array of strings.</span></span><br><span class="line">  <span class="attr">i18n</span>: [<span class="string">&#x27;common&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">meta</span>(<span class="params">&#123; data &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">title</span>: data.title &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> links = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [&#123; <span class="attr">rel</span>: <span class="string">&#x27;stylesheet&#x27;</span>, <span class="attr">href</span>: styles &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; i18n &#125; = useTranslation()</span><br><span class="line">  <span class="keyword">const</span> &#123; locale &#125; = useLoaderData()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// This hook will change the i18n instance language to the current locale</span></span><br><span class="line">  <span class="comment">// detected by the loader, this way, when we do something to change the</span></span><br><span class="line">  <span class="comment">// language, this locale will change and i18next will load the correct</span></span><br><span class="line">  <span class="comment">// translation files</span></span><br><span class="line">  useChangeLanguage(locale)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#123;i18n.resolvedLanguage&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charSet</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Meta</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Links</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ScrollRestoration</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Scripts</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">LiveReload</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Add the keys to your translations, i.e. <code>public/locales/en/common.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;headTitle&quot;</span>: <span class="string">&quot;New Remix App&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Language-Switcher"><a href="#Language-Switcher" class="headerlink" title="Language Switcher "></a>Language Switcher <a name="language-switcher"></a></h3><p>remix-i18next by default will detect the current language in this order:</p><ul><li>the lng search parameter</li><li>a cookie (if you pass one)</li><li>the session (if you pass the sessionStorage)</li><li>the Accept-Language header</li><li>the fallback language you configured</li></ul><p>We additionally like to offer the possibility to change the language via some sort of language switcher.</p><p>So let&#39;s add a section in our <code>index.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link, useLoaderData &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; json &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/node&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation, withTranslation, Trans &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;../logo.svg&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;../styles/app.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">&#x27;../components/Loading&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loader = <span class="keyword">async</span> (&#123; request &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> json(&#123;</span><br><span class="line">    <span class="attr">lngs</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;English&#x27;</span> &#125;,</span><br><span class="line">      <span class="attr">de</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;Deutsch&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handle = &#123;</span><br><span class="line">  <span class="comment">// In the handle export, we could add a i18n key with namespaces our route</span></span><br><span class="line">  <span class="comment">// will need to load. This key can be a single string or an array of strings.</span></span><br><span class="line">  <span class="attr">i18n</span>: [<span class="string">&#x27;index&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> links = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [&#123; <span class="attr">rel</span>: <span class="string">&#x27;stylesheet&#x27;</span>, <span class="attr">href</span>: styles &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LegacyWelcomeClass</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; t &#125; = <span class="built_in">this</span>.props</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;t(&#x27;title&#x27;)&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Welcome = withTranslation(<span class="string">&#x27;index&#x27;</span>)(LegacyWelcomeClass)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Component using the Trans component</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params">&#123; t &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Trans</span> <span class="attr">t</span>=<span class="string">&#123;t&#125;</span> <span class="attr">i18nKey</span>=<span class="string">&quot;description.part1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      To get started, edit <span class="tag">&lt;<span class="name">code</span>&gt;</span>src/App.js<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and save to reload.</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; lngs &#125; = useLoaderData()</span><br><span class="line">  <span class="keyword">const</span> &#123; t, ready, i18n &#125; = useTranslation(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!ready) <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Loading</span> /&gt;</span></span> <span class="comment">// i18next may not be ready when changing route with &lt;Link&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Welcome</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App-intro&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;Object.keys(lngs).map((lng) =&gt; (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">Link</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">key</span>=<span class="string">&#123;lng&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginRight:</span> <span class="attr">5</span>, <span class="attr">fontWeight:</span> <span class="attr">i18n.resolvedLanguage</span> === <span class="string">lng</span> ? &#x27;<span class="attr">bold</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">normal</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">to</span>=<span class="string">&#123;</span>`/?<span class="attr">lng</span>=<span class="string">$&#123;lng&#125;</span>`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span></span></span><br><span class="line"><span class="xml">              &#123;lngs[lng].nativeName&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">          ))&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">t</span>=<span class="string">&#123;t&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;t(&#x27;description.part2&#x27;)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/second&quot;</span>&gt;</span>&#123;t(&#x27;goto.second&#x27;)&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To persist the current locale, we will save it in a cookie.Just create a new <code>cookie.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createCookie &#125; <span class="keyword">from</span> <span class="string">&#x27;remix&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> i18nCookie = createCookie(<span class="string">&#x27;i18n&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">sameSite</span>: <span class="string">&#x27;lax&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>And use it like this in <code>i18n.server.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; RemixI18Next &#125; <span class="keyword">from</span> <span class="string">&#x27;remix-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextOptions <span class="keyword">from</span> <span class="string">&#x27;./i18nextOptions&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-fs-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;node:path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; i18nCookie &#125; <span class="keyword">from</span> <span class="string">&#x27;./cookie&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> RemixI18Next(&#123;</span><br><span class="line">  <span class="attr">detection</span>: &#123;</span><br><span class="line">    <span class="comment">// persist language selection in cookie</span></span><br><span class="line">    <span class="attr">cookie</span>: i18nCookie,</span><br><span class="line">    <span class="comment">// This is the list of languages your application supports</span></span><br><span class="line">    <span class="attr">supportedLanguages</span>: i18nextOptions.supportedLngs,</span><br><span class="line">    <span class="comment">// This is the language you want to use in case the user language is not</span></span><br><span class="line">    <span class="comment">// listed above</span></span><br><span class="line">    <span class="attr">fallbackLanguage</span>: i18nextOptions.fallbackLng,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// This is the configuration for i18next used when translating messages server</span></span><br><span class="line">  <span class="comment">// side only</span></span><br><span class="line">  <span class="attr">i18next</span>: &#123;</span><br><span class="line">    <span class="attr">backend</span>: &#123; <span class="attr">loadPath</span>: resolve(<span class="string">&#x27;./public/locales/&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span>) &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// The backend you want to use to load the translations</span></span><br><span class="line">  <span class="comment">// Tip: You could pass `resources` to the `i18next` configuration and avoid</span></span><br><span class="line">  <span class="comment">// a backend here</span></span><br><span class="line">  <span class="attr">backend</span>: Backend,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>and also in <code>root.jsx</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Links,</span><br><span class="line">  LiveReload,</span><br><span class="line">  Meta,</span><br><span class="line">  Outlet,</span><br><span class="line">  Scripts,</span><br><span class="line">  ScrollRestoration,</span><br><span class="line">  useLoaderData</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; json &#125; <span class="keyword">from</span> <span class="string">&#x27;@remix-run/node&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useChangeLanguage &#125; <span class="keyword">from</span> <span class="string">&#x27;remix-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> remixI18n <span class="keyword">from</span> <span class="string">&#x27;./i18n.server&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./styles/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; i18nCookie &#125; <span class="keyword">from</span> <span class="string">&#x27;./cookie&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loader = <span class="keyword">async</span> (&#123; request &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> locale = <span class="keyword">await</span> remixI18n.getLocale(request)</span><br><span class="line">  <span class="keyword">const</span> t = <span class="keyword">await</span> remixI18n.getFixedT(request, <span class="string">&#x27;common&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> title = t(<span class="string">&#x27;headTitle&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> json(&#123; locale, title &#125;, &#123;</span><br><span class="line">    <span class="attr">headers</span>: &#123;<span class="string">&quot;Set-Cookie&quot;</span>: <span class="keyword">await</span> i18nCookie.serialize(locale)&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handle = &#123;</span><br><span class="line">  <span class="comment">// In the handle export, we could add a i18n key with namespaces our route</span></span><br><span class="line">  <span class="comment">// will need to load. This key can be a single string or an array of strings.</span></span><br><span class="line">  <span class="attr">i18n</span>: [<span class="string">&#x27;common&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">meta</span>(<span class="params">&#123; data &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">title</span>: data.title &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> links = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> [&#123; <span class="attr">rel</span>: <span class="string">&#x27;stylesheet&#x27;</span>, <span class="attr">href</span>: styles &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; i18n &#125; = useTranslation()</span><br><span class="line">  <span class="keyword">const</span> &#123; locale &#125; = useLoaderData()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// This hook will change the i18n instance language to the current locale</span></span><br><span class="line">  <span class="comment">// detected by the loader, this way, when we do something to change the</span></span><br><span class="line">  <span class="comment">// language, this locale will change and i18next will load the correct</span></span><br><span class="line">  <span class="comment">// translation files</span></span><br><span class="line">  useChangeLanguage(locale)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&#123;i18n.language&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charSet</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Meta</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Links</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ScrollRestoration</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Scripts</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">LiveReload</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So this means we&#39;re using the lng search parameter to change the language. And persist the current detected language in the cookie.</p><p><img src="app.jpg" alt="app" title="locize © inweso GmbH"><img src="app_de.jpg" alt="app de" title="locize © inweso GmbH"></p><p><strong>🥳 Awesome, the app is internationalized and we&#39;ve just created our first language switcher!</strong></p><p><em>🧑‍💻 The complete code can be found <a href="https://github.com/locize/locize-remix-i18next-example/tree/local">here</a>.</em></p><h3 id="The-voluntary-part"><a href="#The-voluntary-part" class="headerlink" title="The voluntary part "></a>The voluntary part <a name="voluntary"></a></h3><p><img src="transform_your_localization_process_small.jpg" alt="transform the localization process" title="locize © inweso GmbH"></p><p>Connect to an awesome translation management system and manage your translations outside of your code.</p><p>Let&#39;s synchronize the translation files with <a href="https://locize.com/">locize</a>.This can be done on-demand or on the CI-Server or before deploying the app.</p><h3 id="What-to-do-to-reach-this-step"><a href="#What-to-do-to-reach-this-step" class="headerlink" title="What to do to reach this step:"></a>What to do to reach this step:</h3><ol><li>in locize: signup at <a href="https://locize.app/register">https://locize.app/register</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a></li><li>in locize: <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a></li><li>in locize: add all your additional languages (this can also be done via <a href="https://docs.locize.com/integration/api#add-new-language">API</a>)</li><li>install the <a href="https://github.com/locize/locize-cli">locize-cli</a> (<code>npm i locize-cli</code>)</li></ol><h3 id="Use-the-locize-cli"><a href="#Use-the-locize-cli" class="headerlink" title="Use the locize-cli"></a>Use the <a href="https://github.com/locize/locize-cli">locize-cli</a></h3><p>Use the <code>locize sync</code> command to synchronize your local repository (<code>public/locales</code>) with what is published on locize.</p><p>Alternatively, you can also use the <code>locize download</code> command to always download the published locize translations to your local repository (<code>public/locales</code>) before bundling your app.</p><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>I hope you’ve learned a few new things about i18n in <a href="https://remix.run/">Remix</a>, <a href="https://github.com/sergiodxa/remix-i18next">remix-i18next</a>, <a href="https://www.i18next.com/">i18next</a> and <a href="https://locize.com/">modern localization workflows</a>.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth trying the <a href="https://locize.com/">localization management platform - locize</a>.</p><p>The founders of <a href="https://locize.com/">locize</a> are also the creators of <a href="https://www.i18next.com/">i18next</a>. So by using <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.</p><p>There&#39;s also an <a href="https://youtu.be/SA_9i4TtxLQ">i18next crash course video</a>.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/SA_9i4TtxLQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2><p><em>If you like to know how to unleash the full power of i18next, <a href="../remix-i18next/">check out <strong>&quot;Part 2&quot;</strong></a>!</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> react </tag>
            
            <tag> react-i18next </tag>
            
            <tag> remix-i18next </tag>
            
            <tag> remix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I18N in the Multiverse of Formats</title>
      <link href="/blog/i18n-formats-javascript/"/>
      <url>/blog/i18n-formats-javascript/</url>
      
        <content type="html"><![CDATA[<p><img src="i18n_in_the_multiverse_of_madness.jpg" title="I18N in the Multiverse of Madness"></p><p><em>Every night... I dream the same dream. And then... the nightmare begins.</em><br /><em>I do what I have to do... to protect i18n.</em><br /><em>With this blog post I open a doorway between universes, and I don&#39;t know who or what will walk through it...</em></p><blockquote><p>What do you know about the i18n format multiverse?</p></blockquote><p>Some folks have their theories... they believe it is dangerous.<br />I think they are right... but I want you at least to know that other parallel universes exist and what they look like.</p><h3 id="Clarification"><a href="#Clarification" class="headerlink" title="Clarification"></a>Clarification</h3><p>There are far more i18n formats than the ones I am listing here.In order not to get lost in the madness of the infinite i18n format universes, I limit myself here to the first eight formats used in the JavaScript ecosystem that I was able to find.</p><p>To define some sort of sorting, the formats are listed based on their weekly <a href="https://www.npmtrends.com/i18next-vs-intl-messageformat-vs-vue-i18n-vs-i18n-js-vs-node-polyglot-vs-jed-vs-fbt-vs-@fluent/bundle">downloads</a>:<img src="npmtrends.jpg"></p><ul><li><a href="#i18next">i18next</a></li><li><a href="#icu">ICU Message Format</a></li><li><a href="#vue-i18n">vue-i18n</a></li><li><a href="#i18n-js">i18n-js</a></li><li><a href="#polyglot">Polyglot.js</a></li><li><a href="#gettext">Gettext</a></li><li><a href="#fbt">FBT</a></li><li><a href="#fluent">Fluent</a></li></ul><h2 id="i18next"><a href="#i18next" class="headerlink" title="i18next "></a>i18next <a name="i18next"></a></h2><p>One of the most popular i18n format is the one used by the i18n framework <a href="https://www.i18next.com/">i18next</a>.<br />It is usually a <a href="https://www.i18next.com/misc/json-format">JSON based format</a> with ability to do <a href="https://www.i18next.com/translation-function/plurals">plurals</a> (also for languages with <a href="https://www.i18next.com/translation-function/plurals#languages-with-multiple-plurals">multiple plural forms</a>), <a href="https://www.i18next.com/translation-function/context">context</a>, <a href="https://www.i18next.com/translation-function/interpolation">interpolation</a>, <a href="https://www.i18next.com/translation-function/formatting">formatting</a>, <a href="https://www.i18next.com/translation-function/nesting">nesting</a> and more.</p><p>Let&#39;s imagine, we would like to show these text based on how many of which dessert I would like to eat:</p><ul><li>I would like to eat a cake.</li><li>I would like to eat 3 muffins.</li><li>I would like to eat something.</li></ul><p>So we can choose to eat what and how much to eat.</p><p>With this format it would look like this:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;dessert_cake_one&quot;</span>: <span class="string">&quot;I would like to eat a cake.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin_one&quot;</span>: <span class="string">&quot;I would like to eat a muffin.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_cake_other&quot;</span>: <span class="string">&quot;I would like to eat &#123;&#123;count&#125;&#125; cakes.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin_other&quot;</span>: <span class="string">&quot;I would like to eat &#123;&#123;count&#125;&#125; muffins.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert&quot;</span>: <span class="string">&quot;I would like to eat something.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the instrumented code may look like this <em>(may differ, based on your chosen technology)</em>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i18next.t(<span class="string">&#x27;dessert&#x27;</span>, &#123; <span class="attr">context</span>: <span class="string">&#x27;cake&#x27;</span>, <span class="attr">count</span>: <span class="number">1</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a cake.&quot;</span></span><br><span class="line">i18next.t(<span class="string">&#x27;dessert&#x27;</span>, &#123; <span class="attr">context</span>: <span class="string">&#x27;muffin&#x27;</span>, <span class="attr">count</span>: <span class="number">1</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a muffin.&quot;</span></span><br><span class="line">i18next.t(<span class="string">&#x27;dessert&#x27;</span>, &#123; <span class="attr">context</span>: <span class="string">&#x27;cake&#x27;</span>, <span class="attr">count</span>: <span class="number">5</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat 5 cakes.&quot;</span></span><br><span class="line">i18next.t(<span class="string">&#x27;dessert&#x27;</span>, &#123; <span class="attr">context</span>: <span class="string">&#x27;muffin&#x27;</span>, <span class="attr">count</span>: <span class="number">5</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat 5 muffins.&quot;</span></span><br><span class="line">i18next.t(<span class="string">&#x27;dessert&#x27;</span>) <span class="comment">// -&gt; &quot;I would like to eat something.&quot;</span></span><br></pre></td></tr></table></figure><p>You see the translation key remains the same for each invocation, and the <code>context</code> and <code>count</code> option differs.</p><p>btw: for a languages with multiple plural forms, the instrumented code keeps as is, but the translation json would be different.<br />This is an &quot;englishified&quot; example for Arabic plural rules <em>(so most people can read it)</em>:<br /><em>The <a href="https://unicode-org.github.io/cldr-staging/charts/37/supplemental/language_plural_rules.html">plural rule</a> for arabic is like this:</em></p><table><thead><tr><th>plural form</th><th>example count</th></tr></thead><tbody><tr><td>zero</td><td>0</td></tr><tr><td>one</td><td>1</td></tr><tr><td>two</td><td>2</td></tr><tr><td>few</td><td>3-10, 103-110, 1003, …</td></tr><tr><td>many</td><td>11-26, 111, 1011, …</td></tr><tr><td>other</td><td>100-102, 200-202, 300-302, 400-402, 500-502, 600, 1000, 10000, 100000, 1000000, …</td></tr></tbody></table><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;dessert_cake_zero&quot;</span>: <span class="string">&quot;I would like to eat no cake.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin_zero&quot;</span>: <span class="string">&quot;I would like to eat no muffin.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_cake_one&quot;</span>: <span class="string">&quot;I would like to eat a cake.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin_one&quot;</span>: <span class="string">&quot;I would like to eat a muffin.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_cake_two&quot;</span>: <span class="string">&quot;I would like to eat two cakes.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin_two&quot;</span>: <span class="string">&quot;I would like to eat two muffins.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_cake_few&quot;</span>: <span class="string">&quot;I would like to eat a few cakes.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin_few&quot;</span>: <span class="string">&quot;I would like to eat a few muffins.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_cake_many&quot;</span>: <span class="string">&quot;I would like to eat many cakes.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin_many&quot;</span>: <span class="string">&quot;I would like to eat many muffins.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_cake_other&quot;</span>: <span class="string">&quot;I would like to eat &#123;&#123;count&#125;&#125; cakes.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin_other&quot;</span>: <span class="string">&quot;I would like to eat &#123;&#123;count&#125;&#125; muffins.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert&quot;</span>: <span class="string">&quot;I would like to eat something.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i18next.t(<span class="string">&#x27;dessert&#x27;</span>, &#123; <span class="attr">context</span>: <span class="string">&#x27;cake&#x27;</span>, <span class="attr">count</span>: <span class="number">1</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a cake.&quot;</span></span><br><span class="line">i18next.t(<span class="string">&#x27;dessert&#x27;</span>, &#123; <span class="attr">context</span>: <span class="string">&#x27;muffin&#x27;</span>, <span class="attr">count</span>: <span class="number">2</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat two muffins.&quot;</span></span><br><span class="line">i18next.t(<span class="string">&#x27;dessert&#x27;</span>, &#123; <span class="attr">context</span>: <span class="string">&#x27;cake&#x27;</span>, <span class="attr">count</span>: <span class="number">5</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a few cakes.&quot;</span></span><br><span class="line">i18next.t(<span class="string">&#x27;dessert&#x27;</span>, &#123; <span class="attr">context</span>: <span class="string">&#x27;muffin&#x27;</span>, <span class="attr">count</span>: <span class="number">13</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat many muffins.&quot;</span></span><br><span class="line">i18next.t(<span class="string">&#x27;dessert&#x27;</span>, &#123; <span class="attr">context</span>: <span class="string">&#x27;cake&#x27;</span>, <span class="attr">count</span>: <span class="number">100</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat 100 cakes.&quot;</span></span><br><span class="line">i18next.t(<span class="string">&#x27;dessert&#x27;</span>) <span class="comment">// -&gt; &quot;I would like to eat something.&quot;</span></span><br></pre></td></tr></table></figure><p>With nesting we can also reduce the repetitions:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;eat&quot;</span>: <span class="string">&quot;I would like to eat&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_cake_one&quot;</span>: <span class="string">&quot;$t(eat) a cake.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin_one&quot;</span>: <span class="string">&quot;$t(eat) a muffin.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_cake_other&quot;</span>: <span class="string">&quot;$t(eat) &#123;&#123;count&#125;&#125; cakes.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin_other&quot;</span>: <span class="string">&quot;$t(eat) &#123;&#123;count&#125;&#125; muffins.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert&quot;</span>: <span class="string">&quot;$t(eat) something.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But it may be that the translators like this nesting substitution less.</p><h2 id="ICU-Message-Format"><a href="#ICU-Message-Format" class="headerlink" title="ICU Message Format "></a>ICU Message Format <a name="icu"></a></h2><p>The second format is the <a href="https://unicode-org.github.io/icu/userguide/format_parse/messages/">ICU Message Format</a>.<br />There are multiple JavaScript modules implementing the ICU message syntax. One of the most used is <a href="https://formatjs.io/docs/core-concepts/icu-syntax/">intl-messageformat</a> by <a href="https://formatjs.io/">Format.js</a>. It is used behind the scenes also in <a href="https://formatjs.io/docs/react-intl">react-intl</a>.</p><p>It is also a key/value based format that could be stored in a JSON or however you like:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createIntl &#125; <span class="keyword">from</span> <span class="string">&#x27;@formatjs/intl&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> intl = createIntl(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="attr">dessert</span>: <span class="string">`I would like to eat &#123;what, select,</span></span><br><span class="line"><span class="string">      cake &#123;&#123;count, plural,</span></span><br><span class="line"><span class="string">        one &#123;a cake&#125;</span></span><br><span class="line"><span class="string">        other &#123;&#123;count&#125; cakes&#125;</span></span><br><span class="line"><span class="string">      &#125;&#125;</span></span><br><span class="line"><span class="string">      muffin &#123;&#123;count, plural,</span></span><br><span class="line"><span class="string">        one &#123;a muffin&#125;</span></span><br><span class="line"><span class="string">        other &#123;&#123;count&#125; muffins&#125;</span></span><br><span class="line"><span class="string">      &#125;&#125;</span></span><br><span class="line"><span class="string">      other &#123;something&#125;</span></span><br><span class="line"><span class="string">    &#125;.`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It also offers plural and select, and the instrumented code may look like this <em>(may differ, based on your chosen technology)</em>:<br />Compared to the previous format, this one uses only 1 key to generate all variations. So the value may look a bit more complex.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">intl.formatMessage(&#123; <span class="attr">id</span>: <span class="string">&#x27;dessert&#x27;</span> &#125;, &#123; <span class="attr">what</span>: <span class="string">&#x27;cake&#x27;</span>, <span class="attr">count</span>: <span class="number">1</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a cake.&quot;</span></span><br><span class="line">intl.formatMessage(&#123; <span class="attr">id</span>: <span class="string">&#x27;dessert&#x27;</span> &#125;, &#123; <span class="attr">what</span>: <span class="string">&#x27;muffin&#x27;</span>, <span class="attr">count</span>: <span class="number">1</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a muffin.&quot;</span></span><br><span class="line">intl.formatMessage(&#123; <span class="attr">id</span>: <span class="string">&#x27;dessert&#x27;</span> &#125;, &#123; <span class="attr">what</span>: <span class="string">&#x27;cake&#x27;</span>, <span class="attr">count</span>: <span class="number">5</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat 5 cakes.&quot;</span></span><br><span class="line">intl.formatMessage(&#123; <span class="attr">id</span>: <span class="string">&#x27;dessert&#x27;</span> &#125;, &#123; <span class="attr">what</span>: <span class="string">&#x27;muffin&#x27;</span>, <span class="attr">count</span>: <span class="number">5</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat 5 muffins.&quot;</span></span><br><span class="line">intl.formatMessage(&#123; <span class="attr">id</span>: <span class="string">&#x27;dessert&#x27;</span> &#125;, &#123; <span class="attr">what</span>: <span class="literal">undefined</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat something.&quot;</span></span><br></pre></td></tr></table></figure><p>Also here the translation key remains the same for each invocation, and the context and count option differs.</p><h2 id="vue-i18n"><a href="#vue-i18n" class="headerlink" title="vue-i18n "></a>vue-i18n <a name="vue-i18n"></a></h2><p>The next found format, while exploring the multiverse, is the <a href="https://kazupon.github.io/vue-i18n/guide/messages.html#structure">vue-i18n format</a>. It is used practically only in the <a href="https://kazupon.github.io/vue-i18n/">vue-i18n</a> framework itself.<br />It is also able to do some <a href="https://kazupon.github.io/vue-i18n/guide/formatting.html#named-formatting">interpolation with formatting</a>, <a href="https://kazupon.github.io/vue-i18n/guide/pluralization.html">pluralization</a> and more. But a context feature is missing.</p><p>This is how our example would look like:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = createI18n(&#123;</span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="attr">en</span>: &#123;</span><br><span class="line">      <span class="attr">dessert_cake</span>: <span class="string">&#x27;I would like to eat a cake. | I would like to eat &#123;count&#125; cakes.&#x27;</span>,</span><br><span class="line">      <span class="attr">dessert_muffin</span>: <span class="string">&#x27;I would like to eat a muffin. | I would like to eat &#123;count&#125; muffins.&#x27;</span>,</span><br><span class="line">      <span class="attr">dessert</span>: <span class="string">&#x27;I would like to eat something.&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>And the corresponding invocation:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$t(<span class="string">&#x27;dessert_cake&#x27;</span>, &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a cake.&quot;</span></span><br><span class="line">$t(<span class="string">&#x27;dessert_muffin&#x27;</span>, &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a muffin.&quot;</span></span><br><span class="line">$t(<span class="string">&#x27;dessert_cake&#x27;</span>, &#123; <span class="attr">count</span>: <span class="number">5</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat 5 cakes.&quot;</span></span><br><span class="line">$t(<span class="string">&#x27;dessert_muffin&#x27;</span>, &#123; <span class="attr">count</span>: <span class="number">5</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat 5 muffins.&quot;</span></span><br><span class="line">$t(<span class="string">&#x27;dessert&#x27;</span>) <span class="comment">// -&gt; &quot;I would like to eat something.&quot;</span></span><br></pre></td></tr></table></figure><p>Compared the the previous formats, this one needs to change the translation key to accomplish a context like feature.</p><h2 id="i18n-js"><a href="#i18n-js" class="headerlink" title="i18n-js "></a>i18n-js <a name="i18n-js"></a></h2><p>The origin of this format start Ruby. The <a href="https://www.npmjs.com/package/i18n-js">i18n-js format</a> is a direct export of translations defined by <a href="https://guides.rubyonrails.org/i18n.html">Ruby on Rails</a>.<br />To export the translations, a <a href="https://github.com/fnando/i18n-js">Ruby gem</a> can be used, that&#39;s completely disconnected from Rails and that can be used for the solely purpose of exporting the translations, even if your project is written in a different language.<br />For JavaScript there&#39;s a companion JavaScript <a href="https://www.npmjs.com/package/i18n-js">package</a>.It comes bundled with all base translations made available by <a href="https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale">rails-i18n</a>. Base translations allow formatting date, numbers, and sentence connectors, among other things.</p><p>The used JSON based format will look like this:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;dessert_cake&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;one&quot;</span>: <span class="string">&quot;I would like to eat a cake.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;other&quot;</span>: <span class="string">&quot;I would like to eat %&#123;count&#125; cakes.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;one&quot;</span>: <span class="string">&quot;I would like to eat a muffin.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;other&quot;</span>: <span class="string">&quot;I would like to eat %&#123;count&#125; muffins.&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;dessert&quot;</span>: <span class="string">&quot;I would like to eat something.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The pluralization keys are organized nested under the normal translation key.</p><p>And the corresponding invocation:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i18n.t(<span class="string">&#x27;dessert_cake&#x27;</span>, &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;); <span class="comment">// -&gt; &quot;I would like to eat a cake.&quot;</span></span><br><span class="line">i18n.t(<span class="string">&#x27;dessert_muffin&#x27;</span>, &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;); <span class="comment">// -&gt; &quot;I would like to eat a muffin.&quot;</span></span><br><span class="line">i18n.t(<span class="string">&#x27;dessert_cake&#x27;</span>, &#123; <span class="attr">count</span>: <span class="number">5</span> &#125;); <span class="comment">// -&gt; &quot;I would like to eat 5 cakes.&quot;</span></span><br><span class="line">i18n.t(<span class="string">&#x27;dessert_muffin&#x27;</span>, &#123; <span class="attr">count</span>: <span class="number">5</span> &#125;); <span class="comment">// -&gt; &quot;I would like to eat 5 muffins.&quot;</span></span><br><span class="line">i18n.t(<span class="string">&#x27;dessert&#x27;</span>); <span class="comment">// -&gt; &quot;I would like to eat something.&quot;</span></span><br></pre></td></tr></table></figure><p>Also this format needs to change the translation key to accomplish a context like feature.</p><h2 id="Polyglot-js"><a href="#Polyglot-js" class="headerlink" title="Polyglot.js "></a>Polyglot.js <a name="polyglot"></a></h2><p>This older format provides a solution for interpolation and pluralization, based off of <a href="https://www.airbnb.com/">Airbnb</a>’s experience.<br /><a href="https://airbnb.io/polyglot.js/">Polyglot.js</a> adds basic i18n functionality to Airbnb&#39;s Backbone.js and Node.js apps.</p><p>This format uses only 3 keys, but...</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;dessert_cake&quot;</span>: <span class="string">&quot;I would like to eat a cake. |||| I would like to eat %&#123;smart_count&#125; cakes.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert_muffin&quot;</span>: <span class="string">&quot;I would like to eat a muffin. |||| I would like to eat %&#123;smart_count&#125; muffins.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dessert&quot;</span>: <span class="string">&quot;I would like to eat something.&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The plural forms are merged in a single value separated by the delimiter <code>||||</code> <em>(4 vertical pipe characters)</em>.</p><p>And the corresponding invocation:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">polyglot.t(<span class="string">&#x27;dessert_cake&#x27;</span>, &#123; <span class="attr">smart_count</span>: <span class="number">1</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a cake.&quot;</span></span><br><span class="line">polyglot.t(<span class="string">&#x27;dessert_muffin&#x27;</span>, &#123; <span class="attr">smart_count</span>: <span class="number">1</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a muffin.&quot;</span></span><br><span class="line">polyglot.t(<span class="string">&#x27;dessert_cake&#x27;</span>, &#123; <span class="attr">smart_count</span>: <span class="number">5</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat 5 cakes.&quot;</span></span><br><span class="line">polyglot.t(<span class="string">&#x27;dessert_muffin&#x27;</span>, &#123; <span class="attr">smart_count</span>: <span class="number">5</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat 5 muffins.&quot;</span></span><br><span class="line">polyglot.t(<span class="string">&#x27;dessert&#x27;</span>) <span class="comment">// -&gt; &quot;I would like to eat something.&quot;</span></span><br></pre></td></tr></table></figure><p>Also this format needs to change the translation key to accomplish a context like feature.</p><h2 id="Gettext"><a href="#Gettext" class="headerlink" title="Gettext "></a>Gettext <a name="gettext"></a></h2><p><a href="http://www.gnu.org/software/gettext/">Gettext</a> is a very old translation standard. There are implementations of Gettext in a lot of programming languages.<br /><a href="https://messageformat.github.io/Jed/">Jed</a> is one of the most used gettext implementations for JavaScript. Jed doesn&#39;t include a Gettext file parser, but several third-party parsers exist that can have their output adapted for Jed.</p><p>So an original Gettext po format...</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">msgid &quot;&quot;</span><br><span class="line">msgstr &quot;&quot;</span><br><span class="line">&quot;MIME-Version: 1.0\n&quot;</span><br><span class="line">&quot;Content-Type: text/plain; charset=UTF-8\n&quot;</span><br><span class="line">&quot;Content-Transfer-Encoding: 8bit\n&quot;</span><br><span class="line">&quot;lang: en\n&quot;</span><br><span class="line">&quot;plural_forms: nplurals=2; plural=(n != 1);\n&quot;</span><br><span class="line"></span><br><span class="line">#: </span><br><span class="line">msgid &quot;dessert&quot;</span><br><span class="line">msgstr &quot;I would like to eat something.&quot;</span><br><span class="line"></span><br><span class="line">#: </span><br><span class="line">msgctxt &quot;cake&quot;</span><br><span class="line">msgid &quot;dessert&quot;</span><br><span class="line">msgid_plural &quot;I would like to eat %d cakes.&quot;</span><br><span class="line">msgstr[0] &quot;I would like to eat a cake.&quot;</span><br><span class="line">msgstr[1] &quot;I would like to eat %d cakes.&quot;</span><br><span class="line"></span><br><span class="line">#: </span><br><span class="line">msgctxt &quot;muffin&quot;</span><br><span class="line">msgid &quot;dessert&quot;</span><br><span class="line">msgid_plural &quot;I would like to eat %d muffins.&quot;</span><br><span class="line">msgstr[0] &quot;I would like to eat a muffin.&quot;</span><br><span class="line">msgstr[1] &quot;I would like to eat %d muffins.&quot;</span><br></pre></td></tr></table></figure><p>...would look like this when used in Jed:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> Jed(&#123;</span><br><span class="line">  <span class="attr">locale_data</span>: &#123;</span><br><span class="line">    <span class="attr">messages</span>: &#123;</span><br><span class="line">      <span class="string">&quot;&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">domain</span>: <span class="string">&quot;messages&quot;</span>,</span><br><span class="line">        <span class="attr">lang</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">        <span class="attr">plural_forms</span>: <span class="string">&quot;nplurals=2; plural=(n != 1);&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;cake\u0004dessert&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;I would like to eat a cake.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;I would like to eat %d cakes.&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;muffin\u0004dessert&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;I would like to eat a muffin.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;I would like to eat %d muffins.&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">dessert</span>: [<span class="string">&quot;I would like to eat something.&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Not very intuitive, but it works.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i18n.translate(<span class="string">&#x27;dessert&#x27;</span>).withContext(<span class="string">&#x27;cake&#x27;</span>).fetch() <span class="comment">// -&gt; &quot;I would like to eat a cake.&quot;</span></span><br><span class="line">i18n.translate(<span class="string">&#x27;dessert&#x27;</span>).withContext(<span class="string">&#x27;muffin&#x27;</span>).fetch() <span class="comment">// -&gt; &quot;I would like to eat a muffin.&quot;</span></span><br><span class="line">i18n.translate(<span class="string">&#x27;dessert&#x27;</span>).withContext(<span class="string">&#x27;cake&#x27;</span>).ifPlural(<span class="number">5</span>).fetch(<span class="number">5</span>) <span class="comment">// -&gt; &quot;I would like to eat 5 cakes.&quot;</span></span><br><span class="line">i18n.translate(<span class="string">&#x27;dessert&#x27;</span>).withContext(<span class="string">&#x27;muffin&#x27;</span>).ifPlural(<span class="number">5</span>).fetch(<span class="number">5</span>) <span class="comment">// -&gt; &quot;I would like to eat 5 muffins.&quot;</span></span><br><span class="line">i18n.translate(<span class="string">&#x27;dessert&#x27;</span>).fetch() <span class="comment">// -&gt; &quot;I would like to eat something.&quot;</span></span><br></pre></td></tr></table></figure><p>This format offers, pluralization, interpolation and a context feature, but a strange API in my opinion.</p><h2 id="FBT"><a href="#FBT" class="headerlink" title="FBT "></a>FBT <a name="fbt"></a></h2><p>Of all the formats encountered in the i18n multiverse, this format is arguably the most distant universe, or should I say: most distant &quot;metaverse&quot; ;-)<br /><a href="https://facebook.github.io/fbt/">FBT</a> is invented, used and maintained by <a href="https://www.facebook.com/">Facebook</a>.<br />It is... special. It comes with text extraction and at the center are not the translations but your code.</p><p>So first you need to instrument your code:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;fbt desc=<span class="string">&quot;eating cake&quot;</span>&gt;</span><br><span class="line">  I would like to eat</span><br><span class="line">  &lt;fbt:plural</span><br><span class="line">    count=&#123;<span class="number">1</span>&#125;</span><br><span class="line">    name=<span class="string">&quot;number of cakes&quot;</span></span><br><span class="line">    showCount=<span class="string">&quot;ifMany&quot;</span></span><br><span class="line">    many=<span class="string">&quot;cakes&quot;</span>&gt;</span><br><span class="line">    a cake</span><br><span class="line">  &lt;/fbt:plural&gt;.</span><br><span class="line">&lt;/fbt&gt; &lt;!-- <span class="string">&quot;I would like to eat a cake.&quot;</span> --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">fbt</span> <span class="attr">desc</span>=<span class="string">&quot;eating muffin&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  I would like to eat</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">fbt:plural</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">count</span>=<span class="string">&#123;5&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">name</span>=<span class="string">&quot;number of muffins&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">showCount</span>=<span class="string">&quot;ifMany&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">many</span>=<span class="string">&quot;muffins&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    a muffin</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">fbt:plural</span>&gt;</span>.</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">fbt</span>&gt;</span></span> &lt;!-- <span class="string">&quot;I would like to eat 5 muffins.&quot;</span> --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">fbt</span> <span class="attr">desc</span>=<span class="string">&quot;eating something&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  I would like to eat something.</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">fbt</span>&gt;</span></span> &lt;!-- <span class="string">&quot;I would like to eat something.&quot;</span> --&gt;</span><br></pre></td></tr></table></figure><p>Run some scripts, and then you can use the prepared translation files:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fb-locale&quot;</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;translations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bxFNG7FeHhfvzOcxJ4WpXA==&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tokens&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;translations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;translation&quot;</span>: <span class="string">&quot;I would like to eat &#123;number of cakes&#125; cakes.&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;variations&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;types&quot;</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;1kfdpAZKBoeV6P/6/jU9BQ==&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tokens&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;translations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;translation&quot;</span>: <span class="string">&quot;I would like to eat a cake.&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;variations&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;types&quot;</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;Yglr/cfclqA86jmKXJXtjg==&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tokens&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;translations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;translation&quot;</span>: <span class="string">&quot;I would like to eat &#123;number of muffins&#125; muffins.&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;variations&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;types&quot;</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;Ic2KkQ3gBr6AUcgtsH576g==&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tokens&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;translations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;translation&quot;</span>: <span class="string">&quot;I would like to eat a muffin.&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;variations&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;types&quot;</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;r2YYz0TzAkH0b0TSwFMEAw==&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tokens&quot;</span>: [],</span><br><span class="line">      <span class="attr">&quot;translations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;translation&quot;</span>: <span class="string">&quot;I would like to eat something.&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;variations&quot;</span>: &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;types&quot;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Each instrumented code part is mapped with a hash to the translations.<br />Like said... it&#39;s really different than all other formats.</p><h2 id="Fluent"><a href="#Fluent" class="headerlink" title="Fluent "></a>Fluent <a name="fluent"></a></h2><p>The last format in this multiverse trip is <a href="https://projectfluent.org/">Fluent</a> a <a href="https://mozilla.org/">Mozilla</a> project.<br />The Fluent format shares a lot of philosophy that drove the design of <a href="#icu">ICU Message Format</a>.</p><p>It&#39;s also a key/value based format:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FluentBundle, FluentResource &#125; <span class="keyword">from</span> <span class="string">&quot;@fluent/bundle&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resource = <span class="keyword">new</span> FluentResource(<span class="string">`</span></span><br><span class="line"><span class="string">dessert =</span></span><br><span class="line"><span class="string">  I would like to eat </span></span><br><span class="line"><span class="string">  &#123;$toEat -&gt;</span></span><br><span class="line"><span class="string">    [cake] &#123;$count -&gt;</span></span><br><span class="line"><span class="string">      [one] a cake</span></span><br><span class="line"><span class="string">     *[other] &#123;$count&#125; cakes</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    [muffin] &#123;$count -&gt;</span></span><br><span class="line"><span class="string">      [one] a muffin</span></span><br><span class="line"><span class="string">     *[other] &#123;$count&#125; muffins</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">   *[other] something</span></span><br><span class="line"><span class="string">  &#125;.</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bundle = <span class="keyword">new</span> FluentBundle(<span class="string">&#x27;en&#x27;</span>)</span><br><span class="line">bundle.addResource(resource)</span><br><span class="line"></span><br><span class="line">bundle.formatPattern(bundle.getMessage(<span class="string">&#x27;dessert&#x27;</span>).value, &#123; <span class="attr">toEat</span>: <span class="string">&#x27;cake&#x27;</span>, <span class="attr">count</span>: <span class="number">1</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a cake.&quot;</span></span><br><span class="line">bundle.formatPattern(bundle.getMessage(<span class="string">&#x27;dessert&#x27;</span>).value, &#123; <span class="attr">toEat</span>: <span class="string">&#x27;muffin&#x27;</span>, <span class="attr">count</span>: <span class="number">1</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat a muffin.&quot;</span></span><br><span class="line">bundle.formatPattern(bundle.getMessage(<span class="string">&#x27;dessert&#x27;</span>).value, &#123; <span class="attr">toEat</span>: <span class="string">&#x27;cake&#x27;</span>, <span class="attr">count</span>: <span class="number">5</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat 5 cakes.&quot;</span></span><br><span class="line">bundle.formatPattern(bundle.getMessage(<span class="string">&#x27;dessert&#x27;</span>).value, &#123; <span class="attr">toEat</span>: <span class="string">&#x27;muffin&#x27;</span>, <span class="attr">count</span>: <span class="number">5</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat 5 muffins.&quot;</span></span><br><span class="line">bundle.formatPattern(bundle.getMessage(<span class="string">&#x27;dessert&#x27;</span>).value, &#123; <span class="attr">toEat</span>: <span class="string">&#x27;&#x27;</span> &#125;) <span class="comment">// -&gt; &quot;I would like to eat something.&quot;</span></span><br></pre></td></tr></table></figure><p>Like <a href="#icu">ICU Message Format</a> it uses only 1 key to generate all variations. So the value may look a bit more complex, like a language on its own.</p><h2 id="Coming-back-home"><a href="#Coming-back-home" class="headerlink" title="Coming back home"></a>Coming back home</h2><p><img src="portal.jpg"></p><p>We looked through the portals of the i18n multiverse and got a few small first impressions about the various formats.<br />Some are very similar and some others are really different. In the end it&#39;s a matter of taste.<br />Which format do you feel comfortable with?</p><p>The most important thing is that all team members are comfortable with it, and that all tools in the localization process supports that format.<br />So choose your translation management system (TMS) carefully.</p><p>Looking at the <a href="https://www.i18next.com/misc/the-history-of-i18next">history</a> of the currently most used i18n format, we can see the the creators of <a href="#i18next">i18next</a> are also the founders of a great <a href="https://locize.com/">translation management system</a>.<br />So with choosing <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.<br />➡️ <a href="https://www.i18next.com/">i18next</a> + <a href="https://locize.com/">locize</a> = true <a href="https://locize.com/how-it-works.html#continouslocalization">continuous localization</a></p><p>Watch the demo <a href="https://youtu.be/TFV_vhJs5DY">video</a> to learn more:</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/TFV_vhJs5DY" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Continuous Localization vs. Continuous Localization 🤔</title>
      <link href="/blog/modern-continuous-localization/"/>
      <url>/blog/modern-continuous-localization/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg" title="continuous localization"></p><h2 id="Why-Continuous-Localization"><a href="#Why-Continuous-Localization" class="headerlink" title="Why Continuous Localization?"></a>Why Continuous Localization?</h2><p>Because software development never stops when the first version of a product is released (bug fixes, minor updates and at some point major new versions and releases) — continuously. Your <a href="../localization/">localization</a> and translation process should follow the same pattern as your software development.</p><blockquote><p>You&#39;re already using agile concepts in your software development, right?</p></blockquote><p>Add some agility also in your localization process!<br />Translations should take place in parallel with agile sprints and in smaller batches. This means translating just a part of a software product and not the whole at once. Even better, translating continuously.</p><p>The benefit to developers is clear-cut: align localization efforts with the development cycle by automating and accelerating the steps involved. This way, they can seamlessly integrate their localization processes into their development cycle.<br />You localize, as a normal part of the development process cycle. No separate localization testing phase. Translation testing is part of normal software testing activity.<br />The translators can work on text that the developers have just added. There is no wait for a particular milestone.<br />Keeping translations in sync with development, reduces drastically the project complexity. A project management enjoys this, because it takes lots of tedious work from product managers that they would otherwise have to perform.</p><blockquote><p><strong>tldr; Shorter, faster development cycles, faster time-to-market.</strong></p></blockquote><h2 id="How-Continuous-Localization-Works"><a href="#How-Continuous-Localization-Works" class="headerlink" title="How Continuous Localization Works"></a>How Continuous Localization Works</h2><h3 id="The-classical-approach"><a href="#The-classical-approach" class="headerlink" title="The classical approach"></a>The classical approach</h3><p>The following team roles are at least included in a typical in-house localization team:</p><ul><li>Software engineer — Responsible for implementing the continuous localization workflow.</li><li>Localization QA / translator — Responsible for the quality of the localized product.</li><li>Product manager — Someone who oversees the whole process, working with engineers and translators, and is responsible for deadlines.</li></ul><p><img src="classic-continuous-localization.png" title="classic continuous localization"></p><p>After a successful implementation for the continuous localization workflow, the process will look more or less like this:</p><ol><li>The developers create new strings in the reference language and commit dem in their code repository, like <a href="http://github.com/">GitHub</a>, <a href="https://gitlab.com/">GitLab</a> or any other <a href="https://en.wikipedia.org/wiki/Version_control">Version Control System</a>.</li><li>The strings gets synchronized with the translation management system.</li><li>The translators work on new translations.</li><li>The translations are synchronized back to the code repository.</li><li>The CI/CD pipeline picks the current (or defined) state of the code repository, and builds, tests, etc...</li><li>The result is deployed.</li><li>The end user can enjoy the new features and new translations.</li></ol><p><em>While this approach can be implemented together with most translation management systems, there is also a more modern approach...</em></p><h3 id="The-modern-approach"><a href="#The-modern-approach" class="headerlink" title="The modern approach"></a>The modern approach</h3><p>You should be able to deploy your translation files separated from your software so you can update and manage them independently. Something like a platform, that anyone can directly integrate with.</p><p><img src="real-continuous-localization.png" title="real continuous localization"></p><p>The process could look like this:</p><ol><li>The developers work as usual on their features and create strings on-the-fly. Those new keys get&#39;s automatically pushed as missing strings to the <a href="../tms/" title="translation management systems">translation management system</a>.</li><li>The translators work on new translations and can instantaneously validate the translations.</li><li>Since translations are &quot;connected&quot; directly to your software product, they can be released at any time. This way you can also fix translations of your previously released product, without having to redeploy it.</li></ol><p>If you do so, you have to make sure you can have more than one version of your translations; at least one for the current released version and one for the current development branch. That way your technical writers and translators can take care of the translations from the first day and keep up with changes with ease. By doing this it is even possible to change or add translations without shipping a new release of your software!You may also want to have some reviewing workflow, auditing, integrated ordering of external translations, etc...</p><blockquote><p>Cool, but isn’t this a little over the top… an extra tooling and deployment — doesn’t all this just add more complexity and effort?</p></blockquote><h4 id="You-don’t-have-to-build-this-yourself-—-There-is-locize"><a href="#You-don’t-have-to-build-this-yourself-—-There-is-locize" class="headerlink" title="You don’t have to build this yourself!!! — There is locize!"></a>You don’t have to build this yourself!!! — There is <a href="/">locize</a>!</h4><p>Watch the demo video to learn more:</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/TFV_vhJs5DY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><a href="/">locize</a> removes the pain in the translation process. No more delays in shipping your software because of missing translations. Translators can keep up with changes from day one. The continuous localization process keeps up with your demanding business.</p>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> l10n </tag>
            
            <tag> continuous development </tag>
            
            <tag> continuous integration </tag>
            
            <tag> continuous localization </tag>
            
            <tag> continuous delivery </tag>
            
            <tag> continuous translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The progressive guide to jQuery internationalization (i18n) using i18next</title>
      <link href="/blog/jquery-i18next/"/>
      <url>/blog/jquery-i18next/</url>
      
        <content type="html"><![CDATA[<p><img src="jquery-localization.jpg" alt="jQuery localization" title="jQuery Localization example"></p><p>Every web developer may have met the perennial <a href="https://en.wikipedia.org/wiki/Methuselah">Methuselah</a> jQuery.Created back in January 2006 at <a href="https://en.wikipedia.org/wiki/BarCamp">BarCamp NYC</a> by <a href="https://en.wikipedia.org/wiki/John_Resig">John Resig</a> and currently maintained by a <a href="https://jquery.org/team/">team of developers</a> led by <a href="https://timmywil.com/">Timmy Willison</a>.</p><p><em>You may think:</em></p><blockquote><p>Why a blog post about the venerable but aged JavaScript library, that made things like HTML document traversal and manipulation, etc. easier?</p></blockquote><p><strong>Because with a combination of versatility and extensibility, jQuery has changed the way that millions of people write JavaScript!</strong></p><p>And you can see this by the huge usage of jQuery:</p><p>Based on <a href="https://w3techs.com/technologies/overview/javascript_library">w3Techs web technology surveys</a>, <a href="https://w3techs.com/technologies/details/js-jquery">jQuery</a> is used by <strong>95.4%</strong> of all the websites whose JavaScript library they know. And <strong>78.3%</strong> of all websites.</p><p><img src="w3techs.jpg"></p><p>Checking the <a href="https://www.npmtrends.com/jquery">npm download trends of the jquery</a> module it is approaching the 5 million downloads per week.</p><p><img src="npmtrends.jpg"></p><p>So you see, jQuery is not only still relevant, it takes up the majority of all websites.</p><p>Therefore, in this article, we will be using the i18next framework to internationalize a jQuery website.</p><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><ul><li><a href="#why-i18next">So first of all: &quot;Why i18next?&quot;</a></li><li><a href="#start">Let&#39;s get into it...</a><ul><li><a href="#prerequisites">Prerequisites</a></li><li><a href="#getting-started">Getting started</a></li><li><a href="#language-switcher">Language Switcher</a></li><li><a href="#head-translate">Translate head information</a></li><li><a href="#interpolation-pluralization">Interpolation and Pluralization</a></li><li><a href="#formatting">Formatting</a></li><li><a href="#context">Context</a></li><li><a href="#separate">Separate translations from code</a></li><li><a href="#better-translation-management">Better translation management</a><ul><li><a href="#for-sure">For sure!</a></li><li><a href="#how-look">How does this look like?</a></li><li><a href="#save-missing">save missing translations</a></li><li><a href="#more">👀 but there&#39;s more...</a></li></ul></li></ul></li><li><a href="#congratulations">🎉🥳 Congratulations 🎊🎁</a></li></ul><h2 id="So-first-of-all-quot-Why-i18next-quot"><a href="#So-first-of-all-quot-Why-i18next-quot" class="headerlink" title="So first of all: &quot;Why i18next?&quot; "></a>So first of all: &quot;Why i18next?&quot; <a name="why-i18next"></a></h2><p>When it comes to jQuery localization, one of the most popular is <a href="https://www.i18next.com/">i18next</a> with it&#39;s jQuery extension <a href="https://github.com/i18next/jquery-i18next">jquery-i18next</a>, and for good reasons:</p><p><em>i18next was created in late 2011. It&#39;s older than most of the libraries you will use nowadays, including your main frontend technology (<a href="../react-i18next/">React</a>, <a href="../angular-i18next/">Angular</a>, <a href="../i18next-vue/">Vue</a>, ...). Only <a href="https://jquery.com/">jQuery</a> is older 😉</em><br /><strong>➡️ sustainable</strong></p><p><em>Based on how long i18next already is available open source, there is no real i18n case that could not be solved with i18next.</em><br /><strong>➡️ mature</strong></p><p><em>i18next can be used in any javascript (and a few non-javascript - .net, elm, iOS, android, ruby, ...) environment, with any UI framework, with any i18n format, ... <a href="https://www.i18next.com/overview/supported-frameworks">the possibilities are endless</a>.</em><br /><strong>➡️ extensible</strong></p><p><em>There is a plenty of features and possibilities you&#39;ll get with i18next compared to other regular i18n frameworks.</em><br /><strong>➡️ rich</strong></p><p><a href="https://www.i18next.com/overview/comparison-to-others">Here</a> you can find more information about why i18next is special and <a href="https://locize.com/i18next.html#how-does-i18next-work">how it works</a>.</p><h2 id="Let-39-s-get-into-it"><a href="#Let-39-s-get-into-it" class="headerlink" title="Let&#39;s get into it... "></a>Let&#39;s get into it... <a name="start"></a></h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites "></a>Prerequisites <a name="prerequisites"></a></h3><p>Make sure you have a jQuery based website or web app. It&#39;s best, if you have some experience with simple HTML, JavaScript and basic jQuery, before jumping to <a href="https://github.com/i18next/jquery-i18next">jquery-i18next</a>. This jQuery i18n example is not intended to be a jQuery beginner tutorial.</p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started "></a>Getting started <a name="getting-started"></a></h3><p>Take your own jQuery project or create a new one.</p><p>I have here an awesome landing page 😉</p><p><img src="app_0.png" title="locize © inweso GmbH"></p><p>We are going to adapt the website to detect the language according to the user’s preference.And we will create a language switcher to make the content change between different languages.</p><p>Let&#39;s install some i18next dependencies:</p><ul><li><a href="https://www.i18next.com/">i18next</a></li><li><a href="https://github.com/i18next/jquery-i18next">jquery-i18next</a></li><li><a href="https://github.com/i18next/i18next-browser-languageDetector">i18next-browser-languagedetector</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/i18next@21.6.10/i18next.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery-i18next@1.2.1/jquery-i18next.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/i18next-browser-languagedetector@6.1.3/i18nextBrowserLanguageDetector.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s prepare an <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// use plugins and options as needed, for options, detail see</span></span><br><span class="line">  <span class="comment">// https://www.i18next.com</span></span><br><span class="line">  i18next</span><br><span class="line">    <span class="comment">// detect user language</span></span><br><span class="line">    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">    .use(i18nextBrowserLanguageDetector)</span><br><span class="line">    <span class="comment">// init i18next</span></span><br><span class="line">    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">      <span class="attr">resources</span>: &#123;</span><br><span class="line">        <span class="attr">en</span>: &#123;</span><br><span class="line">          <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="comment">// here we will place our translations...</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err, t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// for options see</span></span><br><span class="line">      <span class="comment">// https://github.com/i18next/jquery-i18next#initialize-the-plugin</span></span><br><span class="line">      jqueryI18next.init(i18next, $, &#123; <span class="attr">useOptionsAttr</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// start localizing, details:</span></span><br><span class="line">      <span class="comment">// https://github.com/i18next/jquery-i18next#usage-of-selector-function</span></span><br><span class="line">      $(<span class="string">&#x27;body&#x27;</span>).localize();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Let&#39;s load that file:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/i18next@21.6.10/i18next.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery-i18next@1.2.1/jquery-i18next.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/i18next-browser-languagedetector@6.1.3/i18nextBrowserLanguageDetector.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/i18n.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now let&#39;s try to move some hard coded text out to the translations.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">data-i18n</span>=<span class="string">&quot;intro.title&quot;</span>&gt;</span>Landing Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">data-i18n</span>=<span class="string">&quot;intro.subTitle&quot;</span>&gt;</span>Some subtitle<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br></pre></td></tr></table></figure><p>Since the texts will be part of our translation resources, they could also be removed:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">data-i18n</span>=<span class="string">&quot;intro.title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">data-i18n</span>=<span class="string">&quot;intro.subTitle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br></pre></td></tr></table></figure><p>The texts are now part of the translation resources:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// use plugins and options as needed, for options, detail see</span></span><br><span class="line">  <span class="comment">// https://www.i18next.com</span></span><br><span class="line">  i18next</span><br><span class="line">    <span class="comment">// detect user language</span></span><br><span class="line">    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">    .use(i18nextBrowserLanguageDetector)</span><br><span class="line">    <span class="comment">// init i18next</span></span><br><span class="line">    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">      <span class="attr">resources</span>: &#123;</span><br><span class="line">        <span class="attr">en</span>: &#123;</span><br><span class="line">          <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="attr">intro</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;Landing Page&#x27;</span>,</span><br><span class="line">              <span class="attr">subTitle</span>: <span class="string">&#x27;Some subtitle&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err, t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// for options see</span></span><br><span class="line">      <span class="comment">// https://github.com/i18next/jquery-i18next#initialize-the-plugin</span></span><br><span class="line">      jqueryI18next.init(i18next, $, &#123; <span class="attr">useOptionsAttr</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// start localizing, details:</span></span><br><span class="line">      <span class="comment">// https://github.com/i18next/jquery-i18next#usage-of-selector-function</span></span><br><span class="line">      $(<span class="string">&#x27;body&#x27;</span>).localize();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Language-Switcher"><a href="#Language-Switcher" class="headerlink" title="Language Switcher "></a>Language Switcher <a name="language-switcher"></a></h3><p>Now let&#39;s define a language switcher:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;language&quot;</span> <span class="attr">id</span>=<span class="string">&quot;languageSwitcher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br></pre></td></tr></table></figure><p>And also add some translations for the new language:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lngs = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;English&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">de</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;Deutsch&#x27;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rerender = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// start localizing, details:</span></span><br><span class="line">  <span class="comment">// https://github.com/i18next/jquery-i18next#usage-of-selector-function</span></span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).localize();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// use plugins and options as needed, for options, detail see</span></span><br><span class="line">  <span class="comment">// https://www.i18next.com</span></span><br><span class="line">  i18next</span><br><span class="line">    <span class="comment">// detect user language</span></span><br><span class="line">    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">    .use(i18nextBrowserLanguageDetector)</span><br><span class="line">    <span class="comment">// init i18next</span></span><br><span class="line">    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">      <span class="attr">resources</span>: &#123;</span><br><span class="line">        <span class="attr">en</span>: &#123;</span><br><span class="line">          <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="attr">intro</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;Landing Page&#x27;</span>,</span><br><span class="line">              <span class="attr">subTitle</span>: <span class="string">&#x27;Some subtitle&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">de</span>: &#123;</span><br><span class="line">          <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="attr">intro</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;Webseite&#x27;</span>,</span><br><span class="line">              <span class="attr">subTitle</span>: <span class="string">&#x27;Ein Untertitel&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err, t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// for options see</span></span><br><span class="line">      <span class="comment">// https://github.com/i18next/jquery-i18next#initialize-the-plugin</span></span><br><span class="line">      jqueryI18next.init(i18next, $, &#123; <span class="attr">useOptionsAttr</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// fill language switcher</span></span><br><span class="line">      <span class="built_in">Object</span>.keys(lngs).map(<span class="function">(<span class="params">lng</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> opt = <span class="keyword">new</span> Option(lngs[lng].nativeName, lng);</span><br><span class="line">        <span class="keyword">if</span> (lng === i18next.resolvedLanguage) &#123;</span><br><span class="line">          opt.setAttribute(<span class="string">&quot;selected&quot;</span>, <span class="string">&quot;selected&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">&#x27;#languageSwitcher&#x27;</span>).append(opt);</span><br><span class="line">      &#125;);</span><br><span class="line">      $(<span class="string">&#x27;#languageSwitcher&#x27;</span>).change(<span class="function">(<span class="params">a, b, c</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> chosenLng = $(<span class="built_in">this</span>).find(<span class="string">&quot;option:selected&quot;</span>).attr(<span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">        i18next.changeLanguage(chosenLng, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          rerender();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      rerender();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="app_1_switcher.jpg" alt="jquery language switcher" title="locize © inweso GmbH"></p><p><img src="app_1.jpg" title="locize © inweso GmbH"></p><p><strong>🥳 Awesome, you&#39;ve just created your first language switcher!</strong></p><p>Thanks to <a href="https://github.com/i18next/i18next-browser-languageDetector">i18next-browser-languagedetector</a> now it tries to detect the browser language and automatically use that language if you&#39;ve provided the translations for it. The manually selected language in the language switcher is persisted in the localStorage, next time you visit the page, that language is used as preferred language.</p><h3 id="Translate-head-information"><a href="#Translate-head-information" class="headerlink" title="Translate head information "></a>Translate head information <a name="head-translate"></a></h3><p>Let&#39;s translate also the title and description of the website.We do this by extending our <code>rerender</code> function, and adding the additional translation resources:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rerender = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// start localizing, details:</span></span><br><span class="line">  <span class="comment">// https://github.com/i18next/jquery-i18next#usage-of-selector-function</span></span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).localize();</span><br><span class="line"></span><br><span class="line">  $(<span class="string">&#x27;title&#x27;</span>).text($.t(<span class="string">&#x27;head.title&#x27;</span>))</span><br><span class="line">  $(<span class="string">&#x27;meta[name=description]&#x27;</span>).attr(<span class="string">&#x27;content&#x27;</span>, $.t(<span class="string">&#x27;head.description&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resources</span>: &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123;</span><br><span class="line">    <span class="attr">translation</span>: &#123;</span><br><span class="line">      <span class="attr">head</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;My Awesome Landing-Page&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;The description of this awesome landing page.&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">intro</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Landing Page&#x27;</span>,</span><br><span class="line">        <span class="attr">subTitle</span>: <span class="string">&#x27;Some subtitle&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">de</span>: &#123;</span><br><span class="line">    <span class="attr">translation</span>: &#123;</span><br><span class="line">      <span class="attr">head</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Meine grossartige Webseite&#x27;</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;Die Beschreibung dieser grossartigen Webseite.&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">intro</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Webseite&#x27;</span>,</span><br><span class="line">        <span class="attr">subTitle</span>: <span class="string">&#x27;Ein Untertitel&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So you see, this can be also done with the <code>$.t()</code> helper function.</p><p>Let&#39;s check the DOM:</p><p><img src="dom.jpg" title="locize © inweso GmbH"></p><p>Nice 👍</p><h3 id="Interpolation-and-Pluralization"><a href="#Interpolation-and-Pluralization" class="headerlink" title="Interpolation and Pluralization "></a>Interpolation and Pluralization <a name="interpolation-pluralization"></a></h3><p>i18next goes beyond just providing the standard i18n features.But for sure it&#39;s able to handle <a href="https://www.i18next.com/translation-function/plurals">plurals</a> and <a href="https://www.i18next.com/translation-function/interpolation">interpolation</a>.</p><p>Let&#39;s count each time the language gets changed:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;language&quot;</span> <span class="attr">id</span>=<span class="string">&quot;languageSwitcher&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;languageChangedNotification&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">data-i18n</span>=<span class="string">&quot;footer.counter&quot;</span> <span class="attr">data-i18n-options</span>=<span class="string">&#x27;&#123; &quot;count&quot;: 0 &#125;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br></pre></td></tr></table></figure><p>Let&#39;s remember the count in the <code>languageChangedCounter</code> variable and increment it on each language change.<br />...and extending the translation resources:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lngs = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;English&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">de</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;Deutsch&#x27;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rerender = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// start localizing, details:</span></span><br><span class="line">  <span class="comment">// https://github.com/i18next/jquery-i18next#usage-of-selector-function</span></span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).localize();</span><br><span class="line"></span><br><span class="line">  $(<span class="string">&#x27;title&#x27;</span>).text($.t(<span class="string">&#x27;head.title&#x27;</span>))</span><br><span class="line">  $(<span class="string">&#x27;meta[name=description]&#x27;</span>).attr(<span class="string">&#x27;content&#x27;</span>, $.t(<span class="string">&#x27;head.description&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// use plugins and options as needed, for options, detail see</span></span><br><span class="line">  <span class="comment">// https://www.i18next.com</span></span><br><span class="line">  i18next</span><br><span class="line">    <span class="comment">// detect user language</span></span><br><span class="line">    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">    .use(i18nextBrowserLanguageDetector)</span><br><span class="line">    <span class="comment">// init i18next</span></span><br><span class="line">    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">      <span class="attr">resources</span>: &#123;</span><br><span class="line">        <span class="attr">en</span>: &#123;</span><br><span class="line">          <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="attr">head</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;My Awesome Landing-Page&#x27;</span>,</span><br><span class="line">              <span class="attr">description</span>: <span class="string">&#x27;The description of this awesome landing page.&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">intro</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;Landing Page&#x27;</span>,</span><br><span class="line">              <span class="attr">subTitle</span>: <span class="string">&#x27;Some subtitle&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">footer</span>: &#123;</span><br><span class="line">              <span class="attr">counter_one</span>: <span class="string">&#x27;Changed language just once&#x27;</span>,</span><br><span class="line">              <span class="attr">counter_other</span>: <span class="string">&#x27;Changed language already &#123;&#123;count&#125;&#125; times&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">de</span>: &#123;</span><br><span class="line">          <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="attr">head</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;Meine grossartige Webseite&#x27;</span>,</span><br><span class="line">              <span class="attr">description</span>: <span class="string">&#x27;Die Beschreibung dieser grossartigen Webseite.&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">intro</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;Webseite&#x27;</span>,</span><br><span class="line">              <span class="attr">subTitle</span>: <span class="string">&#x27;Ein Untertitel&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">footer</span>: &#123;</span><br><span class="line">              <span class="attr">counter_one</span>: <span class="string">&#x27;Die Sprache wurde erst ein mal gewechselt&#x27;</span>,</span><br><span class="line">              <span class="attr">counter_other</span>: <span class="string">&#x27;Die Sprache wurde &#123;&#123;count&#125;&#125; mal gewechselt&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err, t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// for options see</span></span><br><span class="line">      <span class="comment">// https://github.com/i18next/jquery-i18next#initialize-the-plugin</span></span><br><span class="line">      jqueryI18next.init(i18next, $, &#123; <span class="attr">useOptionsAttr</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// fill language switcher</span></span><br><span class="line">      <span class="built_in">Object</span>.keys(lngs).map(<span class="function">(<span class="params">lng</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> opt = <span class="keyword">new</span> Option(lngs[lng].nativeName, lng);</span><br><span class="line">        <span class="keyword">if</span> (lng === i18next.resolvedLanguage) &#123;</span><br><span class="line">          opt.setAttribute(<span class="string">&quot;selected&quot;</span>, <span class="string">&quot;selected&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">&#x27;#languageSwitcher&#x27;</span>).append(opt);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> languageChangedCounter = <span class="number">0</span>;</span><br><span class="line">      $(<span class="string">&#x27;#languageSwitcher&#x27;</span>).change(<span class="function">(<span class="params">a, b, c</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> chosenLng = $(<span class="built_in">this</span>).find(<span class="string">&quot;option:selected&quot;</span>).attr(<span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">        i18next.changeLanguage(chosenLng, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          rerender();</span><br><span class="line">            </span><br><span class="line">          <span class="comment">// language changed message</span></span><br><span class="line">          languageChangedCounter++;</span><br><span class="line">          $(<span class="string">&#x27;#languageChangedNotification&#x27;</span>).localize(&#123; <span class="attr">count</span>: languageChangedCounter &#125;)</span><br><span class="line">          <span class="keyword">if</span> (languageChangedCounter === <span class="number">1</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#languageChangedNotification&#x27;</span>).show();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      rerender();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Based on the count value i18next will choose the correct plural form.Read more about <a href="https://www.i18next.com/translation-function/plurals">pluralization</a> and <a href="https://www.i18next.com/translation-function/interpolation">interpolation</a> in the <a href="https://www.i18next.com/">official i18next documentation</a>.</p><p><img src="app_2.jpg" alt="jQuery pluralization" title="locize © inweso GmbH"></p><p><em>💡 i18next is also able to handle languages with multiple plural forms, like arabic:</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// translation resources:</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;key_zero&quot;</span>: <span class="string">&quot;zero&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_one&quot;</span>: <span class="string">&quot;singular&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_two&quot;</span>: <span class="string">&quot;two&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_few&quot;</span>: <span class="string">&quot;few&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_many&quot;</span>: <span class="string">&quot;many&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_other&quot;</span>: <span class="string">&quot;other&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage:</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;); <span class="comment">// -&gt; &quot;zero&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">1</span>&#125;); <span class="comment">// -&gt; &quot;singular&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">2</span>&#125;); <span class="comment">// -&gt; &quot;two&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">3</span>&#125;); <span class="comment">// -&gt; &quot;few&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">4</span>&#125;); <span class="comment">// -&gt; &quot;few&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">5</span>&#125;); <span class="comment">// -&gt; &quot;few&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">11</span>&#125;); <span class="comment">// -&gt; &quot;many&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">99</span>&#125;); <span class="comment">// -&gt; &quot;many&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">100</span>&#125;); <span class="comment">// -&gt; &quot;other&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting "></a>Formatting <a name="formatting"></a></h3><p>Now, let’s check out how we can use different date formats with the help of <a href="https://www.i18next.com/">i18next</a> and <a href="https://momentjs.com/">moment.js</a> to handle date and time.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/moment@2.29.1/min/moment-with-locales.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br></pre></td></tr></table></figure><p>We like to have the footer displaying the current date:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;footerMessage&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text-muted small&quot;</span> <span class="attr">data-i18n</span>=<span class="string">&quot;footer.date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br></pre></td></tr></table></figure><p>Define a format function, like documented in the <a href="https://www.i18next.com/translation-function/formatting">documentation</a> and add the new translation key:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lngs = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;English&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">de</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;Deutsch&#x27;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rerender = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// start localizing, details:</span></span><br><span class="line">  <span class="comment">// https://github.com/i18next/jquery-i18next#usage-of-selector-function</span></span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).localize();</span><br><span class="line"></span><br><span class="line">  $(<span class="string">&#x27;title&#x27;</span>).text($.t(<span class="string">&#x27;head.title&#x27;</span>))</span><br><span class="line">  $(<span class="string">&#x27;meta[name=description]&#x27;</span>).attr(<span class="string">&#x27;content&#x27;</span>, $.t(<span class="string">&#x27;head.description&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// use plugins and options as needed, for options, detail see</span></span><br><span class="line">  <span class="comment">// https://www.i18next.com</span></span><br><span class="line">  i18next</span><br><span class="line">    <span class="comment">// detect user language</span></span><br><span class="line">    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">    .use(i18nextBrowserLanguageDetector)</span><br><span class="line">    <span class="comment">// init i18next</span></span><br><span class="line">    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">      <span class="attr">resources</span>: &#123;</span><br><span class="line">        <span class="attr">en</span>: &#123;</span><br><span class="line">          <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="attr">head</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;My Awesome Landing-Page&#x27;</span>,</span><br><span class="line">              <span class="attr">description</span>: <span class="string">&#x27;The description of this awesome landing page.&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">intro</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;Landing Page&#x27;</span>,</span><br><span class="line">              <span class="attr">subTitle</span>: <span class="string">&#x27;Some subtitle&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">footer</span>: &#123;</span><br><span class="line">              <span class="attr">counter_one</span>: <span class="string">&#x27;Changed language just once&#x27;</span>,</span><br><span class="line">              <span class="attr">counter_other</span>: <span class="string">&#x27;Changed language already &#123;&#123;count&#125;&#125; times&#x27;</span>,</span><br><span class="line">              <span class="attr">date</span>: <span class="string">&#x27;It\&#x27;s &#123;&#123;date, LLLL&#125;&#125;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">de</span>: &#123;</span><br><span class="line">          <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="attr">head</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;Meine grossartige Webseite&#x27;</span>,</span><br><span class="line">              <span class="attr">description</span>: <span class="string">&#x27;Die Beschreibung dieser grossartigen Webseite.&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">intro</span>: &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;Webseite&#x27;</span>,</span><br><span class="line">              <span class="attr">subTitle</span>: <span class="string">&#x27;Ein Untertitel&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">footer</span>: &#123;</span><br><span class="line">              <span class="attr">counter_one</span>: <span class="string">&#x27;Die Sprache wurde erst ein mal gewechselt&#x27;</span>,</span><br><span class="line">              <span class="attr">counter_other</span>: <span class="string">&#x27;Die Sprache wurde &#123;&#123;count&#125;&#125; mal gewechselt&#x27;</span>,</span><br><span class="line">              <span class="attr">date</span>: <span class="string">&#x27;Es ist &#123;&#123;date, LLLL&#125;&#125;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err, t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// define the formatter function</span></span><br><span class="line">      i18next.services.formatter.add(<span class="string">&#x27;LLLL&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> moment(value).locale(lng).format(<span class="string">&#x27;LLLL&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// for options see</span></span><br><span class="line">      <span class="comment">// https://github.com/i18next/jquery-i18next#initialize-the-plugin</span></span><br><span class="line">      jqueryI18next.init(i18next, $, &#123; <span class="attr">useOptionsAttr</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// fill language switcher</span></span><br><span class="line">      <span class="built_in">Object</span>.keys(lngs).map(<span class="function">(<span class="params">lng</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> opt = <span class="keyword">new</span> Option(lngs[lng].nativeName, lng);</span><br><span class="line">        <span class="keyword">if</span> (lng === i18next.resolvedLanguage) &#123;</span><br><span class="line">          opt.setAttribute(<span class="string">&quot;selected&quot;</span>, <span class="string">&quot;selected&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">&#x27;#languageSwitcher&#x27;</span>).append(opt);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> languageChangedCounter = <span class="number">0</span>;</span><br><span class="line">      $(<span class="string">&#x27;#languageSwitcher&#x27;</span>).change(<span class="function">(<span class="params">a, b, c</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> chosenLng = $(<span class="built_in">this</span>).find(<span class="string">&quot;option:selected&quot;</span>).attr(<span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">        i18next.changeLanguage(chosenLng, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          rerender();</span><br><span class="line">            </span><br><span class="line">          <span class="comment">// language changed message</span></span><br><span class="line">          languageChangedCounter++;</span><br><span class="line">          $(<span class="string">&#x27;#languageChangedNotification&#x27;</span>).localize(&#123; <span class="attr">count</span>: languageChangedCounter &#125;)</span><br><span class="line">          <span class="keyword">if</span> (languageChangedCounter === <span class="number">1</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;#languageChangedNotification&#x27;</span>).show();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      rerender();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>😎 Cool, now we have a language specific date formatting!</strong></p><p>English:<img src="app_3.jpg" alt="jQuery english" title="locize © inweso GmbH"></p><p>German:<img src="app_4.jpg" alt="jQuery german" title="locize © inweso GmbH"></p><h3 id="Context"><a href="#Context" class="headerlink" title="Context "></a>Context <a name="context"></a></h3><p>What about a specific greeting message based on the current day time? i.e. morning, evening, etc.This is possible thanks to the <a href="https://www.i18next.com/translation-function/context">context</a> feature of i18next.</p><p>Let&#39;s create a <code>getGreetingTime</code> function and use the result as context information for our footer translation.<br />And add some context specific translations keys:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getGreetingTime = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> split_afternoon = <span class="number">12</span>; <span class="comment">// 24hr time to split the afternoon</span></span><br><span class="line">  <span class="keyword">const</span> split_evening = <span class="number">17</span>; <span class="comment">// 24hr time to split the evening</span></span><br><span class="line">  <span class="keyword">const</span> currentHour = moment().hour();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (currentHour &gt;= split_afternoon &amp;&amp; currentHour &lt;= split_evening) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;afternoon&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentHour &gt;= split_evening) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;evening&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;morning&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rerender = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// start localizing, details:</span></span><br><span class="line">  <span class="comment">// https://github.com/i18next/jquery-i18next#usage-of-selector-function</span></span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).localize();</span><br><span class="line">  $(<span class="string">&#x27;#footerMessage&#x27;</span>).localize(&#123; <span class="attr">context</span>: getGreetingTime() &#125;);</span><br><span class="line">  $(<span class="string">&#x27;title&#x27;</span>).text($.t(<span class="string">&#x27;head.title&#x27;</span>))</span><br><span class="line">  $(<span class="string">&#x27;meta[name=description]&#x27;</span>).attr(<span class="string">&#x27;content&#x27;</span>, $.t(<span class="string">&#x27;head.description&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resources</span>: &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123;</span><br><span class="line">    <span class="attr">translation</span>: &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="attr">footer</span>: &#123;</span><br><span class="line">        <span class="attr">counter_one</span>: <span class="string">&#x27;Changed language just once&#x27;</span>,</span><br><span class="line">        <span class="attr">counter_other</span>: <span class="string">&#x27;Changed language already &#123;&#123;count&#125;&#125; times&#x27;</span>,</span><br><span class="line">        <span class="attr">date</span>: <span class="string">&#x27;It\&#x27;s &#123;&#123;date, LLLL&#125;&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">date_afternoon</span>: <span class="string">&#x27;Good afternoon! It\&#x27;s &#123;&#123;date, LLLL&#125;&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">date_evening</span>: <span class="string">&#x27;Good evening! Today was the &#123;&#123;date, LLLL&#125;&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">date_morning</span>: <span class="string">&#x27;Good morning! Today is &#123;&#123;date, LLLL&#125;&#125; | Have a nice day!&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">de</span>: &#123;</span><br><span class="line">    <span class="attr">translation</span>: &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="attr">footer</span>: &#123;</span><br><span class="line">        <span class="attr">counter_one</span>: <span class="string">&#x27;Die Sprache wurde erst ein mal gewechselt&#x27;</span>,</span><br><span class="line">        <span class="attr">counter_other</span>: <span class="string">&#x27;Die Sprache wurde &#123;&#123;count&#125;&#125; mal gewechselt&#x27;</span>,</span><br><span class="line">        <span class="attr">date</span>: <span class="string">&#x27;Es ist &#123;&#123;date, LLLL&#125;&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">date_afternoon</span>: <span class="string">&#x27;Guten Tag! Es ist &#123;&#123;date, LLLL&#125;&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">date_evening</span>: <span class="string">&#x27;Guten Abend! Heute war &#123;&#123;date, LLLL&#125;&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">date_morning</span>: <span class="string">&#x27;Guten Morgen! Heute ist &#123;&#123;date, LLLL&#125;&#125; | Wünsche einen schönen Tag!&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>😁 Yeah, It works!</strong></p><p><img src="app_5.jpg" alt="jQuery translations" title="locize © inweso GmbH"></p><h3 id="Separate-translations-from-code"><a href="#Separate-translations-from-code" class="headerlink" title="Separate translations from code "></a>Separate translations from code <a name="separate"></a></h3><p>Having the translations in our <code>i18n.js</code> file works, but is not that suitable to work with, for translators.Let&#39;s separate the translations from the code and pleace them in dedicated json files.</p><p>Because this is a web application, <a href="https://github.com/i18next/i18next-http-backend">i18next-http-backend</a> will help us to do so.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/i18next-http-backend@1.3.2/i18nextHttpBackend.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Create a <code>locales</code> folder and move the translations there:</p><p><img src="public_folder.jpg" alt="public locales" title="locize © inweso GmbH"></p><p>Adapt the <code>i18n.js</code> file to use the <code>i18next-http-backend</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// use plugins and options as needed, for options, detail see</span></span><br><span class="line">  <span class="comment">// https://www.i18next.com</span></span><br><span class="line">  i18next</span><br><span class="line">    <span class="comment">// i18next-http-backend</span></span><br><span class="line">    <span class="comment">// loads translations from your server</span></span><br><span class="line">    <span class="comment">// https://github.com/i18next/i18next-http-backend</span></span><br><span class="line">    .use(i18nextHttpBackend)</span><br><span class="line">    <span class="comment">// detect user language</span></span><br><span class="line">    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">    .use(i18nextBrowserLanguageDetector)</span><br><span class="line">    <span class="comment">// init i18next</span></span><br><span class="line">    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span></span><br><span class="line">      <span class="comment">// i.e. if you want to customize a different translation path,</span></span><br><span class="line">      <span class="comment">// use the loadPath option:</span></span><br><span class="line">      <span class="comment">// backend: &#123;</span></span><br><span class="line">      <span class="comment">//   loadPath: &#x27;/assets/locales/&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;, <span class="function">(<span class="params">err, t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now the translations are loaded asynchronously, so it may be the UI will refresh a bit later, as soon as the translations are loaded.To optimize this behaviour, you can show some sort of loading indicator until the i18next is initialized.</p><p>Something like:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;loader&quot;</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- your real content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#loader&#x27;</span>).hide();</span><br><span class="line">$(<span class="string">&#x27;#content&#x27;</span>).show();</span><br></pre></td></tr></table></figure><p>Now your app looks still the same, but your translations are separated.</p><p><img src="spinner.gif"></p><p>If you want to support a new language, you just create a new folder and a new translation json file.This gives you the possibility to send the translations to some translators.Or if you&#39;re working with a translation management system you can just <a href="https://github.com/locize/react-tutorial#use-the-locize-cli">synchronize the files with a cli</a>.</p><h3 id="Better-translation-management"><a href="#Better-translation-management" class="headerlink" title="Better translation management "></a>Better translation management <a name="better-translation-management"></a></h3><p>By sending the translations to some translators or translator agency you have more control and a direct contact with them. But this also means more work for you.This is a traditional way. But be aware sending files around creates always an overhead.</p><blockquote><p>Does a better option exist?</p></blockquote><h4 id="For-sure"><a href="#For-sure" class="headerlink" title="For sure! "></a>For sure! <a name="for-sure"></a></h4><p>i18next helps to get the application translated, and this is great - but there is more to it.</p><ul><li>How do you integrate any translation services / agency?</li><li>How do you keep track of new or removed content?</li><li>How do you handle proper versioning?</li><li>How do you deploy translation changes without deploying your complete application?</li><li>and a lot more...</li></ul><p><strong>Looking for something like this❓</strong></p><ul><li><a href="https://docs.locize.com/integration/instrumenting-your-code#i-18-next">Easy to integrate</a></li><li>Continuous deployment? <a href="https://locize.com/how-it-works.html#continouslocalization">Continuous localization</a>!</li><li>Manage the translation files with ease</li><li><a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators">Order professional translations</a></li><li>Analytics &amp; Statistics</li><li><a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">Profit from our content delivery network (CDN)</a></li><li><a href="https://docs.locize.com/more/versioning">Versioning of your translations</a></li><li><a href="https://docs.locize.com/whats-inside/auto-machine-translation">Automatic and On-Demand Machine Translation</a></li><li><a href="https://docs.locize.com/more/general-questions/how-is-locize-different-from-the-alternatives#service-lock-in">Riskfree: Take your data with you</a></li><li><a href="https://locize.com/pricing.html">Transparent and fair pricing</a></li><li>and a lot more...</li></ul><p><img src="transform_your_localization_process_small.jpg" alt="transform the localization process" title="locize © inweso GmbH"></p><h4 id="How-does-this-look-like"><a href="#How-does-this-look-like" class="headerlink" title="How does this look like? "></a>How does this look like? <a name="how-look"></a></h4><p>First you need to signup at <a href="https://locize.app/register">locize</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a>.Then <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a> in locize and add your translations. You can add your translations either by using the <a href="https://github.com/locize/react-tutorial#use-the-locize-cli">cli</a> or by <a href="https://docs.locize.com/more/general-questions/how-to-import-translations-from-a-file">importing the individual json files</a> or via <a href="https://docs.locize.com/integration/api#update-remove-translations">API</a>.</p><p>Done so, we&#39;re going to replace <a href="https://github.com/i18next/i18next-http-backend">i18next-http-backend</a> with <a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/i18next-locize-backend@4.2.8/i18nextLocizeBackend.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br></pre></td></tr></table></figure><p>After having imported the translations to locize, delete the <code>locales</code> folder and adapt the <code>i18n.js</code> file to use the i18next-locize-backend and make sure you copy the project-id and api-key from within your locize project:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;8d751621-323e-4bda-94c8-7d2368102e62&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;302aca54-2ea8-4b9f-b5f0-df1369c59427&#x27;</span> <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// use plugins and options as needed, for options, detail see</span></span><br><span class="line">  <span class="comment">// https://www.i18next.com</span></span><br><span class="line">  i18next</span><br><span class="line">    <span class="comment">// i18next-locize-backend</span></span><br><span class="line">    <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">    <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">    .use(i18nextLocizeBackend)</span><br><span class="line">    <span class="comment">// detect user language</span></span><br><span class="line">    <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">    .use(i18nextBrowserLanguageDetector)</span><br><span class="line">    <span class="comment">// init i18next</span></span><br><span class="line">    <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">    .init(&#123;</span><br><span class="line">      <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">      <span class="attr">backend</span>: locizeOptions</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err, t</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a> offers a functionality to retrieve the available languages directly from locize, let&#39;s use it:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;8d751621-323e-4bda-94c8-7d2368102e62&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;302aca54-2ea8-4b9f-b5f0-df1369c59427&#x27;</span> <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> locizeBackend = <span class="keyword">new</span> i18nextLocizeBackend(locizeOptions, <span class="function">(<span class="params">err, opts, lngs</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use plugins and options as needed, for options, detail see</span></span><br><span class="line">    <span class="comment">// https://www.i18next.com</span></span><br><span class="line">    i18next</span><br><span class="line">      <span class="comment">// i18next-locize-backend</span></span><br><span class="line">      <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">      <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">      .use(locizeBackend)</span><br><span class="line">      <span class="comment">// detect user language</span></span><br><span class="line">      <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">      .use(i18nextBrowserLanguageDetector)</span><br><span class="line">      <span class="comment">// init i18next</span></span><br><span class="line">      <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">      .init(&#123;</span><br><span class="line">        <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">        <span class="attr">backend</span>: locizeOptions</span><br><span class="line">      &#125;, <span class="function">(<span class="params">err, t</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// new usage</span></span><br><span class="line">        i18next.services.formatter.add(<span class="string">&#x27;LLLL&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> moment(value).locale(lng).format(<span class="string">&#x27;LLLL&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for options see</span></span><br><span class="line">        <span class="comment">// https://github.com/i18next/jquery-i18next#initialize-the-plugin</span></span><br><span class="line">        jqueryI18next.init(i18next, $, &#123; <span class="attr">useOptionsAttr</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fill language switcher</span></span><br><span class="line">        <span class="comment">// with the lngs retrieved directly from locize...</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(lngs).map(<span class="function">(<span class="params">lng</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> opt = <span class="keyword">new</span> Option(lngs[lng].nativeName, lng);</span><br><span class="line">          <span class="keyword">if</span> (lng === i18next.resolvedLanguage) &#123;</span><br><span class="line">            opt.setAttribute(<span class="string">&quot;selected&quot;</span>, <span class="string">&quot;selected&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          $(<span class="string">&#x27;#languageSwitcher&#x27;</span>).append(opt);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> languageChangedCounter = <span class="number">0</span>;</span><br><span class="line">        $(<span class="string">&#x27;#languageSwitcher&#x27;</span>).change(<span class="function">(<span class="params">a, b, c</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> chosenLng = $(<span class="built_in">this</span>).find(<span class="string">&quot;option:selected&quot;</span>).attr(<span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">          i18next.changeLanguage(chosenLng, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            rerender();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// language changed message</span></span><br><span class="line">            languageChangedCounter++;</span><br><span class="line">            $(<span class="string">&#x27;#languageChangedNotification&#x27;</span>).localize(&#123; <span class="attr">count</span>: languageChangedCounter &#125;)</span><br><span class="line">            <span class="keyword">if</span> (languageChangedCounter === <span class="number">1</span>) &#123;</span><br><span class="line">              $(<span class="string">&#x27;#languageChangedNotification&#x27;</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        rerender();</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&#x27;#loader&#x27;</span>).hide();</span><br><span class="line">        $(<span class="string">&#x27;#content&#x27;</span>).show();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now the translations are served directly from the <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">locize CDN</a>. The jQuery i18n has now CDN superpower 😁.</p><h4 id="save-missing-translations"><a href="#save-missing-translations" class="headerlink" title="save missing translations "></a>save missing translations <a name="save-missing"></a></h4><p>Thanks to the use of the <a href="https://www.i18next.com/overview/configuration-options#missing-keys">saveMissing functionality</a>, new keys gets added to locize automatically, while developing the app.</p><p>Just pass <code>saveMissing: true</code> in the i18next options:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">.init(&#123;</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">  <span class="attr">saveMissing</span>: <span class="literal">true</span> <span class="comment">// do not enable it on production</span></span><br><span class="line">&#125;, <span class="function">(<span class="params">err, t</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>Each time you&#39;ll use a new key, it will be sent to locize, i.e.:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-i18n=<span class="string">&quot;new.key&quot;</span>&gt;<span class="built_in">this</span> will be added automatically&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>will result in locize like this:</p><p><img src="missing_key.jpg" alt="missing key" title="locize © inweso GmbH"></p><h4 id="👀-but-there-39-s-more"><a href="#👀-but-there-39-s-more" class="headerlink" title="👀 but there&#39;s more... "></a>👀 but there&#39;s more... <a name="more"></a></h4><p>Thanks to the <a href="https://github.com/locize/locize-lastused">locize-lastused</a> plugin, you&#39;ll be able to <a href="https://docs.locize.com/guides-tips-and-tricks/unused-translations">find and filter in locize which keys are used or not used anymore</a>.</p><p>With the help of the <a href="https://github.com/locize/locize">locize</a> plugin, you&#39;ll be able to use your app within the locize <a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>.</p><p>Lastly, with the help of the <a href="https://docs.locize.com/whats-inside/auto-machine-translation">auto-machinetranslation workflow</a> and the use of the <a href="https://www.i18next.com/overview/configuration-options#missing-keys">saveMissing functionality</a>, new keys not only gets added to locize automatically, while developing the app, but are also automatically translated into the target languages using machine translation.</p><p><em>Check out this <a href="https://youtu.be/VfxBpSXarlU">video</a> to see how the automatic machine translation workflow looks like!</em></p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/VfxBpSXarlU" frameborder="0" loading="lazy" allowfullscreen></iframe></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/locize-lastused@3.0.13/locizeLastUsed.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/locize@2.2.4/locize.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br></pre></td></tr></table></figure><p>use them in <code>i18n.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getGreetingTime = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> split_afternoon = <span class="number">12</span>; <span class="comment">// 24hr time to split the afternoon</span></span><br><span class="line">  <span class="keyword">const</span> split_evening = <span class="number">17</span>; <span class="comment">// 24hr time to split the evening</span></span><br><span class="line">  <span class="keyword">const</span> currentHour = moment().hour();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (currentHour &gt;= split_afternoon &amp;&amp; currentHour &lt;= split_evening) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;afternoon&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentHour &gt;= split_evening) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;evening&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;morning&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rerender = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// start localizing, details:</span></span><br><span class="line">  <span class="comment">// https://github.com/i18next/jquery-i18next#usage-of-selector-function</span></span><br><span class="line">  $(<span class="string">&#x27;body&#x27;</span>).localize();</span><br><span class="line">  $(<span class="string">&#x27;#footerMessage&#x27;</span>).localize(&#123; <span class="attr">context</span>: getGreetingTime() &#125;);</span><br><span class="line">  $(<span class="string">&#x27;title&#x27;</span>).text($.t(<span class="string">&#x27;head.title&#x27;</span>))</span><br><span class="line">  $(<span class="string">&#x27;meta[name=description]&#x27;</span>).attr(<span class="string">&#x27;content&#x27;</span>, $.t(<span class="string">&#x27;head.description&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;8d751621-323e-4bda-94c8-7d2368102e62&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;302aca54-2ea8-4b9f-b5f0-df1369c59427&#x27;</span> <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">i18next.on(<span class="string">&#x27;editorSaved&#x27;</span>, rerender); <span class="comment">// used for the inContext editor</span></span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> locizeBackend = <span class="keyword">new</span> i18nextLocizeBackend(locizeOptions, <span class="function">(<span class="params">err, opts, lngs</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use plugins and options as needed, for options, detail see</span></span><br><span class="line">    <span class="comment">// https://www.i18next.com</span></span><br><span class="line">    i18next</span><br><span class="line">      <span class="comment">// locize-editor</span></span><br><span class="line">      <span class="comment">// InContext Editor of locize</span></span><br><span class="line">      .use(locize.locizePlugin)</span><br><span class="line">      <span class="comment">// locize-lastused (do not use this in production)</span></span><br><span class="line">      <span class="comment">// sets a timestamp of last access on every translation segment on locize</span></span><br><span class="line">      <span class="comment">// -&gt; safely remove the ones not being touched for weeks/months</span></span><br><span class="line">      <span class="comment">// https://github.com/locize/locize-lastused</span></span><br><span class="line">      .use(locizeLastUsed)</span><br><span class="line">      <span class="comment">// i18next-locize-backend</span></span><br><span class="line">      <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">      <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">      .use(locizeBackend)</span><br><span class="line">      <span class="comment">// detect user language</span></span><br><span class="line">      <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">      .use(i18nextBrowserLanguageDetector)</span><br><span class="line">      <span class="comment">// init i18next</span></span><br><span class="line">      <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">      .init(&#123;</span><br><span class="line">        ...opts,</span><br><span class="line">        <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">        <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">        <span class="attr">locizeLastUsed</span>: locizeOptions,</span><br><span class="line">        <span class="attr">saveMissing</span>: <span class="literal">true</span></span><br><span class="line">        <span class="comment">// interpolation: &#123;</span></span><br><span class="line">        <span class="comment">//   // legacy usage</span></span><br><span class="line">        <span class="comment">//   format: (value, format, lng) =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     if (value instanceof Date) &#123;</span></span><br><span class="line">        <span class="comment">//       return moment(value).locale(lng).format(format);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     return value;</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      &#125;, <span class="function">(<span class="params">err, t</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// new usage</span></span><br><span class="line">        i18next.services.formatter.add(<span class="string">&#x27;LLLL&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> moment(value).locale(lng).format(<span class="string">&#x27;LLLL&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// for options see</span></span><br><span class="line">        <span class="comment">// https://github.com/i18next/jquery-i18next#initialize-the-plugin</span></span><br><span class="line">        jqueryI18next.init(i18next, $, &#123; <span class="attr">useOptionsAttr</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fill language switcher</span></span><br><span class="line">        <span class="built_in">Object</span>.keys(lngs).map(<span class="function">(<span class="params">lng</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> opt = <span class="keyword">new</span> Option(lngs[lng].nativeName, lng);</span><br><span class="line">          <span class="keyword">if</span> (lng === i18next.resolvedLanguage) &#123;</span><br><span class="line">            opt.setAttribute(<span class="string">&quot;selected&quot;</span>, <span class="string">&quot;selected&quot;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          $(<span class="string">&#x27;#languageSwitcher&#x27;</span>).append(opt);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> languageChangedCounter = <span class="number">0</span>;</span><br><span class="line">        $(<span class="string">&#x27;#languageSwitcher&#x27;</span>).change(<span class="function">(<span class="params">a, b, c</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> chosenLng = $(<span class="built_in">this</span>).find(<span class="string">&quot;option:selected&quot;</span>).attr(<span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">          i18next.changeLanguage(chosenLng, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            rerender();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// language changed message</span></span><br><span class="line">            languageChangedCounter++;</span><br><span class="line">            $(<span class="string">&#x27;#languageChangedNotification&#x27;</span>).localize(&#123; <span class="attr">count</span>: languageChangedCounter &#125;)</span><br><span class="line">            <span class="keyword">if</span> (languageChangedCounter === <span class="number">1</span>) &#123;</span><br><span class="line">              $(<span class="string">&#x27;#languageChangedNotification&#x27;</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        rerender();</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&#x27;#loader&#x27;</span>).hide();</span><br><span class="line">        $(<span class="string">&#x27;#content&#x27;</span>).show();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://docs.locize.com/whats-inside/auto-machine-translation">Automatic machine translation</a>:</p><p><img src="missing_key_auto_mt.jpg" alt="missing key auto" title="locize © inweso GmbH"></p><p><a href="(https://docs.locize.com/guides-tips-and-tricks/unused-translations)">Last used translations filter</a>:</p><p><img src="last_used.jpg" alt="i18next last used" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>:</p><p><img src="in_context.jpg" alt="i18next incontext" title="locize © inweso GmbH"></p><p>Now, during development, you&#39;ll continue to save missing keys and to make use of <code>lastused</code> feature.</p><p>And in production environment, you should disable or remove the <code>saveMissing</code> and <code>lastused</code> functionality, and also the api-key should not exposed.</p><p><a href="https://docs.locize.com/more/caching">Caching</a>:</p><p><img src="caching.jpg" alt="i18next caching" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/versioning#merging-versions">Merging versions</a>:</p><p><img src="overwrite_version.jpg" alt="overwrite version" title="locize © inweso GmbH"></p><p><em>🧑‍💻 The complete code can be found <a href="https://github.com/i18next/jquery-i18next/tree/master/example/landing">here</a>.</em></p><p><em>Check also the <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY&t=294s">code integration part</a> in this <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY">YouTube video</a>.</em></p><p>There&#39;s also an <a href="https://youtu.be/SA_9i4TtxLQ">i18next crash course video</a>.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/SA_9i4TtxLQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>I hope you’ve learned a few new things about <a href="https://www.i18next.com/">i18next</a>, <a href="https://github.com/i18next/jquery-i18next">jQuery localization</a> and <a href="https://locize.com/">modern localization workflows</a>.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth trying the <a href="https://locize.com/">localization management platform - locize</a>.</p><p>The founders of <a href="https://locize.com/">locize</a> are also the creators of <a href="https://www.i18next.com/">i18next</a>. So by using <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.</p><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> jquery </tag>
            
            <tag> jquery-i18next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Internationalization (i18n) for Deno with i18next</title>
      <link href="/blog/i18n-for-deno-with-i18next/"/>
      <url>/blog/i18n-for-deno-with-i18next/</url>
      
        <content type="html"><![CDATA[<p><img src="deno_i18next.jpg" alt="Deno i18n" title="Deno Internationalization"></p><p>You may already know how to properly internationalize a client side application, like described in this <a href="../react-i18next/">React based tutorial</a>, this <a href="../angular-i18next/">Angular based tutorial</a> or this <a href="../give-vue-i18n-more-superpowers/">Vue based tutorial</a>.</p><p>In this blog post we will shed light on <a href="https://deno.land/">Deno</a>.</p><blockquote><p>Why do I need to handle i18n in Deno?</p></blockquote><p>Think of all user faced content not directly rendered in your browser...</p><ul><li>For example you&#39;re building a <a href="#cli">command line interface (CLI)</a>?</li><li>You&#39;re using <a href="#ssr">server side rendering (SSR)</a>?</li><li>Or you&#39;re sending some emails?</li><li>etc.</li></ul><h2 id="Let-39-s-check-that-out"><a href="#Let-39-s-check-that-out" class="headerlink" title="Let&#39;s check that out..."></a>Let&#39;s check that out...</h2><p>We will show some examples that uses <a href="https://www.i18next.com/">i18next</a> as i18n framework. If you&#39;re curious to know why we suggest i18next, have a look at <a href="https://locize.com/i18next.html">this page</a>.</p><h2 id="Command-line-interface-CLI"><a href="#Command-line-interface-CLI" class="headerlink" title="Command line interface (CLI) "></a>Command line interface (CLI) <a name="cli"></a></h2><p>Let&#39;s start with something simple: a verry small CLI app.We are defining a <code>sayhi</code> command with optional language and name parameters that should respond with a salutation in the appropriate language.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std/flags/mod.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; args &#125; = Deno;</span><br><span class="line"><span class="keyword">const</span> parsedArgs = parse(args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cmd = parsedArgs._[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cmd !== <span class="string">&quot;sayhi&quot;</span> &amp;&amp; cmd !== <span class="string">&quot;s&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`unknown command <span class="subst">$&#123;cmd&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = parsedArgs.n || parsedArgs.name;</span><br><span class="line"><span class="keyword">const</span> language = parsedArgs.l || parsedArgs.language;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123; name, language &#125;)</span><br></pre></td></tr></table></figure><p>Ok, now let&#39;s create a new <code>i18n.ts</code> file and setup i18next accordingly:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/i18next/index.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> enTranslation <span class="keyword">from</span> <span class="string">&quot;./locales/en/translation.json&quot;</span> assert &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">import</span> deTranslation <span class="keyword">from</span> <span class="string">&quot;./locales/de/translation.json&quot;</span> assert &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;json&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> systemLocale = <span class="built_in">Intl</span>.DateTimeFormat().resolvedOptions().locale;</span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  .use(Backend)</span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="comment">// debug: true,</span></span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: enTranslation,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">de</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: deTranslation,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (lng: string | <span class="literal">undefined</span> | <span class="literal">null</span>) =&gt;</span><br><span class="line">  i18next.getFixedT(lng || systemLocale);</span><br></pre></td></tr></table></figure><p>And also our translation resources:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// locales/en/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;salutation&quot;</span>: <span class="string">&quot;Hello World!&quot;</span>,</span><br><span class="line">  <span class="string">&quot;salutationWithName&quot;</span>: <span class="string">&quot;Hello &#123;&#123;name&#125;&#125;!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// locales/de/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;salutation&quot;</span>: <span class="string">&quot;Hallo Welt!&quot;</span>,</span><br><span class="line">  <span class="string">&quot;salutationWithName&quot;</span>: <span class="string">&quot;Hallo &#123;&#123;name&#125;&#125;!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can use the <code>i18n.ts</code> export like that:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; parse &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/std/flags/mod.ts&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&quot;./i18n.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; args &#125; = Deno;</span><br><span class="line"><span class="keyword">const</span> parsedArgs = parse(args);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cmd = parsedArgs._[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cmd !== <span class="string">&quot;sayhi&quot;</span> &amp;&amp; cmd !== <span class="string">&quot;s&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`unknown command <span class="subst">$&#123;cmd&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = parsedArgs.n || parsedArgs.name;</span><br><span class="line"><span class="keyword">const</span> language = parsedArgs.l || parsedArgs.language;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t = i18n(language);</span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(t(<span class="string">&quot;salutationWithName&quot;</span>, &#123; name &#125;));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(t(<span class="string">&quot;salutation&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, what&#39;s the result?</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## if we execute the cli command without any parameters...</span></span><br><span class="line">deno run --allow-read mod.ts sayhi</span><br><span class="line"><span class="comment">## result: Hello World!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## if we execute the cli command with a language parameter...</span></span><br><span class="line">deno run --allow-read mod.ts sayhi --language de</span><br><span class="line"><span class="comment">## result: Hallo Welt!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## if we execute the cli command with a language parameter and a name parameter...</span></span><br><span class="line">deno run --allow-read mod.ts sayhi --language de --name John</span><br><span class="line"><span class="comment">## result: Hallo John!</span></span><br></pre></td></tr></table></figure><p><strong>Easy, isn&#39;t it?</strong></p><p>You can also i.e. use the <a href="https://github.com/i18next/i18next-fs-backend">i18next-fs-backend</a> to dynamically load your translations, for example like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/i18next/index.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/i18next_fs_backend/index.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> systemLocale = <span class="built_in">Intl</span>.DateTimeFormat().resolvedOptions().locale;</span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  .use(Backend)</span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="comment">// debug: true,</span></span><br><span class="line">    <span class="attr">initImmediate</span>: <span class="literal">false</span>, <span class="comment">// setting initImediate to false, will load the resources synchronously</span></span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">    <span class="attr">preload</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>],</span><br><span class="line">    <span class="attr">backend</span>: &#123;</span><br><span class="line">      <span class="attr">loadPath</span>: <span class="string">&quot;locales/&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (lng: string | <span class="literal">undefined</span> | <span class="literal">null</span>) =&gt;</span><br><span class="line">  i18next.getFixedT(lng || systemLocale);</span><br></pre></td></tr></table></figure><p><em>🧑‍💻 A code example can be found <a href="https://github.com/i18next/i18next-cli-app-example-deno">here</a>.</em></p><h3 id="A-possible-next-step"><a href="#A-possible-next-step" class="headerlink" title="A possible next step..."></a>A possible next step...</h3><p>A possible next step could be to professionalize the translation management.This means the translations would be &quot;managed&quot; (add new languages, new translations etc...) in a translation management system (TMS), like <a href="https://www.locize.com/">locize</a> and synchronized with your code. To see how this could look like, check out <a href="https://github.com/locize/react-tutorial#step-1---keep-existing-code-setup-but-synchronize-with-locize"><strong>Step 1</strong> in this tutorial</a>.</p><h2 id="Server-Side-Rendering-SSR"><a href="#Server-Side-Rendering-SSR" class="headerlink" title="Server Side Rendering (SSR) "></a>Server Side Rendering (SSR) <a name="ssr"></a></h2><p>For this example we will use the http framework <a href="https://github.com/zhmushan/abc">abc</a> (created by <a href="https://twitter.com/zhmushan">木杉</a>, but any other framework will also work.</p><p>This time we will use a different i18next module, <a href="https://github.com/i18next/i18next-http-middleware">i18next-http-middleware</a>.It can be used for all Deno web frameworks, like <a href="https://github.com/zhmushan/abc">abc</a> or <a href="https://github.com/keroxp/servest">ServestJS</a>, but also for Node.js web frameworks, like <a href="https://expressjs.com/">express</a> or <a href="https://www.fastify.io/">Fastify</a>.</p><p>As already said, here we will use <a href="https://github.com/zhmushan/abc">abc</a>.</p><p>Let&#39;s again start with the <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;https://deno.land/x/i18next/index.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;https://deno.land/x/i18next_fs_backend/index.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextMiddleware <span class="keyword">from</span> <span class="string">&#x27;https://deno.land/x/i18next_http_middleware/index.js&#x27;</span></span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  .use(Backend)</span><br><span class="line">  .use(i18nextMiddleware.LanguageDetector)</span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="comment">// debug: true,</span></span><br><span class="line">    <span class="attr">initImmediate</span>: <span class="literal">false</span>, <span class="comment">// setting initImediate to false, will load the resources synchronously</span></span><br><span class="line">    <span class="attr">backend</span>: &#123;</span><br><span class="line">      <span class="attr">loadPath</span>: <span class="string">&#x27;locales/&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">preload</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>, <span class="string">&#x27;it&#x27;</span>]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> i18n = i18next</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> middleware = i18nextMiddleware</span><br></pre></td></tr></table></figure><p>And our translation resources...</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// locales/en/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;home&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;server&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;started&quot;</span>: <span class="string">&quot;Server is listening on port &#123;&#123;port&#125;&#125;.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// locales/de/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;home&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Hallo Welt!&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;server&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;started&quot;</span>: <span class="string">&quot;Der server lauscht auf dem Port &#123;&#123;port&#125;&#125;.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// locales/it/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;home&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Ciao Mondo!&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;server&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;started&quot;</span>: <span class="string">&quot;Il server sta aspettando sul port &#123;&#123;port&#125;&#125;.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A simple ejs template:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>i18next - abc with dejs<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&lt;%= t(&#x27;home.title&#x27;) %&gt;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/?lng=en&quot;</span>&gt;</span>english<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span> | <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/?lng=de&quot;</span>&gt;</span>deutsch<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/?lng=it&quot;</span>&gt;</span>italiano<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=&lt;%= <span class="string">&quot;/raw?lng=&quot;</span> + <span class="attr">i18n.resolvedLanguage</span> %&gt;</span>&gt;raw test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Our &quot;main&quot; file <code>index.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deno run --allow-net --allow-read index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; Application &#125; <span class="keyword">from</span> <span class="string">&#x27;https://deno.land/x/abc/mod.ts&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; config &#125; <span class="keyword">from</span> <span class="string">&quot;https://deno.land/x/dotenv/mod.ts&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; i18n, middleware &#125; <span class="keyword">from</span> <span class="string">&#x27;./i18n.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderFile &#125; <span class="keyword">from</span> <span class="string">&#x27;https://deno.land/x/dejs/mod.ts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = config.PORT || <span class="number">8080</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Application()</span><br><span class="line"></span><br><span class="line">app.renderer = &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">name, data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> renderFile(<span class="string">`./views/<span class="subst">$&#123;name&#125;</span>.html`</span>, data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handle = middleware.handle(i18n)</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">next</span>) =&gt;</span></span><br><span class="line">  <span class="function">(<span class="params">c</span>) =&gt;</span> &#123;</span><br><span class="line">    handle(c)</span><br><span class="line">    <span class="keyword">return</span> next(c)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">c</span>) =&gt;</span> c.render(<span class="string">&#x27;index&#x27;</span>, &#123; <span class="attr">t</span>: c.request.t, <span class="attr">i18n</span>: c.request.i18n &#125;))</span><br><span class="line">app.get(<span class="string">&#x27;/raw&#x27;</span>, <span class="function">(<span class="params">c</span>) =&gt;</span> c.request.t(<span class="string">&#x27;home.title&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.start(&#123; port &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i18n.t(<span class="string">&#x27;server.started&#x27;</span>, &#123; port &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(i18n.t(<span class="string">&#x27;server.started&#x27;</span>, &#123; port, <span class="attr">lng</span>: <span class="string">&#x27;de&#x27;</span> &#125;))</span><br><span class="line"><span class="built_in">console</span>.log(i18n.t(<span class="string">&#x27;server.started&#x27;</span>, &#123; port, <span class="attr">lng</span>: <span class="string">&#x27;it&#x27;</span> &#125;))</span><br></pre></td></tr></table></figure><p>Now start the app and check what language you&#39;re seeing...<img src="dejs_abc.jpg" alt="dejs abc"></p><p>If you check the console output you&#39;ll also see something like this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br><span class="line"><span class="comment">## Server is listening on port 8080.</span></span><br><span class="line"><span class="comment">## Der server lauscht auf dem Port 8080.</span></span><br><span class="line"><span class="comment">## Il server sta aspettando sul port 8080.</span></span><br></pre></td></tr></table></figure><p><em>Yes, if you like, you can also internationalize your log statements 😁</em></p><p><em>🧑‍💻 A code example can be found <a href="https://github.com/i18next/i18next-http-middleware/tree/master/example/deno">here</a>.</em></p><h4 id="A-possible-next-step-1"><a href="#A-possible-next-step-1" class="headerlink" title="A possible next step..."></a>A possible next step...</h4><p>Do you wish to manage your translations in a translation management system (TMS), like <a href="https://www.locize.com/">locize</a>?</p><p>Just use <a href="https://github.com/locize/locize-cli">this cli</a> to synchronize the translations with your code. To see how this could look like check out <a href="https://github.com/locize/react-tutorial#step-1---keep-existing-code-setup-but-synchronize-with-locize"><strong>Step 1</strong> in this tutorial</a>.</p><p>Alternatively, use <a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a> instead of the <a href="https://github.com/i18next/i18next-fs-backend">i18next-fs-backend</a>.If you&#39;re running your code in a serverless environment, make sure you <a href="https://github.com/locize/i18next-locize-backend#important-advice-for-serverless-environments---aws-lambda-google-cloud-functions-azure-functions-etc">read this advice first</a>!</p><p>There&#39;s also an <a href="https://youtu.be/SA_9i4TtxLQ">i18next crash course video</a>.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/SA_9i4TtxLQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="🎉🥳-Conclusion-🎊🎁"><a href="#🎉🥳-Conclusion-🎊🎁" class="headerlink" title="🎉🥳 Conclusion 🎊🎁"></a>🎉🥳 Conclusion 🎊🎁</h2><p>As you see i18n is also important for Deno.</p><p>I hope you’ve learned a few new things about Deno server side internationalization and modern localization workflows.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth to try <a href="https://www.i18next.com/">i18next</a> and also <a href="https://www.locize.com/">locize</a>.</p><p>👍</p>]]></content>
      
      
      
        <tags>
            
            <tag> internationalization </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> react </tag>
            
            <tag> backend </tag>
            
            <tag> server </tag>
            
            <tag> serverside </tag>
            
            <tag> cli </tag>
            
            <tag> deno </tag>
            
            <tag> abc </tag>
            
            <tag> ejs </tag>
            
            <tag> dejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Next.js i18n-Compatible Static HTML Export</title>
      <link href="/blog/next-i18n-static/"/>
      <url>/blog/next-i18n-static/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg" title="Next.js SSG example"></p><p>You know <a href="https://nextjs.org/">Next.js</a>, right? - If not, stop reading this article and make something else.</p><p><em>If you&#39;re using Next.js 13 with app directory, have a look at <a href="../next-app-dir-i18n/">this blog post</a>.</em></p><p>Next.js is awesome! It gives you the best developer experience with all the features you need...</p><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><ul><li><a href="#but">BUT, you may have heard about this</a></li><li><a href="#what-do">So what can we do now?</a></li><li><a href="#recipe">The recipe</a></li><li><a href="#outcome">The outcome</a></li><li><a href="#voluntary">The voluntary part</a></li><li><a href="#congratulations">🎉🥳 Congratulations 🎊🎁</a></li></ul><h2 id="BUT-you-may-have-heard-about-this"><a href="#BUT-you-may-have-heard-about-this" class="headerlink" title="BUT, you may have heard about this: "></a><strong>BUT</strong>, you may have heard about this: <a name="but"></a></h2><blockquote><p>Error: i18n support is not compatible with next export. See here for more info on deploying: <a href="https://nextjs.org/docs/deployment">https://nextjs.org/docs/deployment</a></p></blockquote><p>This happens if you&#39;re using the <a href="https://nextjs.org/docs/advanced-features/i18n-routing">internationalized routing</a> feature and are trying to generate a <a href="https://nextjs.org/docs/advanced-features/static-html-export">static HTML export</a> by executing <code>next export</code>.Well, this features requires a Node.js server, or dynamic logic that cannot be computed during the build process, that&#39;s why it is <a href="https://nextjs.org/docs/advanced-features/static-html-export#unsupported-features">unsupported</a>.</p><p>This is the case if you&#39;re using <a href="https://github.com/i18next/next-i18next">next-i18next</a> for example.</p><h2 id="So-what-can-we-do-now"><a href="#So-what-can-we-do-now" class="headerlink" title="So what can we do now? "></a>So what can we do now? <a name="what-do"></a></h2><p><img src="what.jpg"></p><p>An obvious option is, to renounce to the static HTML export and use a Node.js server or <a href="https://vercel.com/">Vercel</a> as deployment environment.</p><p>But sometimes, due to company or architectural guidelines it is mandatory to use a static web server.<br/>Ok then renounce to i18n? - Not really, if we are here, it seems like to be a requirement.<br/>So then do it without <a href="https://nextjs.org/">Next.js</a>? - But this usually means to rewrite the whole project.</p><p>Executing <code>next export</code> when not using i18n seems to work.What if we do not try to use the <a href="https://nextjs.org/docs/advanced-features/i18n-routing">internationalized routing</a> feature and do the i18n routing on our own?</p><h2 id="The-recipe"><a href="#The-recipe" class="headerlink" title="The recipe "></a>The recipe <a name="recipe"></a></h2><p><img src="cook-book.jpg" title="recipe"></p><p>To &quot;cook&quot; this recipe you will need the following ingredients:</p><ul><li>use the <a href="https://nextjs.org/docs/routing/introduction#dynamic-route-segments">dynamic route segments</a> feature</li><li>willingness to change the structure of your project files</li><li>willingness to adapt a bit of code</li><li>a logic to detect the user language and redirect accordingly</li></ul><p>Sounds feasible. Let&#39;s start!</p><p><strong>1. Remove the i18n options from <code>next.config.js</code>.</strong></p>  <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- const &#123; i18n &#125; = require(&#x27;./next-i18next.config&#x27;)</span></span><br><span class="line"><span class="deletion">- </span></span><br><span class="line">module.exports = &#123;</span><br><span class="line"><span class="deletion">-   i18n,</span></span><br><span class="line">  trailingSlash: true,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. Create a <code>[locale]</code> folder inside your pages directory.</strong></p><p>  a) Move all your pages files to that folder <em>(not <code>_app.js</code> or <code>_document.js</code> etc..)</em>.</p><p>  b) Adapt your imports, if needed.</p><p><strong>3. Create a <code>getStatic.js</code> file and place it for example in a <code>lib</code> directory.</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; serverSideTranslations &#125; <span class="keyword">from</span> <span class="string">&#x27;next-i18next/serverSideTranslations&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> i18nextConfig <span class="keyword">from</span> <span class="string">&#x27;../next-i18next.config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getI18nPaths = <span class="function">() =&gt;</span></span><br><span class="line">  i18nextConfig.i18n.locales.map(<span class="function">(<span class="params">lng</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">locale</span>: lng</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStaticPaths = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">fallback</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">paths</span>: getI18nPaths()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getI18nProps</span>(<span class="params">ctx, ns = [<span class="string">&#x27;common&#x27;</span>]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> locale = ctx?.params?.locale</span><br><span class="line">  <span class="keyword">let</span> props = &#123;</span><br><span class="line">    ...(<span class="keyword">await</span> serverSideTranslations(locale, ns))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> props</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">makeStaticProps</span>(<span class="params">ns = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getStaticProps</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">props</span>: <span class="keyword">await</span> getI18nProps(ctx, ns)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. Use <code>getStaticPaths</code> and <code>makeStaticProps</code> in your pages, like this:</strong></p>  <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import &#123; useTranslation &#125; from &#x27;next-i18next&#x27;</span><br><span class="line">import &#123; getStaticPaths, makeStaticProps &#125; from &#x27;../../lib/getStatic&#x27;</span><br><span class="line">import &#123; Header &#125; from &#x27;../../components/Header&#x27;</span><br><span class="line">import &#123; Footer &#125; from &#x27;../../components/Footer&#x27;</span><br><span class="line">import Link from &#x27;../../components/Link&#x27;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ const getStaticProps = makeStaticProps([&#x27;common&#x27;, &#x27;footer&#x27;])</span></span><br><span class="line"><span class="addition">+ export &#123; getStaticPaths, getStaticProps &#125;</span></span><br><span class="line"></span><br><span class="line">const Homepage = () =&gt; &#123;</span><br><span class="line">  const &#123; t &#125; = useTranslation(&#x27;common&#x27;)</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line">        &lt;Header heading=&#123;t(&#x27;h1&#x27;)&#125; title=&#123;t(&#x27;title&#x27;)&#125; /&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Link href=&#x27;/second-page&#x27;&gt;&lt;button type=&#x27;button&#x27;&gt;&#123;t(&#x27;to-second-page&#x27;)&#125;&lt;/button&gt;&lt;/Link&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Homepage</span><br></pre></td></tr></table></figure><p><strong>5. Install <a href="https://github.com/i18next/next-language-detector">next-language-detector</a>.</strong></p><p>  <code>npm i next-language-detector</code></p><p><strong>6. Create a <code>languageDetector.js</code> file and place it for example in the <code>lib</code> directory.</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> languageDetector <span class="keyword">from</span> <span class="string">&#x27;next-language-detector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextConfig <span class="keyword">from</span> <span class="string">&#x27;../next-i18next.config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> languageDetector(&#123;</span><br><span class="line">  <span class="attr">supportedLngs</span>: i18nextConfig.i18n.locales,</span><br><span class="line">  <span class="attr">fallbackLng</span>: i18nextConfig.i18n.defaultLocale</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>7. Create a <code>redirect.js</code> file and place it for example in the <code>lib</code> directory.</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> languageDetector <span class="keyword">from</span> <span class="string">&#x27;./languageDetector&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useRedirect = <span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> router = useRouter()</span><br><span class="line">  to = to || router.asPath</span><br><span class="line"></span><br><span class="line">  <span class="comment">// language detection</span></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> detectedLng = languageDetector.detect()</span><br><span class="line">    <span class="keyword">if</span> (to.startsWith(<span class="string">&#x27;/&#x27;</span> + detectedLng) &amp;&amp; router.route === <span class="string">&#x27;/404&#x27;</span>) &#123; <span class="comment">// prevent endless loop</span></span><br><span class="line">      router.replace(<span class="string">&#x27;/&#x27;</span> + detectedLng + router.route)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    languageDetector.cache(detectedLng)</span><br><span class="line">    router.replace(<span class="string">&#x27;/&#x27;</span> + detectedLng + to)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Redirect = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  useRedirect()</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line react/display-name</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getRedirect = <span class="function">(<span class="params">to</span>) =&gt;</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  useRedirect(to)</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span><span class="tag">&lt;/&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8. For each of your pages files in your <code>[locale]</code> directory, but especially for the <code>index.js</code> file, create a file with the same name with this content:</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Redirect &#125; <span class="keyword">from</span> <span class="string">&#x27;../lib/redirect&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Redirect</span><br></pre></td></tr></table></figure><p><strong>9. Create a <code>Link.js</code> component and place it for example in the <code>components</code> directory.</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LinkComponent = <span class="function">(<span class="params">&#123; children, skipLocaleHandling, ...rest &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> router = useRouter()</span><br><span class="line">  <span class="keyword">const</span> locale = rest.locale || router.query.locale || <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> href = rest.href || router.asPath</span><br><span class="line">  <span class="keyword">if</span> (href.indexOf(<span class="string">&#x27;http&#x27;</span>) === <span class="number">0</span>) skipLocaleHandling = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (locale &amp;&amp; !skipLocaleHandling) &#123;</span><br><span class="line">    href = href</span><br><span class="line">      ? <span class="string">`/<span class="subst">$&#123;locale&#125;</span><span class="subst">$&#123;href&#125;</span>`</span></span><br><span class="line">      : router.pathname.replace(<span class="string">&#x27;[locale]&#x27;</span>, locale)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">href</span>=<span class="string">&#123;href&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> &#123;<span class="attr">...rest</span>&#125;&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> LinkComponent</span><br></pre></td></tr></table></figure><p><strong>10. Replace al <code>next/link</code> <code>Link</code> imports with the appropriate <code>../components/Link</code> <code>Link</code> import:</strong></p>  <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- import Link from &#x27;next/link&#x27;</span></span><br><span class="line"><span class="addition">+ import Link from &#x27;../../components/Link&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>11. Add or modify your <code>_document.js</code> file to set the correct html <code>lang</code> attribute:</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Document, &#123; Html, Head, Main, NextScript &#125; <span class="keyword">from</span> <span class="string">&#x27;next/document&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextConfig <span class="keyword">from</span> <span class="string">&#x27;../next-i18next.config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDocument</span> <span class="keyword">extends</span> <span class="title">Document</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> currentLocale = <span class="built_in">this</span>.props.__NEXT_DATA__.query.locale || i18nextConfig.i18n.defaultLocale</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Html</span> <span class="attr">lang</span>=<span class="string">&#123;currentLocale&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Head</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Main</span> /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">NextScript</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Html</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyDocument</span><br></pre></td></tr></table></figure><p><strong>12. In case you have a language switcher, create or adapt it:</strong></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/LanguageSwitchLink.js</span></span><br><span class="line"><span class="keyword">import</span> languageDetector <span class="keyword">from</span> <span class="string">&#x27;../lib/languageDetector&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">&#x27;next/link&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LanguageSwitchLink = <span class="function">(<span class="params">&#123; locale, ...rest &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> router = useRouter()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> href = rest.href || router.asPath</span><br><span class="line">  <span class="keyword">let</span> pName = router.pathname</span><br><span class="line">  <span class="built_in">Object</span>.keys(router.query).forEach(<span class="function">(<span class="params">k</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (k === <span class="string">&#x27;locale&#x27;</span>) &#123;</span><br><span class="line">      pName = pName.replace(<span class="string">`[<span class="subst">$&#123;k&#125;</span>]`</span>, locale)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    pName = pName.replace(<span class="string">`[<span class="subst">$&#123;k&#125;</span>]`</span>, router.query[k])</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (locale) &#123;</span><br><span class="line">    href = rest.href ? <span class="string">`/<span class="subst">$&#123;locale&#125;</span><span class="subst">$&#123;rest.href&#125;</span>`</span> : pName</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Link</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">href</span>=<span class="string">&#123;href&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> languageDetector.cache(locale)&#125;</span></span><br><span class="line"><span class="xml">    &gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontSize:</span> &#x27;<span class="attr">small</span>&#x27; &#125;&#125;&gt;</span>&#123;locale&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> LanguageSwitchLink</span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/Footer.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;next-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;next/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LanguageSwitchLink <span class="keyword">from</span> <span class="string">&#x27;./LanguageSwitchLink&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextConfig <span class="keyword">from</span> <span class="string">&#x27;../next-i18next.config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Footer = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> router = useRouter()</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = useTranslation(<span class="string">&#x27;footer&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> currentLocale = router.query.locale || i18nextConfig.i18n.defaultLocale</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">lineHeight:</span> &#x27;<span class="attr">4.65em</span>&#x27;, <span class="attr">fontSize:</span> &#x27;<span class="attr">small</span>&#x27; &#125;&#125;&gt;</span>&#123;t(&#x27;change-locale&#x27;)&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;i18nextConfig.i18n.locales.map((locale) =&gt; &#123;</span></span><br><span class="line"><span class="xml">          if (locale === currentLocale) return null</span></span><br><span class="line"><span class="xml">          return (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">LanguageSwitchLink</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">locale</span>=<span class="string">&#123;locale&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">              <span class="attr">key</span>=<span class="string">&#123;locale&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            /&gt;</span></span></span><br><span class="line"><span class="xml">          )</span></span><br><span class="line"><span class="xml">        &#125;)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-outcome"><a href="#The-outcome" class="headerlink" title="The outcome "></a>The outcome <a name="outcome"></a></h2><p><img src="result.jpg"></p><p>If you now start your project (<code>next dev</code>) you should see, more or less, the same behaviour as before.</p><p>So what&#39;s the benefit?</p><p>Try: <code>next build &amp;&amp; next export</code></p><p>You should see something like this at the end:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">●  (SSG)     automatically generated as static HTML + JSON (uses getStaticProps)</span><br><span class="line"></span><br><span class="line">info  - using build directory: /Users/usr/projects/my-awesome-project/.next</span><br><span class="line">info  - Copying <span class="string">&quot;static build&quot;</span> directory</span><br><span class="line">info  - No <span class="string">&quot;exportPathMap&quot;</span> found <span class="keyword">in</span> <span class="string">&quot;/Users/usr/projects/my-awesome-project/next.config.js&quot;</span>. Generating map from <span class="string">&quot;./pages&quot;</span></span><br><span class="line">info  - Launching 9 workers</span><br><span class="line">info  - Copying <span class="string">&quot;public&quot;</span> directory</span><br><span class="line">info  - Exporting (3/3)</span><br><span class="line">Export successful. Files written to /Users/usr/projects/my-awesome-project/out</span><br></pre></td></tr></table></figure><p><strong>Yeah no <code>i18n support is not compatible with next export</code> error anymore!!!</strong></p><p><strong>Congratulations! Now you can &quot;deploy&quot; the content of your <code>out</code> directory to any static web server.</strong></p><p><em>🧑‍💻 The complete code can be found <a href="https://github.com/i18next/next-language-detector/tree/main/examples/basic">here</a>.</em></p><h2 id="The-voluntary-part"><a href="#The-voluntary-part" class="headerlink" title="The voluntary part "></a>The voluntary part <a name="voluntary"></a></h2><p><img src="transform_your_localization_process_small.jpg" alt="transform the localization process" title="locize © inweso GmbH"></p><p>Connect to an awesome translation management system and manage your translations outside of your code.</p><p>Let&#39;s synchronize the translation files with <a href="https://locize.com/">locize</a>.This can be done on-demand or on the CI-Server or before deploying the app.</p><h3 id="What-to-do-to-reach-this-step"><a href="#What-to-do-to-reach-this-step" class="headerlink" title="What to do to reach this step:"></a>What to do to reach this step:</h3><ol><li>in locize: signup at <a href="https://locize.app/register">https://locize.app/register</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a></li><li>in locize: <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a></li><li>in locize: add all your additional languages (this can also be done via <a href="https://docs.locize.com/integration/api#add-new-language">API</a>)</li><li>install the <a href="https://github.com/locize/locize-cli">locize-cli</a> (<code>npm i locize-cli</code>)</li></ol><h3 id="Use-the-locize-cli"><a href="#Use-the-locize-cli" class="headerlink" title="Use the locize-cli"></a>Use the <a href="https://github.com/locize/locize-cli">locize-cli</a></h3><p>Use the <code>locize sync</code> command to synchronize your local repository (<code>public/locales</code>) with what is published on locize.</p><p>Alternatively, you can also use the <code>locize download</code> command to always download the published locize translations to your local repository (<code>public/locales</code>) before bundling your app.</p><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>I hope you’ve learned a few new things about static site generation (SSG), <a href="https://nextjs.org/">Next.js</a>, <a href="https://github.com/i18next/next-i18next">next-i18next</a>, <a href="https://www.i18next.com/">i18next</a> and <a href="https://locize.com/">modern localization workflows</a>.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth trying the <a href="https://locize.com/">localization management platform - locize</a>.</p><p>The founders of <a href="https://locize.com/">locize</a> are also the creators of <a href="https://www.i18next.com/">i18next</a>. So by using <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.</p><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2><hr><h2 id="Looking-for-an-optimized-Next-js-translations-setup"><a href="#Looking-for-an-optimized-Next-js-translations-setup" class="headerlink" title="Looking for an optimized Next.js translations setup?"></a>Looking for an optimized Next.js translations setup?</h2><p><a href="../next-i18next/"><img src="../next-i18next/next-i18next.jpg" alt="next-i18next"></a><a href="../next-i18next/">Here</a> you&#39;ll find a blog post on how to best use next-i18next with client side translation download and SEO optimization.</p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> react </tag>
            
            <tag> react-i18next </tag>
            
            <tag> next </tag>
            
            <tag> next-i18next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is video game localization</title>
      <link href="/blog/what-is-video-game-localization/"/>
      <url>/blog/what-is-video-game-localization/</url>
      
        <content type="html"><![CDATA[<p><img src="what-is-video-game-localization.webp" alt="what is localization in video games" title="what is localization in video games"></p><p>Video games are one of the biggest recreational pastimes in the world, with recent estimates suggesting that there are currently nearly <a href="https://financesonline.com/number-of-gamers-worldwide/" title="2.7 billion gamers">2.7 billion gamers</a> across the globe. The incredible demand in recent years has seen growth skyrocket, and estimates suggest that by 2025 the industry will be worth an astounding <a href="https://www.wepc.com/news/video-game-statistics/" title="$268 billion">$268 billion</a>, up from the $159.3 billion in 2020. </p><p>While there can be no denying the popularity of the video game market, effective localization is essential for every video game producer. What is localization in video games, though? How does it work?</p><p>To help you, we thought we would take a closer look at what video game localization is and how it benefits not only game producers but players, too. </p><p><img src="gamers.webp" alt="gamers" title="gamers"></p><h2 id="What-is-localization-in-video-games"><a href="#What-is-localization-in-video-games" class="headerlink" title="What is localization in video games?"></a>What is localization in video games?</h2><p>While the very first video games such as tennis or Tetris might have been simple storylines, modern video games are a truly holistic experience more akin to a feature movie. Games such as Red Dead Redemption, Grand Theft Auto, and Call of Duty are truly an in-depth story that takes gaming to completely new levels. </p><p>Increasingly becoming more like a Hollywood blockbuster, modern games are highly sophisticated pieces of software. However, the cinematic gameplay, complex dialogue, and real-time interaction mean the game needs to be able to work across multiple markets, languages, and countries. </p><p>This is where video game localization is vital, helping to ensure that players around the world are able to enjoy the same experience. Localization makes it feel like the game was made for every region it has been launched in, improving the overall player experience. </p><h2 id="What-is-localization-in-video-games-1"><a href="#What-is-localization-in-video-games-1" class="headerlink" title="What is localization in video games?"></a>What is localization in video games?</h2><p>While it might seem like a simple enough concept, the actual process of localization is incredibly complex. When it comes to answering the question, “what is localization in video games?” there are many different factors that need to combine to ensure a seamless playing experience for every gamer. </p><p>The three most important areas for video game localization are:</p><h3 id="1-The-in-game-story"><a href="#1-The-in-game-story" class="headerlink" title="1)    The in-game story"></a>1)    The in-game story</h3><p>Video games are becoming a far more complex story that has many interwoven narratives that combine as players work their way through. This helps to keep them engaged, but in order for every gamer to have the same experience, the script and story need to be localized to specific regions. </p><p>This means that everything from character names, weapons, and locations should be adapted for the target audience. For example, if the game was set in Russia, then it would not make sense to have a local bar with an English name. Game developers should be working to ensure the script and gameplay are as realistic as possible; otherwise, they risk discouraging players from continuing with the game. </p><p>Equally, it is important to remember that names change around the world. For example, while Kim might be a feminine name in America, it is a popular male name in places such as Norway. This might seem like a minor difference against the overall gameplay, but these little nuances are essential in ensuring that the game is able to capture the attention of players. </p><h3 id="2-Technical-elements"><a href="#2-Technical-elements" class="headerlink" title="2)    Technical elements"></a>2)    Technical elements</h3><p>Of course, while the overall gameplay experience is essential, game developers also need to ensure that they are focusing on localizing the many various technical aspects of the game too. One of the biggest areas most commonly overlooked is how dates and times are written, or the units of measurements are displayed. </p><p>These are critical components in creating a truly immersive experience for every player. It is also important to consider the space for text and the symbols being used. For example, in Europe, many languages use quite short words apart from German, which traditionally has quite lengthy words. This is something that will need to be considered when adding in subtitles or written wording. </p><h3 id="3-Marketing-campaigns"><a href="#3-Marketing-campaigns" class="headerlink" title="3)    Marketing campaigns"></a>3)    Marketing campaigns</h3><p>When it comes to understanding “what is localization in video games?” it is important to remember that it is not just limited to the actual game itself. In the highly competitive world of modern gaming, marketing campaigns are one of the most important steps to success and begin months, if not years, in advance of the launch. </p><p><img src="marketing.webp" alt="marketing campaign" title="marketing campaign"></p><p>However, to truly maximize the commercial appeal of the game, developers need to ensure that they are localizing their marketing campaign. Without doing so, they risk alienating certain audiences and losing a vital opportunity to maximize pre-launch interest in the game. </p><p>Localizing your marketing content requires a comprehensive review of all materials. From the images and graphics being used to the language and wording, you want to ensure you are targeting the gaming habits of those players in each region you are launching in. This is also important in other areas of localization like webapps, for this check out this guide on <a href="../react-i18next/" title="react localization">react localization</a>.</p><h2 id="Why-is-video-game-localization-important"><a href="#Why-is-video-game-localization-important" class="headerlink" title="Why is video game localization important"></a>Why is video game localization important</h2><p>When it comes to understanding “What is localization in video games?” it is important to understand the many benefits that it can provide. </p><h3 id="1-Boost-sales"><a href="#1-Boost-sales" class="headerlink" title="1)    Boost sales"></a>1)    Boost sales</h3><p>Focusing on localization and culturalization ensures that gamers are more invested in your game and company. This helps you to launch the game in more regions, significantly boosting the number of players and maximizing your sales. </p><p>While video game localization does require time and resource investment, it is a worthwhile process as it ensures you can reach a far greater audience. </p><h3 id="2-Increase-customer-satisfaction"><a href="#2-Increase-customer-satisfaction" class="headerlink" title="2)    Increase customer satisfaction"></a>2)    Increase customer satisfaction</h3><p>Localization is also a great way to boost customer satisfaction by making them feel important. When they can see that the developer has gone the extra mile to create a seamless experience that feels like it has been specifically developed for them, they become far more invested in the game. </p><p>The higher the satisfaction of your players, the more likely they are to share their experience with friends and remain customers for any future games you might release. </p><h3 id="3-Stay-competitive"><a href="#3-Stay-competitive" class="headerlink" title="3)    Stay competitive"></a>3)    Stay competitive</h3><p>As the market continues to grow, it is becoming increasingly more challenging for game developers to stand out from the crowd. This means localization is going to become increasingly more important to remain competitive.</p><p>This strategic approach will allow you to branch out into more markets, helping you to become more resilient in the process. </p><h2 id="Localizing-your-video-game"><a href="#Localizing-your-video-game" class="headerlink" title="Localizing your video game"></a>Localizing your video game</h2><p>What is localization in video games? Well, as the market continues to grow, it is set to become an essential aspect of any game development. While it might not be the first thing that developers think of, focusing on localizing the game from the start can help to make the process far more efficient and effective. </p><p>Localization can be a complex process, though, so working with a professional partner can help to ensure that you are able to create the most immersive and engaging experience possible. To make the process more streamlined, you should take the time to plan your project, create a localization kit, and creating quality assurance checks will ensure that your various localization partners know exactly what is required. </p><p>The more detailed your localization is, the greater the experience that each player has and the more gamers that will want to engage with your game. With some 2.7 billion players in the world, open your game up to a wider audience today.  </p><h2 id="Try-Locize-to-make-your-game-incredible"><a href="#Try-Locize-to-make-your-game-incredible" class="headerlink" title="Try Locize to make your game incredible"></a>Try Locize to make your game incredible</h2><p>The <a href="/" title="localization-software">localization-software</a> of locize helps game companies to easily translate their software-components through an easy interface and while split the development process from the marketing-work. Game localization should keep up with the development of the game. Continuous localization allows you to join several markets practically simultaneously, resulting in shorter translation turnaround times and much-needed velocity.</p><p><img src="game-localization-logo.jpg" alt="game-localization-logo" title="game-localization-logo"></p>]]></content>
      
      
      
        <tags>
            
            <tag> i18n </tag>
            
            <tag> translation </tag>
            
            <tag> video game </tag>
            
            <tag> example </tag>
            
            <tag> problems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Globalization vs. Localization - What is the difference</title>
      <link href="/blog/globalization-vs-localization/"/>
      <url>/blog/globalization-vs-localization/</url>
      
        <content type="html"><![CDATA[<p><img src="globalization-vs-localization.webp" alt="globalization vs localization" title="globalization vs localization"></p><p>Do you know what is meant by globalization versus localization? From the outside, these two terms could appear like complete opposites of each other. However, that is not quite the case, and they actually go hand-in-hand, which is often where the confusion arises. </p><p>To help you understand the differences between globalization versus localization, we were thinking we could take a closer look at what they mean and why they are important.</p><h2 id="What-is-globalization"><a href="#What-is-globalization" class="headerlink" title="What is globalization?"></a>What is globalization?</h2><p>Before looking at the differences between the two, it is essential to understand what each term means. Globalization is often the process that needs to happen before content can be localized, although the process does not stop once localization begins. </p><p>Globalization is the process of adapting resources to ensure that they are able to meet the demands of various cultures. This ensures that the content is able to be easily accessed and used worldwide, and this can be done through multiple methods:</p><h3 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h3><p>One of the core aspects of globalization is ensuring that the language is suitable to meet multiple markets. While this is also an important aspect of localization, it requires a different approach. Globalization requires translating existing content to ensure that it can be read and accessed to multiple audiences in new localities.</p><h3 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h3><p>Alongside ensuring the language is suitable for multiple viewers, globalization also examines the content being used. This requires thinking about every aspect of the design and style, ensuring that it is as appealing as possible to your target audience, no matter where they are based. </p><p>This can be a challenge; for example, while users read from left to right in the West, in East Asia and the Middle East, they tend to read from right to left. This often requires unique coding that allows websites to be more flexible to allow content to be adapted and ensuring the pages can support time, date, and number formats most commonly used in the reader’s location. </p><p>Globalization is all about thinking of the bigger picture and how customers around the world will be able to interact and engage with your content. </p><p>Also watch this interesting video from financial times <a href="https://www.youtube.com/watch?v=T9lgZper-W4" title="Video: Globalisation to Localisation">Video: Globalisation to Localisation</a></p><h2 id="What-is-localization"><a href="#What-is-localization" class="headerlink" title="What is localization?"></a>What is localization?</h2><p>When it comes to understanding globalization versus localization, knowing the differences between the two is crucial. While globalization is the process of ensuring the content can meet multiple markets, localization is the process of guaranteeing your resources are focused on the requirements of one specific audience. </p><p>Effective localization requires multiple factors, including:</p><h3 id="Translations"><a href="#Translations" class="headerlink" title="Translations"></a>Translations</h3><p>Just like globalization, one of the most important factors of localization is the language and translations you are using. For example, do you know the difference between localisation and localization? The former is how people in the United Kingdom would spell it, while the latter is how people across the Atlantic would. </p><p>While this might seem like a minor difference, it is these small nuances that can transform a customer’s perception of your brand. Of course, when it comes to translation, sometimes a literal interpretation might not always make sense. That is why you need to ensure that when converting content into a new language, you make sure the meaning remains the same. </p><h3 id="Utilize-the-right-formats"><a href="#Utilize-the-right-formats" class="headerlink" title="Utilize the right formats"></a>Utilize the right formats</h3><p>Another important aspect of localization is ensuring that you are using the right format for things such as:</p><ul><li>   Date and time</li><li>   Measurements</li><li>   Currency</li><li>   Telephone number formats</li><li>   Keyboard formats</li><li>   Punctuations and symbols</li></ul><h3 id="Consider-the-design"><a href="#Consider-the-design" class="headerlink" title="Consider the design"></a>Consider the design</h3><p>The design and style are also a very important part of the localization process. This requires ensuring that the visuals match with the requirements of your target audience. This includes everything from the photography and layout of the site to the colors and tone of the writing. </p><p>More detailled information wanted, read this article about <a href="/blog/localization/" title="what is localization">what is localization</a>.</p><h2 id="Globalization-versus-localization-what-comes-first"><a href="#Globalization-versus-localization-what-comes-first" class="headerlink" title="Globalization versus localization, what comes first?"></a>Globalization versus localization, what comes first?</h2><p>When it comes to understanding what is meant by globalization versus localization, you should now have a clearer idea of what both terms mean. However, which one should you focus on first? While both options can help you to create a more inclusive and engaging piece of content, no matter whether it is a website, manual, or marketing material. </p><p>Deciding which stage to focus on first will depend on who your target audience is. If you are solely looking to focus on one specific region, then opting just for localization can be the better option. However, typically, globalization is the first process to undertake as this will give you a clear and strong base to work from when you begin the localization process.  </p><p>When it comes to looking at the differences between the two, there are three key factors to remember:</p><p>1 - <b>Localization is the process of focusing on a specific culture, location, or audience</b>. Globalization is the process of looking at multiple cultures, locations, or audiences. </p><p>2 - <b>Localization is a part of the wider globalization process</b>, whereas globalization forms part of your overall business strategy. </p><p>3 - <b>Globalization is often part of a larger long-term business <a href="https://en.wikipedia.org/wiki/Global_strategy" title="strategy">strategy</a></b>, while localization is often used for more short-term actions.</p><h2 id="The-pros-and-cons-of-globalization-versus-localization"><a href="#The-pros-and-cons-of-globalization-versus-localization" class="headerlink" title="The pros and cons of globalization versus localization"></a>The pros and cons of globalization versus localization</h2><p>Both the globalization or <a href="/blog/localization-strategy" title="localization strategy">localization strategy</a> can be a complex process, but they are an essential part of any customer service strategy for your business. Both options are able to provide companies with a wide range of benefits, but they do also have some drawbacks. </p><h3 id="Pros-and-cons-of-globalization"><a href="#Pros-and-cons-of-globalization" class="headerlink" title="Pros and cons of globalization"></a>Pros and cons of globalization</h3><p>Globalization is able to provide businesses with a wide range of benefits, helping them to reach a far greater audience. Not only can this help to increase revenue by expanding your customer base, but it is also able to significantly enhance your overall brand reputation and global image. This, in turn, can help to decrease dependence on a single market, ensuring your business is more resilient in the face of economic challenges.</p><p>However, globalization can be a very time-consuming process and does require additional resources alongside the many challenges of a <a href="/blog/market-expansion/" title="market expansion">market expansion</a>.</p><h3 id="Pros-and-cons-of-localization"><a href="#Pros-and-cons-of-localization" class="headerlink" title="Pros and cons of localization"></a>Pros and cons of localization</h3><p>If you are looking to enter specific new markets, then localization is essential in helping to facilitate this. It can help to create significant brand loyalty from customers, improving their overall experience with your company. By building loyal customers, you will be able to increase revenue and secure a more competitive advantage in that market.</p><p>Of course, just like globalization, localization does require significant investment in terms of time and resources. If not done correctly, it can also have a negative impact on your brand image, so it is always recommended you work with a professional partner who can help you.</p><h2 id="So-which-is-right-for-you"><a href="#So-which-is-right-for-you" class="headerlink" title="So which is right for you?"></a>So which is right for you?</h2><p>When it comes to globalization versus localization, both strategies can help you to transform your business. While they might sound like two completely different methods, globalization and localization can work in tandem to help you successfully branch out into new markets and increase your revenue.</p><p>Knowing which option will be right for you will depend on the overall strategy and the audience you are looking to reach. Whichever you choose, partnering with a professional translation and localization team from a <a href="/" title="translation management platform">translation management platform</a>  will help ensure that it is completed to the highest standards alongside reducing the time and resource investment that you need to make.</p><h2 id="Further-to-read-examples"><a href="#Further-to-read-examples" class="headerlink" title="Further to read (examples)"></a>Further to read (examples)</h2><p>If you want to read about real-world i18n localization examples from our client cases, check out our recent blog post on  <a href="../website-localization/" title="website localization">website localization</a>.</p><p>Read more about how software is affected from globalization and localization and what potential localization of software has in the <a href="../what-is-software-localization/" title="what is software localization">&quot;what is software localization&quot;</a> blog post.</p>]]></content>
      
      
      
        <tags>
            
            <tag> localization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> globalization </tag>
            
            <tag> g11n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>These are the website internationalization best practices</title>
      <link href="/blog/website-internationalization-best-practices/"/>
      <url>/blog/website-internationalization-best-practices/</url>
      
        <content type="html"><![CDATA[<p><img src="website-internationalization-best-practices.webp" alt="website internationalization best practices" title="website internationalization best practices"></p><p>When it comes to internationalizing your website, this article should assist you in determining your best practices. </p><p>This could be as a result of a strategic shift or if you want to start an international company or project this is for you. The process when your web app becomes international should not be a difficult task. </p><p>Another article about <a href="/blog/website-localization/" title="website localization">website localization</a> shows you the process of planning, and if you read further in this article we try to help you to avoid any mistake. If you&#39;re not sure what internatationalization is, check out our guide <a href="/blog/what-is-i18n/" title="what is i18n">what is i18n</a>. Make <strong>website internationalization</strong> easy with these couple of <strong>best practices</strong>:</p><h2 id="Best-practices-summary"><a href="#Best-practices-summary" class="headerlink" title="Best practices summary"></a>Best practices summary</h2><ol><li><a href="#little-text">Use as little text as possible in your pictures</a></li><li><a href="#separate">Separate code from translating</a></li><li><a href="#plural">Consider different ways of pluralizing words</a></li><li><a href="#layout">Check to see if the layout can support longer or shorter text</a></li><li><a href="#find">Make it easy to find strings</a></li><li><a href="#encoding">Set character encoding to UTF-8</a></li><li><a href="#colors">Consider the also the colors</a></li><li><a href="#service">Choose the right localization translation service</a></li></ol><h2 id="Best-practices-in-detail"><a href="#Best-practices-in-detail" class="headerlink" title="Best practices in detail"></a>Best practices in detail</h2><h3 id="1-Use-as-little-text-as-possible-in-your-pictures"><a href="#1-Use-as-little-text-as-possible-in-your-pictures" class="headerlink" title="1. Use as little text as possible in your pictures "></a>1. Use as little text as possible in your pictures <a name="little-text"></a></h3><p>Because you will end up uploading several images for the same piece or web content, as it has to be translated during the localization process. If you don&#39;t have any text in your image, there&#39;s no need to modify anything when it comes to localizing your website. Another possibility is to separate the text from the image. You may create a layer that will be placed on top of the image. Alternatively, make picture files easily accessible.Sometimes even if there is no legible text you may want to adapt the art asset (i.e. an image) because of cultural reasons. There are some libraries that can help with this issue i.e. <a href="https://github.com/i18next/i18nextify#fragment-replacement-for-links-and-images">Fragment replacement for links and images</a>.</p><h3 id="2-Separate-code-from-translating"><a href="#2-Separate-code-from-translating" class="headerlink" title="2. Separate code from translating "></a>2. Separate code from translating <a name="separate"></a></h3><p>It seems logical to keep the code separate from the translation process. During the project, the developer may work freely without being interrupted by any colleagues. This way, you won&#39;t lose sight of the project and guarantee that no mistakes occur. This way you gather new content automatically and smoothly, posting it for translation, getting translations, and integrating them back into the product.A good localization management solution can really help here. All team members can collaboratively work in parallel. In this way, you can get to your objective in a faster way.When using locize as a <a href="https://locize.com/" title="localization management platform">localization management platform</a>, this feature will be offered.</p><h3 id="3-Consider-different-ways-of-pluralizing-words"><a href="#3-Consider-different-ways-of-pluralizing-words" class="headerlink" title="3. Consider different ways of pluralizing words "></a>3. Consider different ways of pluralizing words <a name="plural"></a></h3><p>Various languages have different grammatical rules for dealing with plural nouns and units. Ensure to offer a separate translation for each plural form in the language when localizing formatted strings that include variable quantities. In Polish, for example, imagine you have a singular and then a plural depending on whether the number of objects ends with 2, 3, 4, or any other digit. And each collection of things more than 20 requires a separate plural in Romanian. Locize recognizes and accurately estimates your progress in the various languages by taking into account the various pluralization laws.</p><p><img src="locize_plurals.webp" alt="plurals" title="plurals"></p><h3 id="4-Check-to-see-if-the-layout-can-support-longer-or-shorter-text"><a href="#4-Check-to-see-if-the-layout-can-support-longer-or-shorter-text" class="headerlink" title="4. Check to see if the layout can support longer or shorter text "></a>4. Check to see if the layout can support longer or shorter text <a name="layout"></a></h3><p>The fact is that translations can take longer than the original text and will break the layout. So check in advance that your translation approach can support different sizes of translations. Particularly in Europe, where various languages might have many more terms for the same statement. In this <a href="https://www.inter-contact.de/en/blog/text-length-languages?dt=1629440931092" title="blog post">blog post</a>, you will find a comparison of European languages with a table showing a very nice overview &quot;how the languages are different&quot;. You may use the <a href="https://docs.locize.com/whats-inside/review-workflow" title="locize review workflow">locize review workflow</a> to guarantee that changes to translations are accepted before they are published. Until one of the translation proposals is approved, the real value will remain unchanged.</p><h3 id="5-Make-it-easy-to-find-strings"><a href="#5-Make-it-easy-to-find-strings" class="headerlink" title="5. Make it easy to find strings "></a>5. Make it easy to find strings <a name="find"></a></h3><p>Strings should definitly not be directly in the code. Make it simple for developers to externalize their strings and include them in resource files from the beginning. This implies that any hard-coded string will appear in their original language, regardless of the user&#39;s language. You will never face such problems again if you use a translation management software such as locize. With the integrated search feature, translators may discover any string in seconds.</p><h3 id="6-Set-character-encoding-to-UTF-8"><a href="#6-Set-character-encoding-to-UTF-8" class="headerlink" title="6. Set character encoding to UTF-8 "></a>6. Set character encoding to UTF-8 <a name="encoding"></a></h3><p>Select an encoding that is compatible with all target languages. If you are unsure, simply select UTF-8. If you&#39;re wondering <a href="../is-your-software-ready-for-localization/#encoding">why UTF-8 is the greatest encoding</a>, read on this <a href="https://www.w3.org/International/questions/qa-choosing-encodings.en" title="FAQ about UTF-8">FAQ about UTF-8</a>. To distinguish assets meant for a certain region, utilize ISO 693-1 &amp; 3166-1 language and country codes to mark assets by locale.</p><h3 id="7-Consider-the-also-the-colors"><a href="#7-Consider-the-also-the-colors" class="headerlink" title="7. Consider the also the colors "></a>7. Consider the also the colors <a name="colors"></a></h3><p>In terms of user experience, the culture of your target consumer may make a significant difference. When creating your web design, consider which markets you want to target. You want to leave a favorable impression on your target clients, not something that will remind them of a terrible incident, political issue, or something similar. As a result, make it simple for your website to swap colors based on target country or region.</p><h3 id="8-Choose-the-right-localization-translation-service"><a href="#8-Choose-the-right-localization-translation-service" class="headerlink" title="8. Choose the right localization translation service "></a>8. Choose the right localization translation service <a name="service"></a></h3><p>When choosing a <a href="https://locize.com/services.html" title="localization translation service">localization translation service</a>, there are two major topics: one that focuses on professional and long-term software localization, and the other that focuses on a rapid and transparent translation work.</p><h5 id="Topic-1-Use-locize-as-localization-platform"><a href="#Topic-1-Use-locize-as-localization-platform" class="headerlink" title="Topic 1: Use locize as localization platform"></a>Topic 1: Use locize as <a href="https://locize.com" title="localization platform">localization platform</a></h5><p>There are numerous ways to use locize for your localization-translation-service, such as managing all of your translations during a specific project such as a website, app, or video game. Planing and managing your localization project cuntinuously translating, while your project&#39;s development team adds new features. Allow <a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators">in-house translators to manage translation</a> without interfering with the development process. You may request a translation from a <a href="/services.html#translationservices">third party</a> using the locize interface. Overall, locize is a very versatile solution for your company&#39;s or software&#39;s localization needs.</p><h5 id="Topic-2-Use-a-translation-service-provider"><a href="#Topic-2-Use-a-translation-service-provider" class="headerlink" title="Topic 2: Use a translation service provider"></a>Topic 2: Use a <a href="/services.html#translationservices" title="translation marketplace">translation service provider</a></h5><p>Beside having the possibility to directly use a translation service provider from withing locize, you can use it also for sophisticated papers, product brochures, as well as for financial, legal, and technological topics.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>If you follow the best practices, you may create a seamless procedure and save money in the long run. In general, it is advisable to get assistance from an adviser who has extensive experience. Please do not hesitate to <a href="mailto:support@locize.com">contact us</a> if you have any questions. We&#39;re offering a free 14-day trial, so you may have a nice opportunity to try all features anyhow. <a href="https://www.locize.app/register" title="Register today">Register today</a> for a free trial period and begin your finest experience. </p><h3 id="You-are-a-developer"><a href="#You-are-a-developer" class="headerlink" title="You are a developer"></a>You are a developer</h3><p>So <a href="https://docs.locize.com/integration/instrumenting-your-code">here</a> you can find more information about how to integrate locize, like for <a href="https://locize.com/javascript-localization.html" title="javascript localization">javascript localization</a>. There are also some dedicated articles about <a href="../react-i18next/" title="react localization">react localization</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> website internationalization </tag>
            
            <tag> best practices </tag>
            
            <tag> web app translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How does server side internationalization (i18n) look like?</title>
      <link href="/blog/how-does-server-side-internationalization-look-like/"/>
      <url>/blog/how-does-server-side-internationalization-look-like/</url>
      
        <content type="html"><![CDATA[<p><img src="server_side_backend.jpg" alt="server side internationalization next" title="Server Side Internationalization"></p><p>You may already know how to properly internationalize a client side application, like described in this <a href="../react-i18next/">React based tutorial</a>, this <a href="../angular-i18next/">Angular based tutorial</a> or this <a href="../give-vue-i18n-more-superpowers/">Vue based tutorial</a>.</p><p>In this blog post we will shed light on the server side.</p><blockquote><p>Why do I need to handle i18n in my application&#39;s backend?</p></blockquote><p>Think of all user faced content not directly rendered in your browser...</p><ul><li>For example you&#39;re building a <a href="#cli">command line interface (CLI)</a>?</li><li>You&#39;re <a href="#email">sending some emails</a>?</li><li>Or you&#39;re using <a href="#ssr">server side rendering (SSR)</a>?</li><li>etc.</li></ul><h2 id="Let-39-s-check-that-out"><a href="#Let-39-s-check-that-out" class="headerlink" title="Let&#39;s check that out..."></a>Let&#39;s check that out...</h2><p>We will show some examples that uses <a href="https://www.i18next.com/">i18next</a> as i18n framework. If you&#39;re curious to know why we suggest i18next, have a look at <a href="https://locize.com/i18next.html">this page</a>.</p><h2 id="Command-line-interface-CLI"><a href="#Command-line-interface-CLI" class="headerlink" title="Command line interface (CLI) "></a>Command line interface (CLI) <a name="cli"></a></h2><p>Let&#39;s start with something simple: a verry small CLI app. For this example let&#39;s use <a href="https://github.com/tj/commander.js">commander</a>, originally created by <a href="https://twitter.com/tjholowaychuk">TJ Holowaychuk</a>.We are defining a <code>sayhi</code> command with optional language and name parameters that should respond with a salutation in the appropriate language.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">&#x27;sayhi&#x27;</span>)</span><br><span class="line">  .alias(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">  .option(<span class="string">&#x27;-l, --language &lt;lng&gt;&#x27;</span>, <span class="string">&#x27;by default the system language is used&#x27;</span>)</span><br><span class="line">  .option(<span class="string">&#x27;-n, --name &lt;name&gt;&#x27;</span>, <span class="string">&#x27;your name&#x27;</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// options.language =&gt; optional language</span></span><br><span class="line">    <span class="comment">// options.name =&gt; optional name</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> log the salutation to the console...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">&#x27;--help&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;  Examples:&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;    $ mycli sayhi&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;    $ mycli sayhi --language de&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;    $ mycli sayhi --language de --name John&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">program.parse(process.argv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!process.argv.slice(<span class="number">2</span>).length) &#123;</span><br><span class="line">  program.outputHelp()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, now let&#39;s create a new <code>i18n.js</code> file and setup i18next accordingly:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> i18next = <span class="built_in">require</span>(<span class="string">&#x27;i18next&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// if no language parameter is passed, let&#x27;s try to use the node.js system&#x27;s locale</span></span><br><span class="line"><span class="keyword">const</span> systemLocale = <span class="built_in">Intl</span>.DateTimeFormat().resolvedOptions().locale</span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: <span class="built_in">require</span>(<span class="string">&#x27;./locales/en/translation.json&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">de</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: <span class="built_in">require</span>(<span class="string">&#x27;./locales/de/translation.json&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">lng</span>) =&gt;</span> i18next.getFixedT(lng || systemLocale)</span><br></pre></td></tr></table></figure><p>And also our translation resources:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// locales/en/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;salutation&quot;</span>: <span class="string">&quot;Hello World!&quot;</span>,</span><br><span class="line">  <span class="string">&quot;salutationWithName&quot;</span>: <span class="string">&quot;Hello &#123;&#123;name&#125;&#125;!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// locales/de/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;salutation&quot;</span>: <span class="string">&quot;Hallo Welt!&quot;</span>,</span><br><span class="line">  <span class="string">&quot;salutationWithName&quot;</span>: <span class="string">&quot;Hallo &#123;&#123;name&#125;&#125;!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can use the <code>i18n.js</code> export like that:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> i18n = <span class="built_in">require</span>(<span class="string">&#x27;../i18n.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">&#x27;sayhi&#x27;</span>)</span><br><span class="line">  .alias(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">  .option(<span class="string">&#x27;-l, --language &lt;lng&gt;&#x27;</span>, <span class="string">&#x27;by default the system language is used&#x27;</span>)</span><br><span class="line">  .option(<span class="string">&#x27;-n, --name &lt;name&gt;&#x27;</span>, <span class="string">&#x27;your name&#x27;</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> t = i18n(options.language)</span><br><span class="line">    <span class="keyword">if</span> (options.name) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(t(<span class="string">&#x27;salutationWithName&#x27;</span>, &#123; <span class="attr">name</span>: options.name &#125;))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(t(<span class="string">&#x27;salutation&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .on(<span class="string">&#x27;--help&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;  Examples:&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;    $ mycli sayhi&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;    $ mycli sayhi --language de&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;    $ mycli sayhi --language de --name John&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">program.parse(process.argv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!process.argv.slice(<span class="number">2</span>).length) &#123;</span><br><span class="line">  program.outputHelp()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ok, what&#39;s the result?</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## if we execute the cli command without any parameters...</span></span><br><span class="line">mycli sayhi</span><br><span class="line"><span class="comment">## result: Hello World!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## if we execute the cli command with a language parameter...</span></span><br><span class="line">mycli sayhi --language de</span><br><span class="line"><span class="comment">## result: Hallo Welt!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## if we execute the cli command with a language parameter and a name parameter...</span></span><br><span class="line">mycli sayhi --language de --name John</span><br><span class="line"><span class="comment">## result: Hallo John!</span></span><br></pre></td></tr></table></figure><p><strong>Easy, isn&#39;t it?</strong></p><p>If you don&#39;t bundle your CLI app in a single executable, for example by using <a href="https://github.com/vercel/pkg">pkg</a>, you can also i.e. use the <a href="https://github.com/i18next/i18next-fs-backend">i18next-fs-backend</a> to dynamically load your translations, for example like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> i18next = <span class="built_in">require</span>(<span class="string">&#x27;i18next&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Backend = <span class="built_in">require</span>(<span class="string">&#x27;i18next-fs-backend&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; join &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; readdirSync, lstatSync &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// if no language parameter is passed, let&#x27;s try to use the node.js system&#x27;s locale</span></span><br><span class="line"><span class="keyword">const</span> systemLocale = <span class="built_in">Intl</span>.DateTimeFormat().resolvedOptions().locale</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localesFolder = join(__dirname, <span class="string">&#x27;./locales&#x27;</span>)</span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  .use(Backend)</span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">initImmediate</span>: <span class="literal">false</span>, <span class="comment">// setting initImediate to false, will load the resources synchronously</span></span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">preload</span>: readdirSync(localesFolder).filter(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> joinedPath = join(localesFolder, fileName)</span><br><span class="line">      <span class="keyword">return</span> lstatSync(joinedPath).isDirectory()</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">backend</span>: &#123;</span><br><span class="line">      <span class="attr">loadPath</span>: join(localesFolder, <span class="string">&#x27;&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">lng</span>) =&gt;</span> i18next.getFixedT(lng || systemLocale)</span><br></pre></td></tr></table></figure><p><em>🧑‍💻 A code example can be found <a href="https://github.com/i18next/i18next-cli-app-example">here</a>.</em></p><h3 id="A-possible-next-step"><a href="#A-possible-next-step" class="headerlink" title="A possible next step..."></a>A possible next step...</h3><p>A possible next step could be to professionalize the translation management.This means the translations would be &quot;managed&quot; (add new languages, new translations etc...) in a translation management system (TMS), like <a href="https://www.locize.com/">locize</a> and synchronized with your code. To see how this could look like, check out <a href="https://github.com/locize/react-tutorial#step-1---keep-existing-code-setup-but-synchronize-with-locize"><strong>Step 1</strong> in this tutorial</a>.</p><h2 id="Generate-Emails"><a href="#Generate-Emails" class="headerlink" title="Generate Emails "></a>Generate Emails <a name="email"></a></h2><p>Another typical server side use case that requires internationalization is the generation of emails.</p><p>To achieve this goal, you usually need to transform some raw data to html content (or text) to be shown in the user&#39;s preferred language.</p><p>In this example we will use <a href="https://pugjs.org/">pug</a> (formerly known as &quot;Jade&quot;, and also originally created by <a href="https://twitter.com/tjholowaychuk">TJ Holowaychuk</a>) to define some templates that should be filled with the data needed in the email, and <a href="https://mjml.io/">mjml</a> to actually design the email content.</p><p>Let&#39;s create a new <code>mail.js</code> file, which we can use, to accomplish this.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pug <span class="keyword">from</span> <span class="string">&#x27;pug&#x27;</span></span><br><span class="line"><span class="keyword">import</span> mjml2html <span class="keyword">from</span> <span class="string">&#x27;mjml&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (data) =&gt; &#123;</span><br><span class="line">  <span class="comment">// first let&#x27;s compile and render the mail template that will include the data needed to show in the mail content</span></span><br><span class="line">  <span class="keyword">const</span> mjml = pug.renderFile(<span class="string">&#x27;./mailTemplate.pug&#x27;</span>, data)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// then transform the mjml syntax to normal html</span></span><br><span class="line">  <span class="keyword">const</span> &#123; html, errors &#125; = mjml2html(mjml)</span><br><span class="line">  <span class="keyword">if</span> (errors &amp;&amp; errors.length &gt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errors[<span class="number">0</span>].message)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// and return the html, if there where no errors</span></span><br><span class="line">  <span class="keyword">return</span> html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>mailTemplate.pug</code> could look like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mjml</span><br><span class="line">  mj-body(background-color=&#x27;#F4F4F4&#x27; color=&#x27;#55575d&#x27; font-family=&#x27;Arial, sans-serif&#x27;)</span><br><span class="line">    mj-section(background-color=&#x27;#024b3f&#x27; background-repeat=&#x27;repeat&#x27; padding=&#x27;20px 0&#x27; text-align=&#x27;center&#x27; vertical-align=&#x27;top&#x27;)</span><br><span class="line">      mj-column</span><br><span class="line">        mj-image(align=&#x27;center&#x27; padding=&#x27;10px 25px&#x27; src=&#x27;https://raw.githubusercontent.com/i18next/i18next/master/assets/i18next-ecosystem.jpg&#x27;)</span><br><span class="line">    mj-section(background-color=&#x27;#ffffff&#x27; background-repeat=&#x27;repeat&#x27; padding=&#x27;20px 0&#x27; text-align=&#x27;center&#x27; vertical-align=&#x27;top&#x27;)</span><br><span class="line">      mj-column</span><br><span class="line">    mj-section(background-color=&#x27;#ffffff&#x27; background-repeat=&#x27;repeat&#x27; background-size=&#x27;auto&#x27; padding=&#x27;20px 0px 20px 0px&#x27; text-align=&#x27;center&#x27; vertical-align=&#x27;top&#x27;)</span><br><span class="line">      mj-column</span><br><span class="line">        mj-text(align=&#x27;center&#x27; color=&#x27;#55575d&#x27; font-family=&#x27;Arial, sans-serif&#x27; font-size=&#x27;20px&#x27; line-height=&#x27;28px&#x27; padding=&#x27;0px 25px 0px 25px&#x27;)</span><br><span class="line">          span=t(&#x27;greeting&#x27;, &#123; name: name || &#x27;there&#x27; &#125;)</span><br><span class="line">          br</span><br><span class="line">          br</span><br><span class="line">        mj-text(align=&#x27;center&#x27; color=&#x27;#55575d&#x27; font-family=&#x27;Arial, sans-serif&#x27; font-size=&#x27;16px&#x27; line-height=&#x27;28px&#x27; padding=&#x27;0px 25px 0px 25px&#x27;)</span><br><span class="line">          =t(&#x27;text&#x27;)</span><br><span class="line">    mj-section(background-color=&#x27;#024b3f&#x27; background-repeat=&#x27;repeat&#x27; padding=&#x27;20px 0&#x27; text-align=&#x27;center&#x27; vertical-align=&#x27;top&#x27;)</span><br><span class="line">      mj-column</span><br><span class="line">        mj-text(align=&#x27;center&#x27; color=&#x27;#ffffff&#x27; font-family=&#x27;Arial, sans-serif&#x27; font-size=&#x27;13px&#x27; line-height=&#x27;22px&#x27; padding=&#x27;10px 25px&#x27;)</span><br><span class="line">          =t(&#x27;ending&#x27;)&amp;nbsp;</span><br><span class="line">          a(style=&#x27;color:#ffffff&#x27; href=&#x27;https://www.i18next.com&#x27;)</span><br><span class="line">            b www.i18next.com</span><br></pre></td></tr></table></figure><p>Now let&#39;s define some translations...</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// locales/en/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;greeting&quot;</span>: <span class="string">&quot;Hi &#123;&#123;name&#125;&#125;!&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;You were invited to try i18next.&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ending&quot;</span>: <span class="string">&quot;Internationalized with&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// locales/de/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;greeting&quot;</span>: <span class="string">&quot;Hallo &#123;&#123;name&#125;&#125;!&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;Du bist eingeladen worden i18next auszuprobieren.&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ending&quot;</span>: <span class="string">&quot;Internationalisiert mit&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>...and use them in an <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dirname, join &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; readdirSync, lstatSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-fs-backend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __dirname = dirname(fileURLToPath(<span class="keyword">import</span>.meta.url))</span><br><span class="line"><span class="keyword">const</span> localesFolder = join(__dirname, <span class="string">&#x27;./locales&#x27;</span>)</span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  .use(Backend) <span class="comment">// you can also use any other i18next backend, like i18next-http-backend or i18next-locize-backend</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="comment">// debug: true,</span></span><br><span class="line">    <span class="attr">initImmediate</span>: <span class="literal">false</span>, <span class="comment">// setting initImediate to false, will load the resources synchronously</span></span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">preload</span>: readdirSync(localesFolder).filter(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> joinedPath = join(localesFolder, fileName)</span><br><span class="line">      <span class="keyword">return</span> lstatSync(joinedPath).isDirectory()</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">backend</span>: &#123;</span><br><span class="line">      <span class="attr">loadPath</span>: join(localesFolder, <span class="string">&#x27;&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18next</span><br></pre></td></tr></table></figure><p>So finally, all the above can be used like that:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mail <span class="keyword">from</span> <span class="string">&#x27;./mail.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;./i18n.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = mail(&#123;</span><br><span class="line">  <span class="attr">t</span>: i18next.t,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// that html now can be sent via some mail provider...</span></span><br></pre></td></tr></table></figure><p>This is how the resulting html could look like:</p><p><img src="mail_preview.jpg" alt="mail preview"></p><p><em>🧑‍💻 A code example can be found <a href="https://github.com/i18next/i18next-fs-backend/blob/master/example/fastify/app.js#L14-L19">here</a>.</em></p><h2 id="Server-Side-Rendering-SSR"><a href="#Server-Side-Rendering-SSR" class="headerlink" title="Server Side Rendering (SSR) "></a>Server Side Rendering (SSR) <a name="ssr"></a></h2><p>We will try 2 different SSR examples, a classic one using <a href="#pug">Fastify with pug</a> and a more trendy one using <a href="#nextjs">Next.js</a>.</p><h3 id="Fastify-with-Pug-example"><a href="#Fastify-with-Pug-example" class="headerlink" title="Fastify with Pug example "></a>Fastify with Pug example <a name="pug"></a></h3><p>For this example we will use my favorite http framework <a href="https://www.fastify.io/">Fastify</a> (created by <a href="https://twitter.com/matteocollina">Matteo Collina</a> and <a href="https://twitter.com/delvedor">Tomas Della Vedova</a>), but any other framework will also work.</p><p>This time we will use a different i18next module, <a href="https://github.com/i18next/i18next-http-middleware">i18next-http-middleware</a>.It can be used for all Node.js web frameworks, like <a href="https://expressjs.com/">express</a> or <a href="https://www.fastify.io/">Fastify</a>, but also for <a href="../i18n-for-deno-with-i18next">Deno</a> web frameworks, like <a href="https://github.com/zhmushan/abc">abc</a> or <a href="https://github.com/keroxp/servest">ServestJS</a>.</p><p>As already said, here we will use <a href="https://www.fastify.io/">Fastify</a>, my favorite 😉.</p><p>Let&#39;s again start with the <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dirname, join &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; readdirSync, lstatSync &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18next <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-fs-backend&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18nextMiddleware <span class="keyword">from</span> <span class="string">&#x27;i18next-http-middleware&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __dirname = dirname(fileURLToPath(<span class="keyword">import</span>.meta.url))</span><br><span class="line"><span class="keyword">const</span> localesFolder = join(__dirname, <span class="string">&#x27;../locales&#x27;</span>)</span><br><span class="line"></span><br><span class="line">i18next</span><br><span class="line">  .use(i18nextMiddleware.LanguageDetector) <span class="comment">// the language detector, will automatically detect the users language, by some criteria... like the query parameter ?lng=en or http header, etc...</span></span><br><span class="line">  .use(Backend) <span class="comment">// you can also use any other i18next backend, like i18next-http-backend or i18next-locize-backend</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">initImmediate</span>: <span class="literal">false</span>, <span class="comment">// setting initImediate to false, will load the resources synchronously</span></span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">preload</span>: readdirSync(localesFolder).filter(<span class="function">(<span class="params">fileName</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> joinedPath = join(localesFolder, fileName)</span><br><span class="line">      <span class="keyword">return</span> lstatSync(joinedPath).isDirectory()</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">backend</span>: &#123;</span><br><span class="line">      <span class="attr">loadPath</span>: join(localesFolder, <span class="string">&#x27;&#123;&#123;lng&#125;&#125;/&#123;&#123;ns&#125;&#125;.json&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; i18next, <span class="attr">i18nextPlugin</span>: i18nextMiddleware.plugin &#125;</span><br></pre></td></tr></table></figure><p>And our translation resources...</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// locales/en/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;home&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;server&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;started&quot;</span>: <span class="string">&quot;Server is listening on port &#123;&#123;port&#125;&#125;.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// locales/de/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;home&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Hallo Welt!&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;server&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;started&quot;</span>: <span class="string">&quot;Der server lauscht auf dem Port &#123;&#123;port&#125;&#125;.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// locales/it/translations.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;home&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Ciao Mondo!&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;server&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;started&quot;</span>: <span class="string">&quot;Il server sta aspettando sul port &#123;&#123;port&#125;&#125;.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A simple pug template:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title i18next - fastify with pug</span><br><span class="line">  body</span><br><span class="line">    h1=t(&#x27;home.title&#x27;)</span><br><span class="line">    div</span><br><span class="line">      a(href=&quot;/?lng=en&quot;) english</span><br><span class="line">      | &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      a(href=&quot;/?lng=it&quot;) italiano</span><br><span class="line">      | &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      a(href=&quot;/?lng=de&quot;) deutsch</span><br></pre></td></tr></table></figure><p>Our &quot;main&quot; file <code>app.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fastify <span class="keyword">from</span> <span class="string">&#x27;fastify&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pov <span class="keyword">from</span> <span class="string">&#x27;point-of-view&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pug <span class="keyword">from</span> <span class="string">&#x27;pug&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; i18next, i18nextPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;./lib/i18n.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = fastify()</span><br><span class="line">app.register(pov, &#123; <span class="attr">engine</span>: &#123; pug &#125; &#125;)</span><br><span class="line">app.register(i18nextPlugin, &#123; i18next &#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/raw&#x27;</span>, <span class="function">(<span class="params">request, reply</span>) =&gt;</span> &#123;</span><br><span class="line">  reply.send(request.t(<span class="string">&#x27;home.title&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, reply</span>) =&gt;</span> &#123;</span><br><span class="line">  reply.view(<span class="string">&#x27;/views/index.pug&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">  <span class="comment">// if you like you can also internationalize your log statements ;-)</span></span><br><span class="line">  <span class="built_in">console</span>.log(i18next.t(<span class="string">&#x27;server.started&#x27;</span>, &#123; port &#125;))</span><br><span class="line">  <span class="built_in">console</span>.log(i18next.t(<span class="string">&#x27;server.started&#x27;</span>, &#123; port, <span class="attr">lng</span>: <span class="string">&#x27;de&#x27;</span> &#125;))</span><br><span class="line">  <span class="built_in">console</span>.log(i18next.t(<span class="string">&#x27;server.started&#x27;</span>, &#123; port, <span class="attr">lng</span>: <span class="string">&#x27;it&#x27;</span> &#125;))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now start the app and check what language you&#39;re seeing...<img src="pug_fastify.jpg" alt="pug fastify"></p><p>If you check the console output you&#39;ll also see something like this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br><span class="line"><span class="comment">## Server is listening on port 8080.</span></span><br><span class="line"><span class="comment">## Der server lauscht auf dem Port 8080.</span></span><br><span class="line"><span class="comment">## Il server sta aspettando sul port 8080.</span></span><br></pre></td></tr></table></figure><p><em>Yes, if you like, you can also internationalize your log statements 😁</em></p><p><em>🧑‍💻 A code example can be found <a href="https://github.com/i18next/i18next-fs-backend/tree/master/example/fastify">here</a>.</em></p><h4 id="A-possible-next-step-1"><a href="#A-possible-next-step-1" class="headerlink" title="A possible next step..."></a>A possible next step...</h4><p>Do you wish to manage your translations in a translation management system (TMS), like <a href="https://www.locize.com/">locize</a>?</p><p>Just use <a href="https://github.com/locize/locize-cli">this cli</a> to synchronize the translations with your code. To see how this could look like check out <a href="https://github.com/locize/react-tutorial#step-1---keep-existing-code-setup-but-synchronize-with-locize"><strong>Step 1</strong> in this tutorial</a>.</p><p>Alternatively, use <a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a> instead of the <a href="https://github.com/i18next/i18next-fs-backend">i18next-fs-backend</a>.If you&#39;re running your code in a serverless environment, make sure you <a href="https://github.com/locize/i18next-locize-backend#important-advice-for-serverless-environments---aws-lambda-google-cloud-functions-azure-functions-etc">read this advice first</a>!</p><p><strong>btw: Did you know, you can easily adapt your Fastify app to be used in <a href="https://aws.amazon.com/lambda/">AWS Lambda</a> AND locally.</strong></p><p>This can be achieved with the help of <a href="https://github.com/fastify/aws-lambda-fastify">aws-lambda-fastify</a>.Just create a new <code>lambda.js</code> that imports your modified <code>app.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lambda.js</span></span><br><span class="line"><span class="keyword">import</span> awsLambdaFastify <span class="keyword">from</span> <span class="string">&#x27;aws-lambda-fastify&#x27;</span></span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">&#x27;./app.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handler = awsLambdaFastify(app)</span><br></pre></td></tr></table></figure><p>make sure your Fastify app is exported... (<code>export default app</code>)And only start to listen on a port, if not executed in AWS Lambda (<code>import.meta.url === &#39;file://$&#123;process.argv[1]&#125;&#39;</code> or <code>require.main === module</code> for CommonJS)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> fastify <span class="keyword">from</span> <span class="string">&#x27;fastify&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pov <span class="keyword">from</span> <span class="string">&#x27;point-of-view&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pug <span class="keyword">from</span> <span class="string">&#x27;pug&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; i18next, i18nextPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;./lib/i18n.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.env.PORT || <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = fastify()</span><br><span class="line">app.register(pov, &#123; <span class="attr">engine</span>: &#123; pug &#125; &#125;)</span><br><span class="line">app.register(i18nextPlugin, &#123; i18next &#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/raw&#x27;</span>, <span class="function">(<span class="params">request, reply</span>) =&gt;</span> &#123;</span><br><span class="line">  reply.send(request.t(<span class="string">&#x27;home.title&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, reply</span>) =&gt;</span> &#123;</span><br><span class="line">  reply.view(<span class="string">&#x27;/views/index.pug&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">import</span>.meta.url === <span class="string">`file://<span class="subst">$&#123;process.argv[<span class="number">1</span>]&#125;</span>`</span>) &#123;</span><br><span class="line">  <span class="comment">// called directly (node app.js)</span></span><br><span class="line">  app.listen(port, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">    <span class="built_in">console</span>.log(i18next.t(<span class="string">&#x27;server.started&#x27;</span>, &#123; port &#125;))</span><br><span class="line">    <span class="built_in">console</span>.log(i18next.t(<span class="string">&#x27;server.started&#x27;</span>, &#123; port, <span class="attr">lng</span>: <span class="string">&#x27;de&#x27;</span> &#125;))</span><br><span class="line">    <span class="built_in">console</span>.log(i18next.t(<span class="string">&#x27;server.started&#x27;</span>, &#123; port, <span class="attr">lng</span>: <span class="string">&#x27;it&#x27;</span> &#125;))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// imported as a module, i.e. when executed in AWS Lambda</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app</span><br></pre></td></tr></table></figure><p><strong>😎 Cool, right?</strong></p><h3 id="Next-js-example"><a href="#Next-js-example" class="headerlink" title="Next.js example "></a>Next.js example <a name="nextjs"></a></h3><p>Now it&#39;s time for <a href="https://nextjs.org/">Next.js</a>...</p><p>When it comes to internationalization of Next.js apps one of the most popular choices is <a href="https://github.com/i18next/next-i18next">next-i18next</a>. It is based on <a href="https://react.i18next.com/">react-i18next</a> and users of <a href="https://github.com/i18next/next-i18next">next-i18next</a> by default simply need to include their translation content as JSON files and don&#39;t have to worry about much else.</p><p><a href="https://github.com/i18next/next-i18next/tree/master/examples/simple">Here</a> you&#39;ll find a simple example.</p><p>You just need a <code>next-i18next.config.js</code> file that provides the configuration for <code>next-i18next</code> and wrapping your app with the <code>appWithTranslation</code> function, which allows to use the <code>t</code> (translate) function in your components via hooks.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; appWithTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;next-i18next&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyApp = <span class="function">(<span class="params">&#123; Component, pageProps &#125;</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> appWithTranslation(MyApp)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation &#125; <span class="keyword">from</span> <span class="string">&#x27;next-i18next&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; serverSideTranslations &#125; <span class="keyword">from</span> <span class="string">&#x27;next-i18next/serverSideTranslations&#x27;</span></span><br><span class="line"><span class="comment">// This is an async function that you need to include on your page-level components, via either getStaticProps or getServerSideProps (depending on your use case)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Homepage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = useTranslation(<span class="string">&#x27;common&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;t(&#x27;description&#x27;)&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStaticProps = <span class="keyword">async</span> (&#123; locale &#125;) =&gt; (&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    ...await serverSideTranslations(locale, [<span class="string">&#x27;common&#x27;</span>]),</span><br><span class="line">    <span class="comment">// Will be passed to the page component as props</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Homepage</span><br></pre></td></tr></table></figure><p>By default, <code>next-i18next</code> expects your translations to be organized as such:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── public</span><br><span class="line">    └── locales</span><br><span class="line">        ├── en</span><br><span class="line">        |   └── common.json</span><br><span class="line">        └── de</span><br><span class="line">            └── common.json</span><br></pre></td></tr></table></figure><p>A demo of how such an app looks like when it is deployed, can be found <a href="https://next.i18next.com/">here</a>.</p><p><a href="https://next.i18next.com/"><img src="next-i18next_demo.jpg" alt="next i18next demo"></a></p><p><strong>This looks really simple, right?</strong></p><h3 id="Manage-the-translations-outside-of-the-code"><a href="#Manage-the-translations-outside-of-the-code" class="headerlink" title="Manage the translations outside of the code"></a>Manage the translations outside of the code</h3><p>To best manage the translations there are 3 different approaches:</p><h3 id="POSSIBILITY-1-live-translation-download"><a href="#POSSIBILITY-1-live-translation-download" class="headerlink" title="POSSIBILITY 1: live translation download"></a>POSSIBILITY 1: live translation download</h3><p>When using <a href="https://www.locize.com/">locize</a>, you can configure your next-i18next project to load the translations from the <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">CDN</a> (on server and client side).</p><p>Such a configuration could look like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next-i18next.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">i18n</span>: &#123;</span><br><span class="line">    <span class="attr">defaultLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">locales</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">backend</span>: &#123;</span><br><span class="line">    <span class="attr">projectId</span>: <span class="string">&#x27;d3b405cf-2532-46ae-adb8-99e88d876733&#x27;</span>,</span><br><span class="line">    <span class="comment">// apiKey: &#x27;myApiKey&#x27;, // to not add the api-key in production, used for saveMissing feature</span></span><br><span class="line">    <span class="attr">referenceLng</span>: <span class="string">&#x27;en&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;i18next-locize-backend/cjs&#x27;</span>)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">ns</span>: [<span class="string">&#x27;common&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>, <span class="string">&#x27;second-page&#x27;</span>], <span class="comment">// the namespaces needs to be listed here, to make sure they got preloaded</span></span><br><span class="line">  <span class="attr">serializeConfig</span>: <span class="literal">false</span>, <span class="comment">// because of the custom use i18next plugin</span></span><br><span class="line">  <span class="comment">// debug: true,</span></span><br><span class="line">  <span class="comment">// saveMissing: true, // to not saveMissing to true for production</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/locize/next-i18next-locize#possibility-2-config-for-locize-live-download-usage">Here</a> you&#39;ll find more information and an example on how this looks like.</p><p>There is also the possibility to cache the translations locally thanks to <a href="https://github.com/i18next/i18next-chained-backend">i18next-chained-backend</a>. <a href="https://github.com/locize/next-i18next-locize#optional-server-side-caching-to-filesystem">Here</a> you can find more information about this option.</p><p><em>If you&#39;re deploying your Next.js app in a serverless environment, consider to use the second possibility...</em><em>More information about the reason for this can be found <a href="https://github.com/locize/i18next-locize-backend#important-advice-for-serverless-environments---aws-lambda-google-cloud-functions-azure-functions-etc">here</a>.</em></p><h3 id="POSSIBILITY-2-bundle-translations-and-keep-in-sync"><a href="#POSSIBILITY-2-bundle-translations-and-keep-in-sync" class="headerlink" title="POSSIBILITY 2: bundle translations and keep in sync"></a>POSSIBILITY 2: bundle translations and keep in sync</h3><p><strong>If you&#39;re not sure, choose this way.</strong></p><p>This option will not change the configuration of your &quot;normal&quot; next-i18next project:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// next-i18next.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">i18n</span>: &#123;</span><br><span class="line">    <span class="attr">defaultLocale</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">locales</span>: [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Just download or sync your local translations before &quot;deploying&quot; your app.</p><p><a href="https://github.com/locize/next-i18next-locize#possibility-2-bundle-translations-with-app">Here</a> you&#39;ll find more information and an example on how this looks like.</p><p>You can, for example, run an <a href="https://github.com/locize/next-i18next-locize/blob/main/package.json#L6">npm script</a> (or similar), which will use the <a href="https://github.com/locize/locize-cli">cli</a> to download the translations from locize into the appropriate folder next-i18next is looking in to (i.e. <code>./public/locales</code>). This way the translations are bundled in your app and you will not generate any CDN downloads during runtime.</p><p>i.e. <code>locize download --project-id=d3b405cf-2532-46ae-adb8-99e88d876733 --ver=latest --clean=true --path=./public/locales</code></p><h4 id="Best-approach-optimized-for-server-and-client-side"><a href="#Best-approach-optimized-for-server-and-client-side" class="headerlink" title="Best approach: optimized for server and client side"></a>Best approach: optimized for server and client side</h4><p><a href="../next-i18next/"><img src="../next-i18next/next-i18next.jpg" alt="next-i18next"></a><a href="../next-i18next/">Here</a> you&#39;ll find a blog post on how to best use next-i18next with client side translation download and SEO optimization.</p><hr><p>There&#39;s also an <a href="https://youtu.be/SA_9i4TtxLQ">i18next crash course video</a>.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/SA_9i4TtxLQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="🎉🥳-Conclusion-🎊🎁"><a href="#🎉🥳-Conclusion-🎊🎁" class="headerlink" title="🎉🥳 Conclusion 🎊🎁"></a>🎉🥳 Conclusion 🎊🎁</h2><p>As you see i18n is also important on server side.</p><p>I hope you’ve learned a few new things about server side internationalization and modern localization workflows.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth to try <a href="https://www.i18next.com/">i18next</a> and also <a href="https://www.locize.com/">locize</a>.</p><p>👍</p><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "What is i18next?",      "acceptedAnswer": {        "@type": "Answer",        "text": "i18next is an internationalization-framework written in and for JavaScript. But it's much more than that. i18next goes beyond just providing the standard i18n features such as (plurals, context, interpolation, format). It provides you with a complete solution to localize your product from web to mobile and desktop."      }    },{      "@type": "Question",      "name": "What is server side internationalization (i18n)?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Server side internationalization is the process of adapting your application's backend to support multiple languages. This ensures that all user-facing content, including emails, command line interfaces (CLIs), server-side rendered sites, etc. are translated into the user's preferred language."      }    },{      "@type": "Question",      "name": "Why is it important to handle i18n in the backend?",      "acceptedAnswer": {        "@type": "Answer",        "text": "It's important to handle i18n in the backend because some user-facing content is not directly rendered in the browser, such as emails and CLIs. Without proper internationalization in the backend, this content will not be translated into the user's preferred language."      }    },{      "@type": "Question",      "name": "What is the example i18n framework used in the text?",      "acceptedAnswer": {        "@type": "Answer",        "text": "The example i18n framework used in the text is i18next."      }    },{      "@type": "Question",      "name": "Can you use i18next for CLI apps?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Yes, you can use i18next for CLI apps. The text provides an example of how to use i18next to translate a small CLI app that greets the user in the appropriate language."      }    },{      "@type": "Question",      "name": "Can you use i18next for email generation?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Yes, you can use i18next for email generation. The text provides an example of how to use i18next to translate the raw data into HTML content in the user's preferred language to be used in an email."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> internationalization </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> react </tag>
            
            <tag> backend </tag>
            
            <tag> server </tag>
            
            <tag> serverside </tag>
            
            <tag> cli </tag>
            
            <tag> mail </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular Localization - Unleash the full power of i18next</title>
      <link href="/blog/angular-i18next/"/>
      <url>/blog/angular-i18next/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg" alt="angular localization" title="locize © inweso GmbH"></p><p>Let&#39;s talk about internationalization (i18n) for Angular (not AngularJS, not Angular 2, just Angular 😉).</p><p>When it comes to JavaScript localization, one of the most popular frameworks is <a href="https://www.i18next.com/">i18next</a>. One of the most famous Angular extension for i18next is <a href="https://github.com/Romanchuk/angular-i18next/">angular-i18next</a>.It was created back in April 2017 by <a href="https://github.com/Romanchuk">Sergey Romanchuk</a>.</p><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><ul><li><a href="#why-i18next">So first of all: &quot;Why i18next?&quot;</a></li><li><a href="#start">Let&#39;s get into it...</a><ul><li><a href="#prerequisites">Prerequisites</a></li><li><a href="#getting-started">Getting started</a></li><li><a href="#language-switcher">Language Switcher</a></li><li><a href="#separate">Separate translations from code</a><ul><li><a href="#how-look">How does this look like?</a></li><li><a href="#save-missing">save missing translations</a></li><li><a href="#more">👀 but there&#39;s more...</a></li></ul></li></ul></li><li><a href="#congratulations">🎉🥳 Congratulations 🎊🎁</a></li></ul><h2 id="So-first-of-all-quot-Why-i18next-quot"><a href="#So-first-of-all-quot-Why-i18next-quot" class="headerlink" title="So first of all: &quot;Why i18next?&quot; "></a>So first of all: &quot;Why i18next?&quot; <a name="why-i18next"></a></h2><p><em>i18next was created in late 2011. It&#39;s older than most of the libraries you will use nowadays, including your main frontend technology (<a href="../react-i18next/">React</a>, Angular, <a href="../i18next-vue/">Vue</a>, ...).</em><br /><strong>➡️ sustainable</strong></p><p><em>Based on how long i18next already is available open source, there is no real i18n case that could not be solved with i18next.</em><br /><strong>➡️ mature</strong></p><p><em>i18next can be used in any javascript (and a few non-javascript - .net, elm, iOS, android, ruby, ...) environment, with any UI framework, with any i18n format, ... <a href="https://www.i18next.com/overview/supported-frameworks">the possibilities are endless</a>.</em><br /><strong>➡️ extensible</strong></p><p><em>There is a plenty of features and possibilities you&#39;ll get with i18next compared to other regular i18n frameworks.</em><br /><strong>➡️ rich</strong></p><p><a href="https://www.i18next.com/overview/comparison-to-others">Here</a> you can find more information about why i18next is special and <a href="https://locize.com/i18next.html#how-does-i18next-work">how it works</a>.</p><h2 id="Let-39-s-get-into-it"><a href="#Let-39-s-get-into-it" class="headerlink" title="Let&#39;s get into it... "></a>Let&#39;s get into it... <a name="start"></a></h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites "></a>Prerequisites <a name="prerequisites"></a></h3><p>Make sure you have Node.js and npm installed. It&#39;s best, if you have some experience with simple HTML, JavaScript and basic Angular, before jumping to <a href="https://github.com/Romanchuk/angular-i18next/">angular-i18next</a>.</p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started "></a>Getting started <a name="getting-started"></a></h3><p>Take your own Angular project or create a new one, i.e. with <a href="https://angular.io/guide/setup-local#install-the-angular-cli">the Angular cli</a>.</p><p><code>npx @angular/cli new my-app</code></p><p><em>To simplify let&#39;s remove the &quot;generated&quot; content of the angular-cli:</em><img src="app_0.jpg" alt="angular cli" title="locize © inweso GmbH"></p><p>We are going to adapt the app to detect the language according to the user’s preference.And we will create a language switcher to make the content change between different languages.</p><p>Let&#39;s install some i18next dependencies:</p><ul><li><a href="https://www.i18next.com/">i18next</a></li><li><a href="https://github.com/Romanchuk/angular-i18next/">angular-i18next</a></li><li><a href="https://github.com/i18next/i18next-browser-languageDetector">i18next-browser-languagedetector</a></li></ul><p><code>npm install i18next angular-i18next i18next-browser-languagedetector</code></p><p>Let&#39;s modify our <code>app.module.ts</code> to integrate and initialize the i18next config:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; APP_INITIALIZER, NgModule, LOCALE_ID &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; I18NEXT_SERVICE, I18NextModule, I18NextLoadResult, ITranslationService, defaultInterpolationFormat  &#125; <span class="keyword">from</span> <span class="string">&#x27;angular-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18nextOptions = &#123;</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">resources</span>: &#123;</span><br><span class="line">    <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="string">&quot;welcome&quot;</span>: <span class="string">&quot;Welcome to Your Angular App&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">de</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="string">&quot;welcome&quot;</span>: <span class="string">&quot;Willkommen zu Deiner Vue.js App&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">interpolation</span>: &#123;</span><br><span class="line">    <span class="attr">format</span>: I18NextModule.interpolationFormat(defaultInterpolationFormat)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">appInit</span>(<span class="params">i18next: ITranslationService</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> promise: <span class="built_in">Promise</span>&lt;I18NextLoadResult&gt; = i18next</span><br><span class="line">      .use(LocizeApi)</span><br><span class="line">      .use&lt;any&gt;(LanguageDetector)</span><br><span class="line">      .init(i18nextOptions);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">localeIdFactory</span>(<span class="params">i18next: ITranslationService</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i18next.language;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> I18N_PROVIDERS = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: APP_INITIALIZER,</span><br><span class="line">    <span class="attr">useFactory</span>: appInit,</span><br><span class="line">    <span class="attr">deps</span>: [I18NEXT_SERVICE],</span><br><span class="line">    <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: LOCALE_ID,</span><br><span class="line">    <span class="attr">deps</span>: [I18NEXT_SERVICE],</span><br><span class="line">    <span class="attr">useFactory</span>: localeIdFactory</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    I18NextModule.forRoot()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    I18N_PROVIDERS</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>Ok, now let&#39;s update the <code>app.component.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Toolbar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toolbar&quot;</span> <span class="attr">role</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; &#x27;welcome&#x27; | i18next &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Highlight Card --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card highlight-card card-small&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; &#x27;welcome&#x27; | i18next &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You should now see something like this:<img src="app_1.jpg" alt="app 1" title="locize © inweso GmbH"></p><p>Nice! So let&#39;s add an additional text, with an <a href="https://www.i18next.com/translation-function/interpolation#unescape">interpolated unescaped</a> value:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Toolbar --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;toolbar&quot;</span> <span class="attr">role</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; &#x27;welcome&#x27; | i18next &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Highlight Card --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card highlight-card card-small&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; &#x27;welcome&#x27; | i18next &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; &#x27;descr&#x27; | i18next: &#123; url: &#x27;https://github.com/Romanchuk/angular-i18next&#x27; &#125; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Do not forget to add the new key also to the resources:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> i18nextOptions = &#123;</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">resources</span>: &#123;</span><br><span class="line">    <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="string">&quot;welcome&quot;</span>: <span class="string">&quot;Welcome to Your Angular App&quot;</span>,</span><br><span class="line">            <span class="string">&quot;descr&quot;</span>: <span class="string">&quot;For a guide and recipes on how to configure / customize this project, check out &#123;&#123;-url&#125;&#125;.&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">de</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">            <span class="string">&quot;welcome&quot;</span>: <span class="string">&quot;Willkommen zu Deiner Vue.js App&quot;</span>,</span><br><span class="line">            <span class="string">&quot;descr&quot;</span>: <span class="string">&quot;Eine Anleitung und Rezepte für das Konfigurieren / Anpassen dieses Projekts findest du in &#123;&#123;-url&#125;&#125;.&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">interpolation</span>: &#123;</span><br><span class="line">    <span class="attr">format</span>: I18NextModule.interpolationFormat(defaultInterpolationFormat)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Does it work? - Of course!<img src="app_2.jpg" alt="app 2" title="locize © inweso GmbH"></p><p>And thanks to the language-detector, you can also try to switch the language with the query parameter <code>?lng=de</code>:<img src="app_3.jpg" alt="language detector" title="locize © inweso GmbH"></p><h3 id="Language-Switcher"><a href="#Language-Switcher" class="headerlink" title="Language Switcher "></a>Language Switcher <a name="language-switcher"></a></h3><p>We like to offer the possibility to change the language via some sort of language switcher.</p><p>So let&#39;s add a footer section in our <code>app.component.html</code> file:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Footer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ng-template</span> <span class="attr">ngFor</span> <span class="attr">let-lang</span> [<span class="attr">ngForOf</span>]=<span class="string">&quot;languages&quot;</span> <span class="attr">let-i</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngIf</span>=<span class="string">&quot;i !== 0&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span>|<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> *<span class="attr">ngIf</span>=<span class="string">&quot;language !== lang&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;link lang-item &#123;&#123;lang&#125;&#125;&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;changeLanguage(lang)&quot;</span>&gt;</span>&#123;&#123; lang.toUpperCase() &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> *<span class="attr">ngIf</span>=<span class="string">&quot;language === lang&quot;</span> <span class="attr">class</span>=<span class="string">&quot;current lang-item &#123;&#123;lang&#125;&#125;&quot;</span>&gt;</span>&#123;&#123; lang.toUpperCase() &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>And we need also to update the <code>app.components.ts</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Inject &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; I18NEXT_SERVICE, ITranslationService &#125; <span class="keyword">from</span> <span class="string">&#x27;angular-i18next&#x27;</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  <span class="attr">selector</span>: <span class="string">&#x27;app-root&#x27;</span>,</span><br><span class="line">  <span class="attr">templateUrl</span>: <span class="string">&#x27;./app.component.html&#x27;</span>,</span><br><span class="line">  <span class="attr">styleUrls</span>: [<span class="string">&#x27;./app.component.less&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  <span class="attr">language</span>: string = <span class="string">&#x27;en&#x27;</span>;</span><br><span class="line">  languages: string[] = [<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;de&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    @Inject(I18NEXT_SERVICE) private i18NextService: ITranslationService</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>)</span></span><br><span class="line">  &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">ngOnInit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.i18NextService.events.initialized.subscribe(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (e) &#123;</span><br><span class="line">        <span class="built_in">this</span>.updateState(<span class="built_in">this</span>.i18NextService.language);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">changeLanguage</span>(<span class="params">lang: string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lang !== <span class="built_in">this</span>.i18NextService.language) &#123;</span><br><span class="line">      <span class="built_in">this</span>.i18NextService.changeLanguage(lang).then(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.updateState(lang);</span><br><span class="line">        <span class="built_in">document</span>.location.reload();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private <span class="function"><span class="title">updateState</span>(<span class="params">lang: string</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.language = lang;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="app_4.jpg" alt="app 4" title="locize © inweso GmbH"></p><p><strong>🥳 Awesome, you&#39;ve just created your first language switcher!</strong></p><p>Thanks to <a href="https://github.com/i18next/i18next-browser-languageDetector">i18next-browser-languagedetector</a> now it tries to detect the browser language and automatically use that language if you&#39;ve provided the translations for it. The manually selected language in the language switcher is persisted in the localStorage, next time you visit the page, that language is used as preferred language.</p><h3 id="Separate-translations-from-code"><a href="#Separate-translations-from-code" class="headerlink" title="Separate translations from code "></a>Separate translations from code <a name="separate"></a></h3><p>Having the translations in our code works, but is not that suitable to work with, for translators.Let&#39;s separate the translations from the code and pleace them in dedicated json files.</p><p><a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a> will help us to do so.</p><blockquote><p><a href="../react-i18next/#for-sure">What is locize?</a></p></blockquote><h4 id="How-does-this-look-like"><a href="#How-does-this-look-like" class="headerlink" title="How does this look like? "></a>How does this look like? <a name="how-look"></a></h4><p>First you need to signup at <a href="https://locize.app/register">locize</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a>.Then <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a> in locize and add your translations. You can add your translations either by <a href="https://docs.locize.com/more/general-questions/how-to-import-translations-from-a-file">importing the individual json files</a> or via <a href="https://docs.locize.com/integration/api#update-remove-translations">API</a> or by using the <a href="https://github.com/locize/locize-cli">CLI</a>.</p><p><code>npm install i18next-locize-backend</code></p><p>Adapt the <code>app.modules.ts</code> file to use the i18next-locize-backend and make sure you copy the project-id from within your locize project:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; APP_INITIALIZER, NgModule, LOCALE_ID &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; I18NEXT_SERVICE, I18NextModule, I18NextLoadResult, ITranslationService, defaultInterpolationFormat  &#125; <span class="keyword">from</span> <span class="string">&#x27;angular-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LocizeApi <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18nextOptions = &#123;</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">backend</span>: &#123;</span><br><span class="line">    <span class="attr">projectId</span>: <span class="string">&#x27;your-locize-project-id&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">interpolation</span>: &#123;</span><br><span class="line">    <span class="attr">format</span>: I18NextModule.interpolationFormat(defaultInterpolationFormat)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">appInit</span>(<span class="params">i18next: ITranslationService</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> promise: <span class="built_in">Promise</span>&lt;I18NextLoadResult&gt; = i18next</span><br><span class="line">      .use(LocizeApi)</span><br><span class="line">      .use&lt;any&gt;(LanguageDetector)</span><br><span class="line">      .init(i18nextOptions);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">localeIdFactory</span>(<span class="params">i18next: ITranslationService</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i18next.language;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> I18N_PROVIDERS = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: APP_INITIALIZER,</span><br><span class="line">    <span class="attr">useFactory</span>: appInit,</span><br><span class="line">    <span class="attr">deps</span>: [I18NEXT_SERVICE],</span><br><span class="line">    <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: LOCALE_ID,</span><br><span class="line">    <span class="attr">deps</span>: [I18NEXT_SERVICE],</span><br><span class="line">    <span class="attr">useFactory</span>: localeIdFactory</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    I18NextModule.forRoot()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    I18N_PROVIDERS</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>The app looks still the same, but the translations are now completely separated from the app and can be managed and released separately.<img src="app_4.jpg" title="locize © inweso GmbH"></p><h4 id="save-missing-translations"><a href="#save-missing-translations" class="headerlink" title="save missing translations "></a>save missing translations <a name="save-missing"></a></h4><p>Thanks to the use of the <a href="https://www.i18next.com/overview/configuration-options#missing-keys">saveMissing functionality</a>, new keys gets added to locize automatically, while developing the app.</p><p>Just pass <code>saveMissing: true</code> in the i18next options and make sure you copy the api-key from within your locize project:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> i18nextOptions = &#123;</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">saveMissing</span>: <span class="literal">true</span>, <span class="comment">// do not use the saveMissing functionality in production: https://docs.locize.com/guides-tips-and-tricks/going-production</span></span><br><span class="line">  <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">backend</span>: &#123;</span><br><span class="line">    <span class="attr">projectId</span>: <span class="string">&#x27;my-locize-project-id&#x27;</span>,</span><br><span class="line">    <span class="attr">apiKey</span>: <span class="string">&#x27;my-api-key&#x27;</span> <span class="comment">// used for handleMissing functionality, do not add your api-key in a production build</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">interpolation</span>: &#123;</span><br><span class="line">    <span class="attr">format</span>: I18NextModule.interpolationFormat(defaultInterpolationFormat)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Each time you&#39;ll use a new key, it will be sent to locize, i.e.:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;&#123;&#123; <span class="string">&#x27;cool&#x27;</span> | i18next: &#123; <span class="attr">defaultValue</span>: <span class="string">&#x27;This is very cool!&#x27;</span> &#125; &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>will result in locize like this:</p><p><img src="missing_key.jpg" alt="missing key" title="locize © inweso GmbH"></p><h4 id="👀-but-there-39-s-more"><a href="#👀-but-there-39-s-more" class="headerlink" title="👀 but there&#39;s more... "></a>👀 but there&#39;s more... <a name="more"></a></h4><p>Thanks to the <a href="https://github.com/locize/locize-lastused">locize-lastused</a> plugin, you&#39;ll be able to <a href="https://docs.locize.com/guides-tips-and-tricks/unused-translations">find and filter in locize which keys are used or not used anymore</a>.</p><p>With the help of the <a href="https://github.com/locize/locize">locize</a> plugin, you&#39;ll be able to use your app within the locize <a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>.</p><p>Lastly, with the help of the <a href="https://docs.locize.com/whats-inside/auto-machine-translation">auto-machinetranslation workflow</a>, new keys not only gets added to locize automatically, while developing the app, but are also automatically translated into the target languages using machine translation:<img src="locize_autotranslate.jpg" alt="locize autotranslate" title="locize © inweso GmbH"></p><p><code>npm install locize-lastused locize</code></p><p>use them in <code>app.modules.ts</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; APP_INITIALIZER, NgModule, LOCALE_ID &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">&#x27;@angular/platform-browser&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; I18NEXT_SERVICE, I18NextModule, I18NextLoadResult, ITranslationService, defaultInterpolationFormat  &#125; <span class="keyword">from</span> <span class="string">&#x27;angular-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LocizeApi <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LastUsed <span class="keyword">from</span> <span class="string">&#x27;locize-lastused&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; locizePlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;my-locize-project-id&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;my-api-key&#x27;</span> <span class="comment">// used for handleMissing functionality, do not add your api-key in a production buildyour</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18nextOptions = &#123;</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">saveMissing</span>: <span class="literal">true</span>, <span class="comment">// do not use the saveMissing functionality in production: https://docs.locize.com/guides-tips-and-tricks/going-production</span></span><br><span class="line">  <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">  <span class="attr">locizeLastUsed</span>: locizeOptions,</span><br><span class="line">  <span class="attr">interpolation</span>: &#123;</span><br><span class="line">    <span class="attr">format</span>: I18NextModule.interpolationFormat(defaultInterpolationFormat)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">appInit</span>(<span class="params">i18next: ITranslationService</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> promise: <span class="built_in">Promise</span>&lt;I18NextLoadResult&gt; = i18next</span><br><span class="line">      <span class="comment">// locize-lastused</span></span><br><span class="line">      <span class="comment">// sets a timestamp of last access on every translation segment on locize</span></span><br><span class="line">      <span class="comment">// -&gt; safely remove the ones not being touched for weeks/months</span></span><br><span class="line">      <span class="comment">// https://github.com/locize/locize-lastused</span></span><br><span class="line">      <span class="comment">// do not use the lastused functionality in production: https://docs.locize.com/guides-tips-and-tricks/going-production</span></span><br><span class="line">      .use(LastUsed)</span><br><span class="line">      <span class="comment">// locize-editor</span></span><br><span class="line">      <span class="comment">// InContext Editor of locize</span></span><br><span class="line">      .use(locizePlugin)</span><br><span class="line">      <span class="comment">// i18next-locize-backend</span></span><br><span class="line">      <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">      <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">      .use(LocizeApi)</span><br><span class="line">      .use&lt;any&gt;(LanguageDetector)</span><br><span class="line">      .init(i18nextOptions);</span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">localeIdFactory</span>(<span class="params">i18next: ITranslationService</span>)  </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i18next.language;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> I18N_PROVIDERS = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: APP_INITIALIZER,</span><br><span class="line">    <span class="attr">useFactory</span>: appInit,</span><br><span class="line">    <span class="attr">deps</span>: [I18NEXT_SERVICE],</span><br><span class="line">    <span class="attr">multi</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">provide</span>: LOCALE_ID,</span><br><span class="line">    <span class="attr">deps</span>: [I18NEXT_SERVICE],</span><br><span class="line">    <span class="attr">useFactory</span>: localeIdFactory</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  <span class="attr">declarations</span>: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    I18NextModule.forRoot()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [</span><br><span class="line">    I18N_PROVIDERS</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">bootstrap</span>: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p><a href="https://docs.locize.com/whats-inside/auto-machine-translation">Automatic machine translation</a>:</p><p><img src="locize_autotranslate.jpg" alt="locize autotranslate" title="locize © inweso GmbH"></p><p><a href="(https://docs.locize.com/guides-tips-and-tricks/unused-translations)">Last used translations filter</a>:</p><p><img src="../react-i18next/last_used.jpg" alt="react localization" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>:</p><p><img src="in_context.jpg" alt="in context" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/caching">Caching</a>:</p><p><img src="../react-i18next/caching.jpg" alt="react localization caching" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/versioning#merging-versions">Merging versions</a>:</p><p><img src="../react-i18next/overwrite_version.jpg" alt="overwrite version" title="locize © inweso GmbH"></p><p><em>🧑‍💻 The complete code can be found <a href="https://github.com/locize/locize-angular-example">here</a>.</em></p><p>There&#39;s also an <a href="https://youtu.be/SA_9i4TtxLQ">i18next crash course video</a>.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/SA_9i4TtxLQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>I hope you’ve learned a few new things about <a href="https://www.i18next.com/">i18next</a>, <a href="https://github.com/Romanchuk/angular-i18next/">angular-i18next</a> and <a href="https://locize.com/">modern localization workflows</a>.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth to try <a href="https://locize.com/">locize</a>.</p><p>The founders of <a href="https://locize.com/">locize</a> are also the creators of <a href="https://www.i18next.com/">i18next</a>. So by using <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.</p><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Give vue-i18n more superpowers❕</title>
      <link href="/blog/give-vue-i18n-more-superpowers/"/>
      <url>/blog/give-vue-i18n-more-superpowers/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg" title="locize © inweso GmbH"></p><p>It’s joyful to work with <a href="https://vuejs.org/">Vue.js</a>. The design is elegant and the robust first-party additions which can be coupled with, make building browser apps a pleasure.</p><p>The most famous i18n plugin for the progressive JavaScript framework <a href="https://vuejs.org/">Vue.js</a> is probably <a href="https://vue-i18n.intlify.dev/">Vue I18n</a>.</p><blockquote><p><a href="https://github.com/kazupon">Kazuya</a>, thank you for this great i18n plugin!</p></blockquote><p><img src="vue-i18n-stats.jpg" title="locize © inweso GmbH"></p><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><ul><li><a href="#new-versions">New versions</a></li><li><a href="#start">So how does a basic vue-i18n setup look like? Let&#39;s get into it...</a></li><li>Is it possible to make a vue-18n setup even better?<ul><li><a href="#prerequisites">Prerequisites</a></li><li><a href="#getting-started">Getting started</a></li><li><a href="#language-switcher">Language Switcher</a></li><li><a href="#component-directive">Component interpolation and directive</a></li><li><a href="#superpowers">Where are the additional superpowers?</a></li><li><a href="#how-look">How does this look like?</a></li><li><a href="#save-missing">save missing translations</a></li><li><a href="#more">👀 but there&#39;s more...</a></li><li><a href="#congratulations">🎉🥳 Congratulations 🎊🎁</a></li></ul></li></ul><h2 id="New-versions"><a href="#New-versions" class="headerlink" title="New versions "></a>New versions <a name="new-versions"></a></h2><p>Beside templates, directives, data binding, event handling, etc... with v3 Vue.js is now introducing also <a href="https://vuejs.org/api/composition-api-setup.html">Composition API</a>, <a href="https://vuejs.org/guide/built-ins/teleport.html">Teleport</a>, Fragments... and <a href="https://vuejs.org/guide/built-ins/suspense.html">Suspense</a>.The appropriate version to Vue.js v3 for <a href="https://vue-i18n.intlify.dev/">Vue I18n</a> is <a href="https://blog.intlify.dev/posts/vue-i18n-9.html">v9</a>.</p><h2 id="So-how-does-a-basic-vue-i18n-setup-look-like"><a href="#So-how-does-a-basic-vue-i18n-setup-look-like" class="headerlink" title="So how does a basic vue-i18n setup look like? "></a>So how does a basic vue-i18n setup look like? <a name="start"></a></h2><h3 id="Let-39-s-get-into-it"><a href="#Let-39-s-get-into-it" class="headerlink" title="Let&#39;s get into it..."></a>Let&#39;s get into it...</h3><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites "></a>Prerequisites <a name="prerequisites"></a></h3><p>Make sure you have Node.js and npm installed. It&#39;s best, if you have some experience with simple HTML, JavaScript and basic Vue.js, before jumping to <a href="https://vue-i18n.intlify.dev/">vue-i18n</a>.</p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started "></a>Getting started <a name="getting-started"></a></h3><p>Take your own Vue.js project or create a new one, i.e. with <a href="https://cli.vuejs.org/guide/creating-a-project.html#vue-create">the vue create cli command</a>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx @vue/cli create vue-starter-project</span><br><span class="line"><span class="comment">## select vue 3 preset</span></span><br></pre></td></tr></table></figure><p>Let&#39;s install the vue-i18n dependency:</p><p><code>npm install vue-i18n</code></p><p>Let&#39;s prepare the <code>main.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> i18n = createI18n(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>, <span class="comment">// set locale</span></span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;en&#x27;</span>, <span class="comment">// set fallback locale</span></span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="attr">en</span>: &#123;</span><br><span class="line">      <span class="attr">message</span>: &#123;</span><br><span class="line">        <span class="attr">welcome</span>: <span class="string">&#x27;Welcome to Your Vue.js App&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">de</span>: &#123;</span><br><span class="line">      <span class="attr">message</span>: &#123;</span><br><span class="line">        <span class="attr">welcome</span>: <span class="string">&#x27;Willkommen zu Deiner Vue.js App&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// If you need to specify other options, you can set other options</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">createApp(App).use(i18n).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Now let&#39;s create a first component <code>TranslationShowCase.vue</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $t(&quot;welcome&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;TranslationShowCase&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>...and use that component in <code>App.vue</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">TranslationShowCase</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TranslationShowCase <span class="keyword">from</span> <span class="string">&#x27;./components/TranslationShowCase.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    TranslationShowCase</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#app</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span></span></span><br><span class="line"><span class="css"><span class="xml">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span></span><br><span class="line"><span class="css"><span class="xml">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>You should now see something like this:<img src="app_0.jpg" title="locize © inweso GmbH"></p><h3 id="Language-Switcher"><a href="#Language-Switcher" class="headerlink" title="Language Switcher "></a>Language Switcher <a name="language-switcher"></a></h3><p>Now we will create a language switcher to make the content change between different languages.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $t(&quot;welcome&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale !== &#x27;de&#x27;&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeLanguage(&#x27;de&#x27;)&quot;</span>&gt;</span>DE<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale === &#x27;de&#x27;&quot;</span>&gt;</span>DE<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="symbol">&amp;nbsp;</span>|<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale !== &#x27;en&#x27;&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeLanguage(&#x27;en&#x27;)&quot;</span>&gt;</span>EN<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale === &#x27;en&#x27;&quot;</span>&gt;</span>EN<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;TranslationShowCase&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">changeLanguage</span>(<span class="params">lang</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$i18n.locale = lang</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="app_1.jpg" title="locize © inweso GmbH"></p><p><strong>🥳 Awesome, you&#39;ve just created your first language switcher!</strong></p><h3 id="Component-interpolation-and-directive"><a href="#Component-interpolation-and-directive" class="headerlink" title="Component interpolation and directive "></a>Component interpolation and directive <a name="component-directive"></a></h3><p>Now let&#39;s try <a href="https://vue-i18n.intlify.dev/guide/advanced/component.html#basic-usage">component interpolation</a> and the <a href="https://vue-i18n.intlify.dev/api/directive.html#translationdirective">translation directive</a>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $t(&quot;welcome&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">i18n-t</span> <span class="attr">keypath</span>=<span class="string">&quot;descr&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;doc&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://cli.vuejs.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>&#123;&#123; $t(&#x27;doc&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">i18n-t</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-t</span>=<span class="string">&quot;&#123;path:&#x27;end&#x27;&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- can also be written like: &lt;i v-t=&quot;&#x27;end&#x27;&quot; /&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale !== &#x27;de&#x27;&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeLanguage(&#x27;de&#x27;)&quot;</span>&gt;</span>DE<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale === &#x27;de&#x27;&quot;</span>&gt;</span>DE<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="symbol">&amp;nbsp;</span>|<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale !== &#x27;en&#x27;&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeLanguage(&#x27;en&#x27;)&quot;</span>&gt;</span>EN<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale === &#x27;en&#x27;&quot;</span>&gt;</span>EN<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;TranslationShowCase&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">changeLanguage</span>(<span class="params">lang</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$i18n.locale = lang</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>...and add the new keys to your translations:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> i18n = createI18n(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;en&#x27;</span>, <span class="comment">// set locale</span></span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;en&#x27;</span>, <span class="comment">// set fallback locale</span></span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="attr">en</span>: &#123;</span><br><span class="line">      <span class="attr">message</span>: &#123;</span><br><span class="line">        <span class="attr">welcome</span>: <span class="string">&#x27;Welcome to Your Vue.js App&#x27;</span>,</span><br><span class="line">        <span class="attr">descr</span>: <span class="string">&#x27;For a guide and recipes on how to configure / customize this project, check out the &#123;0&#125;.&#x27;</span>,</span><br><span class="line">        <span class="attr">doc</span>: <span class="string">&#x27;vue-cli documentation&#x27;</span>,</span><br><span class="line">        <span class="attr">end</span>: <span class="string">&#x27;have fun!&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">de</span>: &#123;</span><br><span class="line">      <span class="attr">message</span>: &#123;</span><br><span class="line">        <span class="attr">welcome</span>: <span class="string">&#x27;Willkommen zu Deiner Vue.js App&#x27;</span>,</span><br><span class="line">        <span class="attr">descr</span>: <span class="string">&#x27;Eine Anleitung und Rezepte für das Konfigurieren / Anpassen dieses Projekts findest du in der &#123;0&#125;.&#x27;</span>,</span><br><span class="line">        <span class="attr">doc</span>: <span class="string">&#x27;vue-cli Dokumentation&#x27;</span>,</span><br><span class="line">        <span class="attr">end</span>: <span class="string">&#x27;habe Spass!&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// If you need to specify other options, you can set other options</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">createApp(App).use(i18n).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>This should be the result:</p><p><img src="app_2.jpg" title="locize © inweso GmbH"></p><h3 id="Where-are-the-additional-superpowers"><a href="#Where-are-the-additional-superpowers" class="headerlink" title="Where are the additional superpowers? "></a>Where are the additional superpowers? <a name="superpowers"></a></h3><p>Let&#39;s meet <a href="https://github.com/locize/locizer">locizer</a>...</p><p><a href="https://github.com/locize/locizer">locizer</a> is a lightweight module to access data from your <a href="https://www.locize.com/">locize</a> project and use that inside your application.</p><blockquote><p><a href="../react-i18next/#for-sure">What is locize?</a></p></blockquote><h4 id="How-does-this-look-like"><a href="#How-does-this-look-like" class="headerlink" title="How does this look like? "></a>How does this look like? <a name="how-look"></a></h4><p>First you need to signup at <a href="https://locize.app/register">locize</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a>.Then <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a> in locize and add your translations. You can add your translations either by <a href="https://docs.locize.com/more/general-questions/how-to-import-translations-from-a-file">importing the individual json files</a> or via <a href="https://docs.locize.com/integration/api#update-remove-translations">API</a> or by using the <a href="https://github.com/locize/locize-cli">CLI</a>.</p><p>Having the translations in your code file works, but is not that suitable to work with, for translators.Using locize separates the translations from the code.</p><p>Having imported all translations should look like this:<img src="locize_imported.jpg" title="locize © inweso GmbH"></p><p>Done so, we&#39;re going to install <a href="https://github.com/locize/locizer">locizer</a>.</p><p><code>npm install locizer</code></p><p>Let&#39;s create a dedicated <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> locizer <span class="keyword">from</span> <span class="string">&#x27;locizer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> namespace = <span class="string">&#x27;messages&#x27;</span> <span class="comment">// your namespace name added in locize</span></span><br><span class="line">locizer.init(&#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;your-locize-project-id&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> i18n = createI18n(&#123;</span><br><span class="line">  <span class="attr">locale</span>: locizer.lng, <span class="comment">// locizer.lng is the language detected in your browser.</span></span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;en&#x27;</span> <span class="comment">// set fallback locale</span></span><br><span class="line">  <span class="comment">// If you need to specify other options, you can set other options</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// called from within setup hook in App.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loadMessagesPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  locizer.loadAll(namespace, <span class="function">(<span class="params">err, messages</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">    <span class="built_in">Object</span>.keys(messages).forEach(<span class="function">(<span class="params">l</span>) =&gt;</span> &#123;</span><br><span class="line">      i18n.global.setLocaleMessage(l, messages[l])</span><br><span class="line">    &#125;)</span><br><span class="line">    resolve(messages)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>The translations are now loaded asynchronously, that&#39;s why we export the <code>loadMessagesPromise</code> and use it in your <code>App.vue</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">TranslationShowCase</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; loadMessagesPromise &#125; <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TranslationShowCase <span class="keyword">from</span> <span class="string">&#x27;./components/TranslationShowCase.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    TranslationShowCase</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// used in combination with Suspense.</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// useful when translations are not in-memory...</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">async</span> <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">await</span> loadMessagesPromise</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#app</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span></span></span><br><span class="line"><span class="css"><span class="xml">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span></span><br><span class="line"><span class="css"><span class="xml">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Additionally, we make use of the new <a href="https://vuejs.org/guide/built-ins/suspense.html">Suspense</a> functionality of Vue.js.Let&#39;s create a new file: i.e. <code>Suspenser.vue</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;Suspenser&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    App</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>And use that in your <code>main.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; i18n &#125; <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./Suspenser.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(i18n).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Now, as long your translations gets loaded you&#39;ll see the fallback template:<img src="app_3.jpg" title="locize © inweso GmbH"></p><p>If your browser is configured with german language, you may now have seen the language automatically was set to german by default. This is because of the language detection feature of locizer. You can configure the language detection with other <a href="https://github.com/locize/locizer#init-options">options</a>By default the language detection also is looking for the query parameter lng, so you can also type this url to test this: <a href="http://localhost:8080/?lng=de">http://localhost:8080/?lng=de</a><img src="app_2.jpg" title="locize © inweso GmbH"></p><h4 id="save-missing-translations"><a href="#save-missing-translations" class="headerlink" title="save missing translations "></a>save missing translations <a name="save-missing"></a></h4><blockquote><p>I wish newly added keys in the code, would automatically be saved to locize.</p></blockquote><p><strong>Your wish is my command!</strong></p><p>Extend the <code>i18n.js</code> file with the locize api-key and the handleMissing function:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> locizer <span class="keyword">from</span> <span class="string">&#x27;locizer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> namespace = <span class="string">&#x27;messages&#x27;</span> <span class="comment">// your namespace name added in locize</span></span><br><span class="line"><span class="keyword">const</span> apiKey = <span class="string">&#x27;my-api-key&#x27;</span> <span class="comment">// used for handleMissing functionality, do not add your api-key in a production build</span></span><br><span class="line">locizer.init(&#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;your-locize-project-id&#x27;</span>,</span><br><span class="line">  apiKey</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> i18n = createI18n(&#123;</span><br><span class="line">  <span class="attr">locale</span>: locizer.lng, <span class="comment">// locizer.lng is the language detected in your browser.</span></span><br><span class="line">  <span class="attr">fallbackLocale</span>: <span class="string">&#x27;en&#x27;</span> <span class="comment">// set fallback locale</span></span><br><span class="line">  <span class="comment">// If you need to specify other options, you can set other options</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// called from within setup hook in App.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loadMessagesPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  locizer.loadAll(namespace, <span class="function">(<span class="params">err, messages</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">    <span class="built_in">Object</span>.keys(messages).forEach(<span class="function">(<span class="params">l</span>) =&gt;</span> &#123;</span><br><span class="line">      i18n.global.setLocaleMessage(l, messages[l])</span><br><span class="line">    &#125;)</span><br><span class="line">    resolve(messages)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">handleMissing</span> (<span class="params">locale, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!apiKey) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> (locale !== locizer.referenceLng) <span class="keyword">return</span></span><br><span class="line">  locizer.add(namespace, key, key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And use it in the component:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">TranslationShowCase</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; useI18n &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; loadMessagesPromise, handleMissing &#125; <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> TranslationShowCase <span class="keyword">from</span> <span class="string">&#x27;./components/TranslationShowCase.vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    TranslationShowCase</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// used in combination with Suspense.</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// useful when translations are not in-memory...</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">async</span> <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    useI18n().setMissingHandler(handleMissing)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">await</span> loadMessagesPromise</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-id">#app</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">font-family</span>: Avenir, Helvetica, Arial, sans-serif;</span></span></span><br><span class="line"><span class="css"><span class="xml">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span></span><br><span class="line"><span class="css"><span class="xml">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Now, if you add a new key in your templates, <code>&lt;h2&gt;&#123;&#123; $t("How are you?") &#125;&#125;&lt;/h2&gt;</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $t(&quot;welcome&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; $t(&quot;How are you?&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">i18n-t</span> <span class="attr">keypath</span>=<span class="string">&quot;descr&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;doc&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://cli.vuejs.org&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>&#123;&#123; $t(&#x27;doc&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">i18n-t</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-t</span>=<span class="string">&quot;&#123;path:&#x27;end&#x27;&#125;&quot;</span> /&gt;</span> <span class="comment">&lt;!-- can also be written like: &lt;i v-t=&quot;&#x27;end&#x27;&quot; /&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale !== &#x27;de&#x27;&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeLanguage(&#x27;de&#x27;)&quot;</span>&gt;</span>DE<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale === &#x27;de&#x27;&quot;</span>&gt;</span>DE<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="symbol">&amp;nbsp;</span>|<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale !== &#x27;en&#x27;&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;changeLanguage(&#x27;en&#x27;)&quot;</span>&gt;</span>EN<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">strong</span> <span class="attr">v-if</span>=<span class="string">&quot;$i18n.locale === &#x27;en&#x27;&quot;</span>&gt;</span>EN<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;TranslationShowCase&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">changeLanguage</span>(<span class="params">lang</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.$i18n.locale = lang</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>It gets automatically saved to locize:<img src="locize_missing.jpg" title="locize © inweso GmbH"></p><p>Lastly, with the help of the <a href="https://docs.locize.com/whats-inside/auto-machine-translation">auto-machinetranslation workflow</a>, new keys not only gets added to locize automatically, while developing the app, but are also automatically translated into the target languages using machine translation:<img src="locize_autotranslate.jpg" title="locize © inweso GmbH"></p><p><img src="app_4.jpg" title="locize © inweso GmbH"></p><h4 id="👀-but-there-39-s-more"><a href="#👀-but-there-39-s-more" class="headerlink" title="👀 but there&#39;s more... "></a>👀 but there&#39;s more... <a name="more"></a></h4><p><a href="https://docs.locize.com/more/caching">Caching</a>:</p><p><img src="../react-i18next/caching.jpg" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/versioning#merging-versions">Merging versions</a>:</p><p><img src="../react-i18next/overwrite_version.jpg" title="locize © inweso GmbH"></p><p><em>🧑‍💻 The code can be found <a href="https://github.com/locize/locizer/tree/master/example/vue">here</a>.</em></p><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>I hope you’ve learned a few new things about <a href="https://vue-i18n.intlify.dev/">Vue.js localization</a> and <a href="https://locize.com/">modern localization workflows</a>.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth to try <a href="https://locize.com/">locize</a>.</p><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> translation </tag>
            
            <tag> vue </tag>
            
            <tag> vue-i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Localization - Internationalize with i18next</title>
      <link href="/blog/react-i18next/"/>
      <url>/blog/react-i18next/</url>
      
        <content type="html"><![CDATA[<p><img src="react-localization.jpg" alt="React Localization made easy with this step-by-step guide using i18next ✅" title="React Localization example"></p><p>Overcoming the language barrier for users who use your software is an important topic.English is no longer the universal language of the internet.As of <a href="https://www.internetworldstats.com/stats7.htm">March 2020</a>, only 25.9% of internet users were English speakers.The chances are high that your users will skip past your website if non-localized.Therefore, without a multilingual website you might missing out on a large share of potential users.</p><p>In the JavaScript ecosystem, there are a lot of internationalization frameworks. <a href="https://medium.com/@jamuhl/i18n-frameworks-the-unfair-showdown-8d436cd6f470">Here</a> you can find some details about some JavaScript internationalization frameworks.In this article, we will be using the <a href="https://www.i18next.com/">i18next</a> framework to internationalize a <a href="https://reactjs.org/">React.js</a> app. This step-by-step guide is for you if you&#39;re looking for a way to create an internationalized React.js app (with or without Create React App).</br><div style="margin-top: -25px;">Basically, we&#39;re going to answer the following question: <h2 style="display: inline; font-size: 18px;">&quot;How to use i18n in React?&quot;</h2></div></p><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><ul><li><a href="#why-i18next">So first of all: &quot;Why i18next?&quot;</a></li><li><a href="#start">Let&#39;s get into it...</a><ul><li><a href="#prerequisites">Prerequisites</a></li><li><a href="#getting-started">Getting started</a></li><li><a href="#language-switcher">Language Switcher</a><ul><li><a href="#current-language">How to get the current language?</a></li></ul></li><li><a href="#interpolation-pluralization">Interpolation and Pluralization</a></li><li><a href="#formatting">Formatting</a></li><li><a href="#context">Context</a></li><li><a href="#separate">Separate translations from code</a><ul><li><a href="#multiple-namespaces">Multiple namespaces</a></li></ul></li><li><a href="#better-translation-management">Better translation management</a><ul><li><a href="#for-sure">For sure!</a></li><li><a href="#how-look">How does this look like?</a></li><li><a href="#save-missing">save missing translations</a></li><li><a href="#more">👀 but there&#39;s more...</a></li><li><a href="#production">📦 Let&#39;s prepare for production 🚀</a></li></ul></li></ul></li><li><a href="#congratulations">🎉🥳 Congratulations 🎊🎁</a></li></ul><blockquote><p>Streamline your i18next setup process with this step-by-step guide. Get your localization framework up and running in no time and ensure smooth language transitions for your users. Follow the instructions and avoid any setup complications for your next international project.</p></blockquote><h2 id="So-first-of-all-quot-Why-i18next-quot"><a href="#So-first-of-all-quot-Why-i18next-quot" class="headerlink" title="So first of all: &quot;Why i18next?&quot; "></a>So first of all: &quot;Why i18next?&quot; <a name="why-i18next"></a></h2><p>When it comes to React localization, one of the most popular is <a href="https://www.i18next.com/">i18next</a> with its react extension <a href="https://react.i18next.com/">react-i18next</a>, and for good reasons:</p><p><em>i18next was created in late 2011. It&#39;s older than most of the libraries you will use nowadays, including your main frontend technology (React, <a href="../angular-i18next/">Angular</a>, <a href="../i18next-vue/">Vue</a>, ...).</em><br /><strong>➡️ sustainable</strong></p><p><em>Based on how long i18next already is available open source, there is no real i18n case that could not be solved with i18next.</em><br /><strong>➡️ mature</strong></p><p><em>i18next can be used in any javascript (and a few non-javascript - .net, elm, iOS, android, ruby, ...) environment, with any UI framework, with any i18n format, ... <a href="https://www.i18next.com/overview/supported-frameworks">the possibilities are endless</a>.</em><br /><strong>➡️ extensible</strong></p><p><em>There is a plenty of features and possibilities you&#39;ll get with i18next compared to other regular i18n frameworks.</em><br /><strong>➡️ rich</strong></p><p><a href="https://www.i18next.com/overview/comparison-to-others">Here</a> you can find more information about why i18next is special and <a href="https://locize.com/i18next.html#how-does-i18next-work">how it works</a>.</p><h2 id="Let-39-s-get-into-it-react-i18next"><a href="#Let-39-s-get-into-it-react-i18next" class="headerlink" title="Let&#39;s get into it (react-i18next)... "></a>Let&#39;s get into it <small style="font-size: 0.65em;">(react-i18next)</small>... <a name="start"></a></h2><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites "></a>Prerequisites <a name="prerequisites"></a></h3><p>Make sure you have Node.js and npm installed. It&#39;s best, if you have some experience with simple HTML, JavaScript and basic React.js, before jumping to <a href="https://react.i18next.com/">react-i18next</a> - the powerful <strong>React i18n</strong> framework. This react-i18next localization example is not intended to be a React beginner tutorial.</p><h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started "></a>Getting started <a name="getting-started"></a></h3><p>Take your own React project or create a new one, i.e. with <a href="https://create-react-app.dev/">create-react-app</a>.</p><p><code>npx create-react-app my-app</code></p><p><img src="app_0.jpg" alt="learn react logo" title="locize © inweso GmbH"></p><p>We are going to adapt the app to detect the language according to the user’s preference.And we will create a language switcher to make the content change between different languages.</p><p>Let&#39;s install some i18next dependencies:</p><ul><li><a href="https://www.i18next.com/">i18next</a></li><li><a href="https://react.i18next.com/">react-i18next</a></li><li><a href="https://github.com/i18next/i18next-browser-languageDetector">i18next-browser-languagedetector</a></li></ul><p><code>npm install i18next react-i18next i18next-browser-languagedetector</code></p><p>Let&#39;s prepare an <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="comment">// here we will place our translations...</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p>Let&#39;s import that file somewhere in our <code>index.js</code> file:</p><p>For React &gt;= 18.0.0 use:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import i18n (needs to be bundled ;))</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./i18n&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = createRoot(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line">root.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>For older React versions use:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import i18n (needs to be bundled ;))</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./i18n&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Now let&#39;s try to move some hard coded text out to the translations.</p><p>We have used the <a href="https://react.i18next.com/latest/trans-component">Trans component</a> for the first text and the <a href="https://react.i18next.com/latest/usetranslation-hook">useTranslation hook</a> for the second text:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation, Trans &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t &#125; = useTranslation();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;description.part1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            Edit <span class="tag">&lt;<span class="name">code</span>&gt;</span>src/App.js<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and save to reload.</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&quot;App-link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">href</span>=<span class="string">&quot;https://reactjs.org&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">rel</span>=<span class="string">&quot;noopener noreferrer&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">          &#123;t(&#x27;description.part2&#x27;)&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>There is some more effort necessary if you wish to use High-Order-Components (HOC). Another option in this situation is to use <a href="https://react.i18next.com/latest/withtranslation-hoc">withTranslation HOC</a>.</p><p>The texts are now part of the translation resources:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">description</span>: &#123;</span><br><span class="line">            <span class="attr">part1</span>: <span class="string">&#x27;Edit &lt;1&gt;src/App.js&lt;/1&gt; and save to reload.&#x27;</span>,</span><br><span class="line">            <span class="attr">part2</span>: <span class="string">&#x27;Learn React&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><h3 id="Language-Switcher"><a href="#Language-Switcher" class="headerlink" title="Language Switcher "></a>Language Switcher <a name="language-switcher"></a></h3><p>Now let&#39;s define a language switcher:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation, Trans &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lngs = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;English&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">de</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;Deutsch&#x27;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t, i18n &#125; = useTranslation();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;Object.keys(lngs).map((lng) =&gt; (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">key</span>=<span class="string">&#123;lng&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontWeight:</span> <span class="attr">i18n.resolvedLanguage</span> === <span class="string">lng</span> ? &#x27;<span class="attr">bold</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">normal</span>&#x27; &#125;&#125; <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> i18n.changeLanguage(lng)&#125;&gt;</span></span><br><span class="line"><span class="xml">              &#123;lngs[lng].nativeName&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          ))&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;description.part1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            Edit <span class="tag">&lt;<span class="name">code</span>&gt;</span>src/App.js<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and save to reload.</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&quot;App-link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">href</span>=<span class="string">&quot;https://reactjs.org&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">rel</span>=<span class="string">&quot;noopener noreferrer&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">          &#123;t(&#x27;description.part2&#x27;)&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>And also add some translations for the new language:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">description</span>: &#123;</span><br><span class="line">            <span class="attr">part1</span>: <span class="string">&#x27;Edit &lt;1&gt;src/App.js&lt;/1&gt; and save to reload.&#x27;</span>,</span><br><span class="line">            <span class="attr">part2</span>: <span class="string">&#x27;Learn React&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">de</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">description</span>: &#123;</span><br><span class="line">            <span class="attr">part1</span>: <span class="string">&#x27;Ändere &lt;1&gt;src/App.js&lt;/1&gt; und speichere um neu zu laden.&#x27;</span>,</span><br><span class="line">            <span class="attr">part2</span>: <span class="string">&#x27;Lerne React&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p><img src="app_1.jpg" alt="react language switcher" title="locize © inweso GmbH"></p><p><strong>🥳 Awesome, you&#39;ve just created your first language switcher!</strong></p><p>Thanks to <a href="https://github.com/i18next/i18next-browser-languageDetector">i18next-browser-languagedetector</a> now it tries to detect the browser language and automatically use that language if you&#39;ve provided the translations for it. The manually selected language in the language switcher is persisted in the localStorage, next time you visit the page, that language is used as preferred language.</p><h4 id="How-to-get-the-current-language"><a href="#How-to-get-the-current-language" class="headerlink" title="How to get the current language? "></a>How to get the current language? <a name="current-language"></a></h4><p>Since i18next v21 there is <a href="https://www.i18next.com/overview/api#resolvedlanguage"><code>i18next.resolvedLanguage</code></a>.It is set to the current resolved language and it can be used as primary used language, for example in a language switcher.</p><p>If your detected language for example is <code>en-US</code> and you provided translations only for <code>en</code> <em>(fallbackLng)</em> instead <code>i18next.resolvedLanguage</code> will return <code>en</code>.</p><h5 id="i18next-language-vs-i18next-languages-vs-i18next-resolvedLanguage"><a href="#i18next-language-vs-i18next-languages-vs-i18next-resolvedLanguage" class="headerlink" title="i18next.language vs. i18next.languages vs. i18next.resolvedLanguage"></a>i18next.language vs. i18next.languages vs. i18next.resolvedLanguage</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* language */</span></span><br><span class="line">i18next.language;</span><br><span class="line"><span class="comment">// Is set to the current detected or set language.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* languages */</span></span><br><span class="line">i18next.languages;</span><br><span class="line"><span class="comment">// Is set to an array of language codes that will be used to look up the translation value.</span></span><br><span class="line"><span class="comment">// When the language is set, this array is populated with the new language codes.</span></span><br><span class="line"><span class="comment">// Unless overridden, this array is populated with less-specific versions of that code for fallback purposes, followed by the list of fallback languages</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize with fallback languages</span></span><br><span class="line">i18next.init(&#123;</span><br><span class="line">  <span class="attr">fallbackLng</span>: [<span class="string">&quot;es&quot;</span>, <span class="string">&quot;fr&quot;</span>, <span class="string">&quot;en-US&quot;</span>, <span class="string">&quot;dev&quot;</span>]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// change the language</span></span><br><span class="line">i18next.changeLanguage(<span class="string">&quot;en-US-xx&quot;</span>);</span><br><span class="line"><span class="comment">// new language and its more generic forms, followed by fallbacks</span></span><br><span class="line">i18next.languages; <span class="comment">// [&quot;en-US-xx&quot;, &quot;en-US&quot;, &quot;en&quot;, &quot;es&quot;, &quot;fr&quot;, &quot;dev&quot;]</span></span><br><span class="line"><span class="comment">// change the language again</span></span><br><span class="line">i18next.changeLanguage(<span class="string">&quot;de-DE&quot;</span>);</span><br><span class="line"><span class="comment">// previous language is not retained</span></span><br><span class="line">i18next.languages; <span class="comment">// [&quot;de-DE&quot;, &quot;de&quot;, &quot;es&quot;, &quot;fr&quot;, &quot;en-US&quot;, &quot;dev&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* resolvedLanguage */</span></span><br><span class="line">i18next.resolvedLanguage;</span><br><span class="line"><span class="comment">// Is set to the current resolved language.</span></span><br><span class="line"><span class="comment">// It can be used as primary used language,</span></span><br><span class="line"><span class="comment">// for example in a language switcher.</span></span><br></pre></td></tr></table></figure><h3 id="Interpolation-and-Pluralization"><a href="#Interpolation-and-Pluralization" class="headerlink" title="Interpolation and Pluralization "></a>Interpolation and Pluralization <a name="interpolation-pluralization"></a></h3><p>i18next goes beyond just providing the standard i18n features.But for sure it&#39;s able to handle <a href="https://www.i18next.com/translation-function/plurals">plurals</a> and <a href="https://www.i18next.com/translation-function/interpolation">interpolation</a>.</p><p>Let&#39;s count each time the language gets changed:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation, Trans &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lngs = &#123;</span><br><span class="line">  <span class="attr">en</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;English&#x27;</span> &#125;,</span><br><span class="line">  <span class="attr">de</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;Deutsch&#x27;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t, i18n &#125; = useTranslation();</span><br><span class="line">  <span class="keyword">const</span> [count, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;Object.keys(lngs).map((lng) =&gt; (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">key</span>=<span class="string">&#123;lng&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontWeight:</span> <span class="attr">i18n.resolvedLanguage</span> === <span class="string">lng</span> ? &#x27;<span class="attr">bold</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">normal</span>&#x27; &#125;&#125; <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">              i18n.changeLanguage(lng);</span></span><br><span class="line"><span class="xml">              setCounter(count + 1);</span></span><br><span class="line"><span class="xml">            &#125;&#125;&gt;</span></span><br><span class="line"><span class="xml">              &#123;lngs[lng].nativeName&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          ))&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;t(&#x27;counter&#x27;, &#123; count &#125;)&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;description.part1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            Edit <span class="tag">&lt;<span class="name">code</span>&gt;</span>src/App.js<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and save to reload.</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&quot;App-link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">href</span>=<span class="string">&quot;https://reactjs.org&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">rel</span>=<span class="string">&quot;noopener noreferrer&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">          &#123;t(&#x27;description.part2&#x27;)&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>...and extending the translation resources:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">description</span>: &#123;</span><br><span class="line">            <span class="attr">part1</span>: <span class="string">&#x27;Edit &lt;1&gt;src/App.js&lt;/1&gt; and save to reload.&#x27;</span>,</span><br><span class="line">            <span class="attr">part2</span>: <span class="string">&#x27;Learn React&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">counter_one</span>: <span class="string">&#x27;Changed language just once&#x27;</span>,</span><br><span class="line">          <span class="attr">counter_other</span>: <span class="string">&#x27;Changed language already &#123;&#123;count&#125;&#125; times&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">de</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">description</span>: &#123;</span><br><span class="line">            <span class="attr">part1</span>: <span class="string">&#x27;Ändere &lt;1&gt;src/App.js&lt;/1&gt; und speichere um neu zu laden.&#x27;</span>,</span><br><span class="line">            <span class="attr">part2</span>: <span class="string">&#x27;Lerne React&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">counter_one</span>: <span class="string">&#x27;Die Sprache wurde erst ein mal gewechselt&#x27;</span>,</span><br><span class="line">          <span class="attr">counter_other</span>: <span class="string">&#x27;Die Sprache wurde &#123;&#123;count&#125;&#125; mal gewechselt&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p>Based on the count value i18next will choose the correct plural form.Read more about <a href="https://www.i18next.com/translation-function/plurals">pluralization</a> and <a href="https://www.i18next.com/translation-function/interpolation">interpolation</a> in the <a href="https://www.i18next.com/">official i18next documentation</a>.</p><p><img src="app_2.jpg" alt="react pluralization" title="locize © inweso GmbH"></p><p><em>💡 i18next is also able to handle languages with multiple plural forms, like arabic:</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// translation resources:</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;key_zero&quot;</span>: <span class="string">&quot;zero&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_one&quot;</span>: <span class="string">&quot;singular&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_two&quot;</span>: <span class="string">&quot;two&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_few&quot;</span>: <span class="string">&quot;few&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_many&quot;</span>: <span class="string">&quot;many&quot;</span>,</span><br><span class="line">  <span class="string">&quot;key_other&quot;</span>: <span class="string">&quot;other&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage:</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;); <span class="comment">// -&gt; &quot;zero&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">1</span>&#125;); <span class="comment">// -&gt; &quot;singular&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">2</span>&#125;); <span class="comment">// -&gt; &quot;two&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">3</span>&#125;); <span class="comment">// -&gt; &quot;few&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">4</span>&#125;); <span class="comment">// -&gt; &quot;few&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">5</span>&#125;); <span class="comment">// -&gt; &quot;few&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">11</span>&#125;); <span class="comment">// -&gt; &quot;many&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">99</span>&#125;); <span class="comment">// -&gt; &quot;many&quot;</span></span><br><span class="line">t(<span class="string">&#x27;key&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">100</span>&#125;); <span class="comment">// -&gt; &quot;other&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Why-are-my-plural-keys-not-working"><a href="#Why-are-my-plural-keys-not-working" class="headerlink" title="Why are my plural keys not working? "></a>Why are my plural keys not working? <a name="pluralsv4"></a></h4><p>Are you seeing this warning in the development console (<code>debug: true</code>)?</p><blockquote><p>i18next::pluralResolver: Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.</p></blockquote><p>With <a href="https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0">v21</a> i18next streamlined the suffix with the one used in the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/PluralRules">Intl API</a>.In environments where the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules">Intl.PluralRules</a> API  is not available (like older Android devices), you may need to <a href="https://github.com/eemeli/intl-pluralrules">polyfill</a> the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules">Intl.PluralRules</a> API.In case it is not available it will fallback to the <a href="https://www.i18next.com/misc/json-format#i-18-next-json-v3">i18next JSON format v3</a> plural handling. And if your json is already using the new suffixes, your plural keys will probably not be shown.</p><p><em>tldr;</em></p><p><code>npm install intl-pluralrules</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;intl-pluralrules&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting "></a>Formatting <a name="formatting"></a></h3><p>Now, let’s check out how we can use different date formats with the help of <a href="https://www.i18next.com/">i18next</a> and <a href="https://moment.github.io/luxon">Luxon</a> to handle date and time.</p><p><code>npm install luxon</code></p><p>We like to have a footer displaying the current date:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Footer.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Footer = <span class="function">(<span class="params">&#123; t &#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;t(&#x27;footer.date&#x27;, &#123; date: new Date() &#125;)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Footer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// imported in our App.js and used like this</span></span><br><span class="line"><span class="comment">// &lt;Footer t=&#123;t&#125; /&gt;</span></span><br></pre></td></tr></table></figure><p>import luxon and define a format function, like documented in the <a href="https://www.i18next.com/translation-function/formatting">documentation</a> and add the new translation key:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DateTime &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">      <span class="comment">// format: (value, format, lng) =&gt; &#123; // legacy usage</span></span><br><span class="line">      <span class="comment">//   if (value instanceof Date) &#123;</span></span><br><span class="line">      <span class="comment">//     return DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime[format])</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">//   return value;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">description</span>: &#123;</span><br><span class="line">            <span class="attr">part1</span>: <span class="string">&#x27;Edit &lt;1&gt;src/App.js&lt;/1&gt; and save to reload.&#x27;</span>,</span><br><span class="line">            <span class="attr">part2</span>: <span class="string">&#x27;Learn React&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">counter_one</span>: <span class="string">&#x27;Changed language just once&#x27;</span>,</span><br><span class="line">          <span class="attr">counter_other</span>: <span class="string">&#x27;Changed language already &#123;&#123;count&#125;&#125; times&#x27;</span>,</span><br><span class="line">          <span class="attr">footer</span>: &#123;</span><br><span class="line">            <span class="attr">date</span>: <span class="string">&#x27;Today is &#123;&#123;date, DATE_HUGE&#125;&#125;&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">de</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">description</span>: &#123;</span><br><span class="line">            <span class="attr">part1</span>: <span class="string">&#x27;Ändere &lt;1&gt;src/App.js&lt;/1&gt; und speichere um neu zu laden.&#x27;</span>,</span><br><span class="line">            <span class="attr">part2</span>: <span class="string">&#x27;Lerne React&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">counter_one</span>: <span class="string">&#x27;Die Sprache wurde erst ein mal gewechselt&#x27;</span>,</span><br><span class="line">          <span class="attr">counter_other</span>: <span class="string">&#x27;Die Sprache wurde &#123;&#123;count&#125;&#125; mal gewechselt&#x27;</span>,</span><br><span class="line">          <span class="attr">footer</span>: &#123;</span><br><span class="line">            <span class="attr">date</span>: <span class="string">&#x27;Heute ist &#123;&#123;date, DATE_HUGE&#125;&#125;&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new usage</span></span><br><span class="line">i18n.services.formatter.add(<span class="string">&#x27;DATE_HUGE&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime.DATE_HUGE)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p><strong>😎 Cool, now we have a language specific date formatting!</strong></p><p>English:<img src="app_3.jpg" alt="react english" title="locize © inweso GmbH"></p><p>German:<img src="app_4.jpg" alt="react german" title="locize © inweso GmbH"></p><h3 id="Context"><a href="#Context" class="headerlink" title="Context "></a>Context <a name="context"></a></h3><p>What about a specific greeting message based on the current day time? i.e. morning, evening, etc.This is possible thanks to the <a href="https://www.i18next.com/translation-function/context">context</a> feature of i18next.</p><p>Let&#39;s create a <code>getGreetingTime</code> function and use the result as context information for our footer translation:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; DateTime &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./Footer.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getGreetingTime = <span class="function">(<span class="params">d = DateTime.now()</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> split_afternoon = <span class="number">12</span>; <span class="comment">// 24hr time to split the afternoon</span></span><br><span class="line"><span class="keyword">const</span> split_evening = <span class="number">17</span>; <span class="comment">// 24hr time to split the evening</span></span><br><span class="line"><span class="keyword">const</span> currentHour = <span class="built_in">parseFloat</span>(d.toFormat(<span class="string">&#x27;hh&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (currentHour &gt;= split_afternoon &amp;&amp; currentHour &lt;= split_evening) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;afternoon&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentHour &gt;= split_evening) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;evening&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;morning&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Footer = <span class="function">(<span class="params">&#123; t &#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;Footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;t(&#x27;footer.date&#x27;, &#123; date: new Date(), context: getGreetingTime() &#125;)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Footer;</span><br></pre></td></tr></table></figure><p>And add some context specific translations keys:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-http-backend&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DateTime &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  <span class="comment">// i18next-http-backend</span></span><br><span class="line">  <span class="comment">// loads translations from your server</span></span><br><span class="line">  <span class="comment">// https://github.com/i18next/i18next-http-backend</span></span><br><span class="line">  .use(Backend)</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">      <span class="comment">// format: (value, format, lng) =&gt; &#123; // legacy usage</span></span><br><span class="line">      <span class="comment">//   if (value instanceof Date) &#123;</span></span><br><span class="line">      <span class="comment">//     return DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime[format])</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">//   return value;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resources</span>: &#123;</span><br><span class="line">      <span class="attr">en</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">description</span>: &#123;</span><br><span class="line">            <span class="attr">part1</span>: <span class="string">&#x27;Edit &lt;1&gt;src/App.js&lt;/1&gt; and save to reload.&#x27;</span>,</span><br><span class="line">            <span class="attr">part2</span>: <span class="string">&#x27;Learn React&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">counter_one</span>: <span class="string">&#x27;Changed language just once&#x27;</span>,</span><br><span class="line">          <span class="attr">counter_other</span>: <span class="string">&#x27;Changed language already &#123;&#123;count&#125;&#125; times&#x27;</span>,</span><br><span class="line">          <span class="attr">footer</span>: &#123;</span><br><span class="line">            <span class="attr">date</span>: <span class="string">&#x27;Today is &#123;&#123;date, DATE_HUGE&#125;&#125;&#x27;</span>,</span><br><span class="line">            <span class="attr">date_morning</span>: <span class="string">&#x27;Good morning! Today is &#123;&#123;date, DATE_HUGE&#125;&#125; | Have a nice day!&#x27;</span>,</span><br><span class="line">            <span class="attr">date_afternoon</span>: <span class="string">&#x27;Good afternoon! It\&#x27;s &#123;&#123;date, DATE_HUGE&#125;&#125;&#x27;</span>,</span><br><span class="line">            <span class="attr">date_evening</span>: <span class="string">&#x27;Good evening! Today was the &#123;&#123;date, DATE_HUGE&#125;&#125;&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">de</span>: &#123;</span><br><span class="line">        <span class="attr">translation</span>: &#123;</span><br><span class="line">          <span class="attr">description</span>: &#123;</span><br><span class="line">            <span class="attr">part1</span>: <span class="string">&#x27;Ändere &lt;1&gt;src/App.js&lt;/1&gt; und speichere um neu zu laden.&#x27;</span>,</span><br><span class="line">            <span class="attr">part2</span>: <span class="string">&#x27;Lerne React&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">counter_one</span>: <span class="string">&#x27;Die Sprache wurde erst ein mal gewechselt&#x27;</span>,</span><br><span class="line">          <span class="attr">counter_other</span>: <span class="string">&#x27;Die Sprache wurde &#123;&#123;count&#125;&#125; mal gewechselt&#x27;</span>,</span><br><span class="line">          <span class="attr">footer</span>: &#123;</span><br><span class="line">            <span class="attr">date</span>: <span class="string">&#x27;Heute ist &#123;&#123;date, DATE_HUGE&#125;&#125;&#x27;</span>,</span><br><span class="line">            <span class="attr">date_morning</span>: <span class="string">&#x27;Guten Morgen! Heute ist &#123;&#123;date, DATE_HUGE&#125;&#125; | Wünsche einen schönen Tag!&#x27;</span>,</span><br><span class="line">            <span class="attr">date_afternoon</span>: <span class="string">&#x27;Guten Tag! Es ist &#123;&#123;date, DATE_HUGE&#125;&#125;&#x27;</span>,</span><br><span class="line">            <span class="attr">date_evening</span>: <span class="string">&#x27;Guten Abend! Heute war &#123;&#123;date, DATE_HUGE&#125;&#125;&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new usage</span></span><br><span class="line">i18n.services.formatter.add(<span class="string">&#x27;DATE_HUGE&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime.DATE_HUGE)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p><strong>😁 Yeah, It works!</strong></p><p><img src="app_5.jpg" alt="react translations" title="locize © inweso GmbH"></p><h3 id="Separate-translations-from-code"><a href="#Separate-translations-from-code" class="headerlink" title="Separate translations from code "></a>Separate translations from code <a name="separate"></a></h3><p>Having the translations in our <code>i18n.js</code> file works, but is not that suitable to work with, for translators.Let&#39;s separate the translations from the code and pleace them in dedicated json files.</p><p>Because this is a web application, <a href="https://github.com/i18next/i18next-http-backend">i18next-http-backend</a> will help us to do so.</p><p><code>npm install i18next-http-backend</code></p><p>Move the translations to the public folder:</p><p><img src="public_locales.jpg" alt="public locales" title="locize © inweso GmbH"></p><p>Adapt the <code>i18n.js</code> file to use the <code>i18next-http-backend</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-http-backend&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DateTime &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  <span class="comment">// i18next-http-backend</span></span><br><span class="line">  <span class="comment">// loads translations from your server</span></span><br><span class="line">  <span class="comment">// https://github.com/i18next/i18next-http-backend</span></span><br><span class="line">  .use(Backend)</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">      <span class="comment">// format: (value, format, lng) =&gt; &#123; // legacy usage</span></span><br><span class="line">      <span class="comment">//   if (value instanceof Date) &#123;</span></span><br><span class="line">      <span class="comment">//     return DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime[format])</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">//   return value;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new usage</span></span><br><span class="line">i18n.services.formatter.add(<span class="string">&#x27;DATE_HUGE&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime.DATE_HUGE)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p>Now the translations are loaded asynchronously, so make sure you wrap your app with a <a href="https://reactjs.org/docs/react-api.html#reactsuspense">Suspense</a> component to prevent this error: <code>Uncaught Error: App suspended while rendering, but no fallback UI was specified.</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Suspense &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// your app&#x27;s code...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// here app catches the suspense from page in case translations are not yet loaded</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">WrappedApp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&quot;...is loading&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now your app looks still the same, but your translations are separated.If you want to support a new language, you just create a new folder and a new translation json file.This gives you the possibility to send the translations to some translators.Or if you&#39;re working with a <a href="../tms/" title="translation management systems">translation management system</a> you can just <a href="https://github.com/locize/react-tutorial#use-the-locize-cli">synchronize the files with a cli</a>.</p><p><em>🧑‍💻 The code of this first part can be found <a href="https://github.com/locize/react-i18next-example-app/tree/i18next">here</a>.</em></p><h4 id="Multiple-namespaces"><a href="#Multiple-namespaces" class="headerlink" title="Multiple namespaces "></a>Multiple namespaces <a name="multiple-namespaces"></a></h4><p><em>💡 btw: you can also have <a href="https://react.i18next.com/guides/multiple-translation-files">multiple translation files</a> thanks to the <a href="https://www.i18next.com/principles/namespaces">namespaces</a> feature of i18next</em></p><p>One of the advantages of react-i18next is based on i18next, it supports the separation of translations into multiple files - which are called namespaces in i18next.</p><p>In order to use multiple namespaces/translation files, you need to specify it when calling <a href="https://react.i18next.com/latest/usetranslation-hook"><code>useTranslation</code></a>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; t &#125; = useTranslation([<span class="string">&#x27;translation&#x27;</span>, <span class="string">&#x27;common&#x27;</span>]);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// t(&#x27;look.deep&#x27;, &#123; ns: &#x27;common&#x27; &#125;)</span></span><br></pre></td></tr></table></figure><p><a href="https://react.i18next.com/latest/withtranslation-hoc"><code>withTranslation</code></a>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">withTranslation([<span class="string">&#x27;translation&#x27;</span>, <span class="string">&#x27;common&#x27;</span>])(MyComponent);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// t(&#x27;look.deep&#x27;, &#123; ns: &#x27;common&#x27; &#125;)</span></span><br></pre></td></tr></table></figure><p>or <a href="https://react.i18next.com/latest/translation-render-prop"><code>Translation</code></a>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Translation ns=&#123;[<span class="string">&#x27;translation&#x27;</span>, <span class="string">&#x27;common&#x27;</span>]&#125;&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function">(<span class="params">t</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;t(&#x27;look.deep&#x27;, &#123; ns: &#x27;common&#x27; &#125;)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/Translation&gt;</span><br></pre></td></tr></table></figure><h3 id="Better-translation-management"><a href="#Better-translation-management" class="headerlink" title="Better translation management "></a>Better translation management <a name="better-translation-management"></a></h3><p>By sending the translations to some translators or translator agency you have more control and a direct contact with them. But this also means more work for you.This is a traditional way. But be aware sending files around creates always an overhead.</p><blockquote><p>Does a better option exist?</p></blockquote><h4 id="For-sure"><a href="#For-sure" class="headerlink" title="For sure! "></a>For sure! <a name="for-sure"></a></h4><p><a href="https://www.i18next.com/">i18next</a> helps to get the application translated, and this is great - but there is more to it.</p><ul><li>How do you integrate any translation services / agency?</li><li>How do you keep track of new or removed content?</li><li>How do you handle proper versioning?</li><li>How do you deploy translation changes without deploying your complete application?</li><li>and a lot more...</li></ul><p><strong>Looking for something like this❓</strong></p><ul><li><a href="https://docs.locize.com/integration/instrumenting-your-code#i-18-next">Easy to integrate</a></li><li>Continuous deployment? <a href="https://locize.com/how-it-works.html#continouslocalization">Continuous localization</a>!</li><li>Manage the translation files with ease</li><li><a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators">Order professional translations</a></li><li>Analytics &amp; Statistics</li><li><a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">Profit from our content delivery network (CDN)</a></li><li><a href="https://docs.locize.com/more/versioning">Versioning of your translations</a></li><li><a href="https://docs.locize.com/whats-inside/auto-machine-translation">Automatic and On-Demand Machine Translation</a></li><li><a href="https://docs.locize.com/more/general-questions/how-is-locize-different-from-the-alternatives#service-lock-in">Riskfree: Take your data with you</a></li><li><a href="https://locize.com/pricing.html">Transparent and fair pricing</a></li><li>and a lot more...</li></ul><p><img src="transform_your_localization_process_small.jpg" alt="transform the localization process" title="locize © inweso GmbH"></p><h4 id="How-does-this-look-like"><a href="#How-does-this-look-like" class="headerlink" title="How does this look like? "></a>How does this look like? <a name="how-look"></a></h4><p>First you need to signup at <a href="https://locize.app/register">locize</a> and <a href="https://docs.locize.com/integration/getting-started/create-a-user-account">login</a>.Then <a href="https://docs.locize.com/integration/getting-started/add-a-new-project">create a new project</a> in locize and add your translations. You can add your translations either by using the <a href="https://github.com/locize/react-tutorial#use-the-locize-cli">cli</a> or by <a href="https://docs.locize.com/more/general-questions/how-to-import-translations-from-a-file">importing the individual json files</a> or via <a href="https://docs.locize.com/integration/api#update-remove-translations">API</a>.</p><p>Done so, we&#39;re going to replace <a href="https://github.com/i18next/i18next-http-backend">i18next-http-backend</a> with <a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a>.</p><p><code>npm install i18next-locize-backend</code></p><p>After having imported the translations to locize, delete the locales folder:</p><p><img src="public_locales_removed.jpg" alt="public locales removed" title="locize © inweso GmbH"></p><p>Adapt the <code>i18n.js</code> file to use the <code>i18next-locize-backend</code> and make sure you copy the project-id and api-key from within your locize project:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DateTime &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;0bbc223a-9aba-4a90-ab93-ab9d7bf7f780&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;aaad4141-54ba-4625-ae37-657538fe29e7&#x27;</span>, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">referenceLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  <span class="comment">// i18next-locize-backend</span></span><br><span class="line">  <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">  <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">  .use(Backend)</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">      <span class="comment">// format: (value, format, lng) =&gt; &#123; // legacy usage</span></span><br><span class="line">      <span class="comment">//   if (value instanceof Date) &#123;</span></span><br><span class="line">      <span class="comment">//     return DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime[format])</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">//   return value;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">backend</span>: locizeOptions</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new usage</span></span><br><span class="line">i18n.services.formatter.add(<span class="string">&#x27;DATE_HUGE&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime.DATE_HUGE)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/locize/i18next-locize-backend">i18next-locize-backend</a> offers a functionality to retrieve the available languages directly from locize, let&#39;s use it:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./logo.svg&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useTranslation, Trans &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState, Suspense, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">&#x27;./Footer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; t, i18n &#125; = useTranslation();</span><br><span class="line">  <span class="keyword">const</span> [count, setCounter] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [lngs, setLngs] = useState(&#123; <span class="attr">en</span>: &#123; <span class="attr">nativeName</span>: <span class="string">&#x27;English&#x27;</span> &#125;&#125;);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    i18n.services.backendConnector.backend.getLanguages(<span class="function">(<span class="params">err, ret</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="comment">// <span class="doctag">TODO:</span> handle err...</span></span><br><span class="line">      setLngs(ret);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;App-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">className</span>=<span class="string">&quot;App-logo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;Object.keys(lngs).map((lng) =&gt; (</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">key</span>=<span class="string">&#123;lng&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">fontWeight:</span> <span class="attr">i18n.resolvedLanguage</span> === <span class="string">lng</span> ? &#x27;<span class="attr">bold</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">normal</span>&#x27; &#125;&#125; <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">              i18n.changeLanguage(lng);</span></span><br><span class="line"><span class="xml">              setCounter(count + 1);</span></span><br><span class="line"><span class="xml">            &#125;&#125;&gt;</span></span><br><span class="line"><span class="xml">              &#123;lngs[lng].nativeName&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          ))&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;t(&#x27;counter&#x27;, &#123; count &#125;)&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Trans</span> <span class="attr">i18nKey</span>=<span class="string">&quot;description.part1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            Edit <span class="tag">&lt;<span class="name">code</span>&gt;</span>src/App.js<span class="tag">&lt;/<span class="name">code</span>&gt;</span> and save to reload.</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Trans</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">className</span>=<span class="string">&quot;App-link&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">href</span>=<span class="string">&quot;https://reactjs.org&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">rel</span>=<span class="string">&quot;noopener noreferrer&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        &gt;</span></span></span><br><span class="line"><span class="xml">          &#123;t(&#x27;description.part2&#x27;)&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Footer</span> <span class="attr">t</span>=<span class="string">&#123;t&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// here app catches the suspense from page in case translations are not yet loaded</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">WrappedApp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&quot;...is loading&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="save-missing-translations"><a href="#save-missing-translations" class="headerlink" title="save missing translations "></a>save missing translations <a name="save-missing"></a></h4><p>Thanks to the use of the <a href="https://www.i18next.com/overview/configuration-options#missing-keys">saveMissing functionality</a>, new keys gets added to locize automatically, while developing the app.</p><p>Just pass <code>saveMissing: true</code> in the i18next options:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DateTime &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;0bbc223a-9aba-4a90-ab93-ab9d7bf7f780&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;aaad4141-54ba-4625-ae37-657538fe29e7&#x27;</span>, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">referenceLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  <span class="comment">// i18next-locize-backend</span></span><br><span class="line">  <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">  <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">  .use(Backend)</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">      <span class="comment">// format: (value, format, lng) =&gt; &#123; // legacy usage</span></span><br><span class="line">      <span class="comment">//   if (value instanceof Date) &#123;</span></span><br><span class="line">      <span class="comment">//     return DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime[format])</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">//   return value;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">    <span class="attr">saveMissing</span>: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new usage</span></span><br><span class="line">i18n.services.formatter.add(<span class="string">&#x27;DATE_HUGE&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime.DATE_HUGE)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p>Each time you&#39;ll use a new key, it will be sent to locize, i.e.:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;t(<span class="string">&#x27;new.key&#x27;</span>, <span class="string">&#x27;this will be added automatically&#x27;</span>)&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>will result in locize like this:</p><p><img src="missing_key.jpg" alt="missing key" title="locize © inweso GmbH"></p><h4 id="👀-but-there-39-s-more"><a href="#👀-but-there-39-s-more" class="headerlink" title="👀 but there&#39;s more... "></a>👀 but there&#39;s more... <a name="more"></a></h4><p>Thanks to the <a href="https://github.com/locize/locize-lastused">locize-lastused</a> plugin, you&#39;ll be able to <a href="https://docs.locize.com/guides-tips-and-tricks/unused-translations">find and filter in locize which keys are used or not used anymore</a>.</p><p>With the help of the <a href="https://github.com/locize/locize">locize</a> plugin, you&#39;ll be able to use your app within the locize <a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>.</p><p>Lastly, with the help of the <a href="https://docs.locize.com/whats-inside/auto-machine-translation">auto-machinetranslation workflow</a> and the use of the <a href="https://www.i18next.com/overview/configuration-options#missing-keys">saveMissing functionality</a>, new keys not only gets added to locize automatically, while developing the app, but are also automatically translated into the target languages using machine translation.</p><p><em>Check out this <a href="https://youtu.be/VfxBpSXarlU">video</a> to see how the automatic machine translation workflow looks like!</em></p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/VfxBpSXarlU" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><code>npm install locize-lastused locize</code></p><p>use them in <code>i18n.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LastUsed <span class="keyword">from</span> <span class="string">&#x27;locize-lastused&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; locizePlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DateTime &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: <span class="string">&#x27;0bbc223a-9aba-4a90-ab93-ab9d7bf7f780&#x27;</span>,</span><br><span class="line">  <span class="attr">apiKey</span>: <span class="string">&#x27;aaad4141-54ba-4625-ae37-657538fe29e7&#x27;</span>, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">referenceLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  <span class="comment">// locize-lastused</span></span><br><span class="line">  <span class="comment">// sets a timestamp of last access on every translation segment on locize</span></span><br><span class="line">  <span class="comment">// -&gt; safely remove the ones not being touched for weeks/months</span></span><br><span class="line">  <span class="comment">// https://github.com/locize/locize-lastused</span></span><br><span class="line">  .use(LastUsed)</span><br><span class="line">  <span class="comment">// locize-editor</span></span><br><span class="line">  <span class="comment">// InContext Editor of locize</span></span><br><span class="line">  .use(locizePlugin)</span><br><span class="line">  <span class="comment">// i18next-locize-backend</span></span><br><span class="line">  <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">  <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">  .use(Backend)</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">      <span class="comment">// format: (value, format, lng) =&gt; &#123; // legacy usage</span></span><br><span class="line">      <span class="comment">//   if (value instanceof Date) &#123;</span></span><br><span class="line">      <span class="comment">//     return DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime[format])</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">//   return value;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">    <span class="attr">locizeLastUsed</span>: locizeOptions,</span><br><span class="line">    <span class="attr">saveMissing</span>: <span class="literal">true</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new usage</span></span><br><span class="line">i18n.services.formatter.add(<span class="string">&#x27;DATE_HUGE&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime.DATE_HUGE)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p><a href="https://docs.locize.com/whats-inside/auto-machine-translation">Automatic machine translation</a>:</p><p><img src="missing_key_auto_mt.jpg" alt="missing key auto" title="locize © inweso GmbH"></p><p><a href="(https://docs.locize.com/guides-tips-and-tricks/unused-translations)">Last used translations filter</a>:</p><p><img src="last_used.jpg" alt="i18next last used" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/incontext-editor">InContext Editor</a>:</p><p><img src="in_context.jpg" alt="i18next incontext" title="locize © inweso GmbH"></p><h4 id="📦-Let-39-s-prepare-for-production-🚀"><a href="#📦-Let-39-s-prepare-for-production-🚀" class="headerlink" title="📦 Let&#39;s prepare for production 🚀 "></a>📦 Let&#39;s prepare for production 🚀 <a name="production"></a></h4><p>Now, we prepare the app for <a href="https://docs.locize.com/guides-tips-and-tricks/going-production">going to production</a>.</p><p>First in locize, create a dedicated version for production. Do not enable auto publish for that version but publish manually or via <a href="https://docs.locize.com/integration/api#publish-version">API</a> or via <a href="https://github.com/locize/locize-cli#publish-version">CLI</a>.Lastly, <a href="https://docs.locize.com/more/caching">enable Cache-Control max-age​</a> for that production version.</p><p>Let&#39;s making use of the <a href="https://create-react-app.dev/docs/adding-custom-environment-variables/">environment feature of react-scripts</a>.</p><p>Lets&#39; create a default environment file and one for development and one for production:</p><p><code>.env</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SKIP_PREFLIGHT_CHECK=true</span><br><span class="line"></span><br><span class="line">REACT_APP_VERSION=$npm_package_version</span><br><span class="line"></span><br><span class="line">## locize</span><br><span class="line">REACT_APP_LOCIZE_PROJECTID=0bbc223a-9aba-4a90-ab93-ab9d7bf7f780</span><br><span class="line">REACT_APP_LOCIZE_REFLNG=en</span><br></pre></td></tr></table></figure><p><code>.env.development</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_LOCIZE_VERSION=latest</span><br><span class="line">REACT_APP_LOCIZE_APIKEY=aaad4141-54ba-4625-ae37-657538fe29e7</span><br></pre></td></tr></table></figure><p><code>.env.production</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_LOCIZE_VERSION=production</span><br></pre></td></tr></table></figure><p>Now let&#39;s adapt the <code>i18n.js</code> file:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initReactI18next &#125; <span class="keyword">from</span> <span class="string">&#x27;react-i18next&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LanguageDetector <span class="keyword">from</span> <span class="string">&#x27;i18next-browser-languagedetector&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Backend <span class="keyword">from</span> <span class="string">&#x27;i18next-locize-backend&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LastUsed <span class="keyword">from</span> <span class="string">&#x27;locize-lastused&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; locizePlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DateTime &#125; <span class="keyword">from</span> <span class="string">&#x27;luxon&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isProduction = process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locizeOptions = &#123;</span><br><span class="line">  <span class="attr">projectId</span>: process.env.REACT_APP_LOCIZE_PROJECTID,</span><br><span class="line">  <span class="attr">apiKey</span>: process.env.REACT_APP_LOCIZE_APIKEY, <span class="comment">// YOU should not expose your apps API key to production!!!</span></span><br><span class="line">  <span class="attr">referenceLng</span>: process.env.REACT_APP_LOCIZE_REFLNG,</span><br><span class="line">  <span class="attr">version</span>: process.env.REACT_APP_LOCIZE_VERSION</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isProduction) &#123;</span><br><span class="line">  <span class="comment">// locize-lastused</span></span><br><span class="line">  <span class="comment">// sets a timestamp of last access on every translation segment on locize</span></span><br><span class="line">  <span class="comment">// -&gt; safely remove the ones not being touched for weeks/months</span></span><br><span class="line">  <span class="comment">// https://github.com/locize/locize-lastused</span></span><br><span class="line">  i18n.use(LastUsed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i18n</span><br><span class="line">  <span class="comment">// locize-editor</span></span><br><span class="line">  <span class="comment">// InContext Editor of locize</span></span><br><span class="line">  .use(locizePlugin)</span><br><span class="line">  <span class="comment">// i18next-locize-backend</span></span><br><span class="line">  <span class="comment">// loads translations from your project, saves new keys to it (saveMissing: true)</span></span><br><span class="line">  <span class="comment">// https://github.com/locize/i18next-locize-backend</span></span><br><span class="line">  .use(Backend)</span><br><span class="line">  <span class="comment">// detect user language</span></span><br><span class="line">  <span class="comment">// learn more: https://github.com/i18next/i18next-browser-languageDetector</span></span><br><span class="line">  .use(LanguageDetector)</span><br><span class="line">  <span class="comment">// pass the i18n instance to react-i18next.</span></span><br><span class="line">  .use(initReactI18next)</span><br><span class="line">  <span class="comment">// init i18next</span></span><br><span class="line">  <span class="comment">// for all options read: https://www.i18next.com/overview/configuration-options</span></span><br><span class="line">  .init(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">    <span class="attr">interpolation</span>: &#123;</span><br><span class="line">      <span class="attr">escapeValue</span>: <span class="literal">false</span>, <span class="comment">// not needed for react as it escapes by default</span></span><br><span class="line">      <span class="comment">// format: (value, format, lng) =&gt; &#123; // legacy usage</span></span><br><span class="line">      <span class="comment">//   if (value instanceof Date) &#123;</span></span><br><span class="line">      <span class="comment">//     return DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime[format])</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">//   return value;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">backend</span>: locizeOptions,</span><br><span class="line">    <span class="attr">locizeLastUsed</span>: locizeOptions,</span><br><span class="line">    <span class="attr">saveMissing</span>: !isProduction <span class="comment">// you should not use saveMissing in production</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// new usage</span></span><br><span class="line">i18n.services.formatter.add(<span class="string">&#x27;DATE_HUGE&#x27;</span>, <span class="function">(<span class="params">value, lng, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> DateTime.fromJSDate(value).setLocale(lng).toLocaleString(DateTime.DATE_HUGE)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n;</span><br></pre></td></tr></table></figure><p>Now, during development, you&#39;ll continue to save missing keys and to make use of lastused feature. =&gt; <code>npm run start</code></p><p>And in production environment, saveMissing and lastused are disabled, and also the api-key is not exposed. =&gt; <code>npm run build &amp;&amp; npm run serve</code></p><p><a href="https://docs.locize.com/more/caching">Caching</a>:</p><p><img src="caching.jpg" alt="i18next caching" title="locize © inweso GmbH"></p><p><a href="https://docs.locize.com/more/versioning#merging-versions">Merging versions</a>:</p><p><img src="overwrite_version.jpg" alt="overwrite version" title="locize © inweso GmbH"></p><p><em>🧑‍💻 The complete code for this React example can be found <a href="https://github.com/locize/react-i18next-example-app">here</a>. And a TypeScript version <a href="https://github.com/locize/react-i18next-example-app-ts">here</a>.</em></p><p><em>Check also the <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY&t=294s">code integration part</a> in this <a href="https://www.youtube.com/watch?v=TFV_vhJs5DY">YouTube video</a>.</em></p><p>There&#39;s also an <a href="https://youtu.be/SA_9i4TtxLQ">i18next crash course video</a>.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/SA_9i4TtxLQ" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>There is also a <a href="https://www.ibidem-translations.com/edu/translate-react-i18next-app/">Spanish translation of this blog post</a>.</p><h2 id="🎉🥳-Congratulations-🎊🎁"><a href="#🎉🥳-Congratulations-🎊🎁" class="headerlink" title="🎉🥳 Congratulations 🎊🎁 "></a>🎉🥳 Congratulations 🎊🎁 <a name="congratulations"></a></h2><p>I hope you’ve learned a few new things about <a href="https://www.i18next.com/">i18next</a>, <a href="https://react.i18next.com/">React.js localization</a> and <a href="https://locize.com/">modern localization workflows</a>.</p><p>So if you want to take your i18n topic to the next level, it&#39;s worth trying the <a href="https://locize.com/">localization management platform - locize</a>.</p><p>The founders of <a href="https://locize.com/">locize</a> are also the creators of <a href="https://www.i18next.com/">i18next</a>. So by using <a href="https://locize.com/">locize</a> you directly support the future of <a href="https://www.i18next.com/">i18next</a>.</p><h2 id="👍"><a href="#👍" class="headerlink" title="👍"></a>👍</h2><script type="application/ld+json">  {    "@context": "https://schema.org",    "@type": "FAQPage",    "mainEntity": [{      "@type": "Question",      "name": "Why i18next?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Sustainability: i18next was created in late 2011. It's older than most of the libraries you will use nowadays, including your main frontend tech (React, Angular, Vue, ...). Maturity: Based on how long i18next already is available open source, there is no real i18n case that could not be solved with i18next. Extensibility: i18next can be used in any javascript (and a few non-javascript - .net, elm, iOS, android, ruby, ...) environment, with any UI framework, with any i18n format, ... the possibilities are endless. Richness: There is a plenty of features and possibilities you'll get with i18next compared to other regular i18n frameworks."      }    },{      "@type": "Question",      "name": "How does i18next work?",      "acceptedAnswer": {        "@type": "Answer",        "image": "https://locize.com/img/i18next_how_it_works.png",        "text": "At first, i18next seems to be a simple key/translation dictionary, but in reality it is an elaborated and very extensible i18n framework with a lot of power. It offers translations to be provided from different sources, a language detection, plural form resolutions, caching, post processing, alternative i18n formats and more. You see it does not only offer the standard i18n features, like interpolation, formatting, etc. But the best thing about it is certainly the limitless ecosystem around i18next. We don't know of any other i18n framework with such a large community. That's why we like i18next that much!"      }    },{      "@type": "Question",      "name": "What is i18next and how does it work?",      "acceptedAnswer": {        "@type": "Answer",        "image": "https://locize.com/img/i18next_how_it_works.png",        "text": "i18next is an internationalization-framework written in and for JavaScript. But it's much more than that. i18next goes beyond just providing the standard i18n features such as (plurals, context, interpolation, format). It provides you with a complete solution to localize your product from web to mobile and desktop. At first, i18next seems to be a simple key/translation dictionary, but in reality it is an elaborated and very extensible i18n framework with a lot of power. It offers translations to be provided from different sources, a language detection, plural form resolutions, caching, post processing, alternative i18n formats and more. You see it does not only offer the standard i18n features, like interpolation, formatting, etc. But the best thing about it is certainly the limitless ecosystem around i18next. We don't know of any other i18n framework with such a large community. That's why we like i18next that much!"      }    },{      "@type": "Question",      "name": "What is i18next?",      "acceptedAnswer": {        "@type": "Answer",        "text": "i18next is an internationalization-framework written in and for JavaScript. But it's much more than that. i18next goes beyond just providing the standard i18n features such as (plurals, context, interpolation, format). It provides you with a complete solution to localize your product from web to mobile and desktop."      }    },{      "@type": "Question",      "name": "What are the benefits of using i18next over other internationalization libraries?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Lightweight and flexible: i18next is a small library that doesn't require a lot of setup and can be easily integrated with other libraries and frameworks. Support for multiple languages: i18next supports a wide range of languages and provides a simple way to switch between them on the fly. Easy to use API: i18next provides a simple and intuitive API for translating and formatting strings, dates, and numbers. Pluralization and gender handling: i18next provides built-in support for handling pluralization and gender in different languages. Good performance: i18next is designed for performance and provides caching mechanisms to minimize the number of lookups. Active community: i18next has a large and active community of developers who contribute to the library and provide support for new features and bug fixes."      }    },{      "@type": "Question",      "name": "Can i18next be integrated with popular frontend frameworks like React, Vue, and Angular?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Yes, i18next can be integrated with popular frontend frameworks such as React, Vue, and Angular. There are official packages for each framework and community-supported packages available for integration."      }    },{      "@type": "Question",      "name": "Can i18next be used for server-side rendering and how does it impact performance?",      "acceptedAnswer": {        "@type": "Answer",        "text": "Yes, i18next can be used for server-side rendering. Using i18next on the server-side can improve the performance of your website by allowing you to pre-render the internationalized content, which can then be served to the user's browser."      }    }]  }</script>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> react </tag>
            
            <tag> react-i18next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What&#39;s new in locize</title>
      <link href="/blog/new-locize/"/>
      <url>/blog/new-locize/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpg" alt="what is new in locize" title="locize © inweso GmbH"></p><p>A lot of work may be virtual now, but that doesn’t mean we’ve slowed down! In fact, we spent the last months working on a new locize version with a bunch of fabulous updates. Here&#39;s a run-down of some of the most important tweaks that make a huge difference.</p><h2 id="Modernized-UI"><a href="#Modernized-UI" class="headerlink" title="Modernized UI"></a>Modernized UI</h2><p>First of all, you will notice locize looks different. The layout is a little less angular and a little more rounded.There are more icons and more charts. This makes it look friendlier, simpler, and tidier.<img src="overview.jpg" alt="overview" title="locize © inweso GmbH"></p><p>The layout is composed by different cards. Each card has optional additional functionality in the top right corder.<img src="card.jpg" alt="card" title="locize © inweso GmbH"></p><h2 id="Different-parts"><a href="#Different-parts" class="headerlink" title="Different parts"></a>Different parts</h2><p>The application was rewritten from the ground up and now splits into two major parts.</p><h3 id="Project-pages"><a href="#Project-pages" class="headerlink" title="Project pages"></a>Project pages</h3><p>The project pages consists of details and actions about your versions, languages, namespaces, etc.</p><p>There&#39;s also an optional card about your orders and another card about your branched projects (crowdbased)<img src="orders.jpg" alt="orders" title="locize © inweso GmbH"><img src="branches.jpg" alt="branches" title="locize © inweso GmbH"></p><p>We moved everything related to the development to a dedicated page, containing development settings, api keys and relevant metrics. There&#39;s also the possibility to configure a webhook or integrate slack.<img src="dev.jpg" alt="dev" title="locize © inweso GmbH"></p><h3 id="CAT-pages"><a href="#CAT-pages" class="headerlink" title="CAT pages"></a>CAT pages</h3><p>The other major part is the new computer aided translation tool – short CAT. The new CAT tool comes with three separate views, for:</p><h3 id="Global-overview"><a href="#Global-overview" class="headerlink" title="Global overview"></a>Global overview</h3><p>With global imports and exports, add, copy or delete keys, search and filter.<img src="cat-overview.jpg" alt="cat-overview" title="locize © inweso GmbH"></p><h4 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h4><p>Focus on translating, assisted by machine translation (MT), smart translation memory (TM), consistency checks, and more.<img src="translation.jpg" alt="translation" title="locize © inweso GmbH"></p><h4 id="InContext-editing"><a href="#InContext-editing" class="headerlink" title="InContext editing"></a>InContext editing</h4><p>The InContext Editor just needs a little script (<a href="https://github.com/locize/locize">locize</a> or <a href="https://github.com/locize/locizify">locizify</a>) added to your site, so it can exchange information (clicked text, saved changes, etc.).<img src="incontext.jpg" alt="in context editor" title="locize © inweso GmbH"></p><h4 id="Find-more-information-in-the-documentation"><a href="#Find-more-information-in-the-documentation" class="headerlink" title="Find more information in the documentation"></a><a href="https://docs.locize.com/different-views">Find more information in the documentation</a></h4><h2 id="New-features"><a href="#New-features" class="headerlink" title="New features"></a>New features</h2><p>The new locize app does not only come with a new fresh look – but also brings you a ton of new awesome features, like the review workflow or the key history.</p><h3 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h3><p>You can enable the review workflow for specific languages.<img src="set-review.jpg" alt="set review" title="locize © inweso GmbH"></p><p>This way each time someone changes a translation, it will start a review workflow.The actual value will not be changed until someone will accept one of the translation proposals.<img src="review.jpg" alt="review" title="locize © inweso GmbH"></p><h3 id="History"><a href="#History" class="headerlink" title="History"></a>History</h3><p>The last translation changes are audited per key.<img src="history.jpg" alt="history" title="locize © inweso GmbH"></p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>To make it short – every aspect of the old experience was analyzed and improved to give you an even better experience.</p><p>The only thing we did not change was the price.</p><p>You get all the new features without any increase of costs.</p><p><em>If you got any questions, feedback or suggestions – we would love to hear from you at <a href="mailto:support@locize.com">support@locize.com</a>.</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> translation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A tale of the last 10 years in web development</title>
      <link href="/blog/a-tale-of-the-last-10-years-in-web-development/"/>
      <url>/blog/a-tale-of-the-last-10-years-in-web-development/</url>
      
        <content type="html"><![CDATA[<p><img src="title.png" alt="web development" title="locize © inweso GmbH"></p><blockquote><p>This is a work of fiction. Names, characters, businesses, places, events, locales, and incidents depicted in this story are either the products of my imagination or used in a fictitious manner. Any resemblance to actual persons, living or dead, or actual events is purely coincidental.</p></blockquote><h2 id="An-Introduction"><a href="#An-Introduction" class="headerlink" title="An Introduction"></a>An Introduction</h2><p>This story is based on a true story of each of us. Over the past 10 years, many web developers have experienced such a journey. Starting from <a href="https://jquery.com/">jQuery</a>, passing through <a href="https://angular.io/">Angular</a>, using <a href="https://reactjs.org/">React</a> and streak <a href="https://vuejs.org/">Vue</a>.</p><p>When reading, “darker areas” of the beginnings of single page applications (SPA) are undergone. This can cause unwanted nervous muscle twitches from the past.</p><p>For risks and side effects read the package leaflet <em>(there is none)</em> and consult your doctor or pharmacist <em>(I don’t know if they could understand)</em>.</p><hr><p>Once upon a time, in spring 2008 in a small company in Sheffield, there was a software developer called Dorian. He was working on a desktop application built with <a href="https://www.microsoft.com/net/download/dotnet-framework-runtime">Microsoft .NET</a>.<br>Not far from there, in Rotherham, Shaun worked in a similar company as web developer.<br>Both companies were very similar and sometimes even had the same customers. So it happened that the top management of both companies met and they merged.<br>Patty, who had been promoted to development manager, had the task to assemble a new web development team. After she had already inducted Shaun into her team, she also found Dorian and noticed a possible team change.<br>She beat him an offer and Dorian joined straight the team in Rotherham.<br>For Dorian, professional development with Javascript was something new. He’d learned Javascript during his studies, but he’d used it rather than animate a website.<br>Shaun, on the other hand, even showed him how to handle <a href="https://nodejs.org/">node.js</a> and linux and mac. Dorian had always only worked with Windows so far. And from Javascript in the backend he was quite astonished and surprised.<br>Patty saw the first weeks relaxed and felt that she was uniting these two, the right thing.</p><p>Soon it was time to productively implement a new web application. Together, they decided to try to use <a href="https://nodejs.org/">node.js</a> in the backend and <a href="https://jquery.com/">jQuery</a> in the frontend.<br>They did choose <a href="https://jquery.com/">jQuery</a> because the support of the community was great, it made DOM manipulation painless, played well with <a href="https://en.wikipedia.org/wiki/Ajax_%28programming%29">AJAX</a>, made basic animation a piece of cake, had a lot of plug-ins, etc…<br>Since the web application was not only for English speaking users, they used <a href="https://github.com/i18next/jquery-i18next">jquery-i18next</a> as an internationalization (i18n) library.</p><script src="https://gist.github.com/adrai/14c32d1a5269c03bc42fe0683235296b.js" alt="https://github.com/adrai/i18next-main-differentiator/tree/master/jquery"></script><p><em>To see how this could look like click</em> <a href="https://adrai.github.io/i18next-main-differentiator/jquery/"><em>here</em></a><em>.</em></p><hr><p>After about 3 to 4 years, the first signs of weakness of the web application began.<br>There were overusing big/clever plugins, had big/complex files and polluted the global namespace.<br>The heavy use of long chains of selectors (<em>“ul#leftnav li p a.current“</em>) made the code brittle.<br>They started to lose track of what’s where because of the neat idea to use <em>.data()</em> to attach data to the DOM elements, to track the page state.<br>Everything started being slow…<br>Patty had new major features in the pipeline. But the team, which had problems to grow, recommended a refactoring phase.<br>Quickly the team got support from 2 freelancers, Serge and Martina. Patty introduced the new ones as “the experts”.<br>Serge and Martina had <a href="https://angular.io/">Angular</a> know-how and persuaded everyone to replace the <a href="https://jquery.com/">jQuery</a> solution with <a href="https://angular.io/">Angular</a>.<br>Their arguments sounded promising:<br>Instead of unobtrusive Javascript with selectors, now declarative templates.<br>From semantic HTML, to semantic models. Instead of classic separation of concerns (HTML, CSS, JS), the usage of MVC pattern. No plug-ins but directives. <em>$scope</em> instead of closure.<br>Instead of manual DOM manipulation and binding, modern data binding. Less “spaghetti” code and more dependency injection. From unorganized, to modular service architecture.</p><p>Because <a href="https://www.i18next.com/">i18next</a> was not only built for <a href="https://jquery.com/">jQuery</a>, they could use <a href="https://github.com/i18next/ng-i18next">ng-i18next</a> and at least keep the same configuration and use the same <a href="https://github.com/adrai/i18next-main-differentiator/tree/master/locales">localization files</a> as before!</p><script src="https://gist.github.com/adrai/54e3d4b2356dfd6934b4842f7c7b4dfc.js" alt="https://github.com/adrai/i18next-main-differentiator/tree/master/angular"></script><p><em>To see how this could look like click</em> <a href="https://adrai.github.io/i18next-main-differentiator/angular/"><em>here</em></a><em>.</em></p><hr><p>During the next 3 to 4 years, Patty added more freelancers and contractors to the team.<br>Shaun and Dorian started to recognize that making the simplest features work seems a struggle.<br>There were more and more performance and complexity issues.<br>Directives, services and filters theoretically were available, but ultimately, everything was built around controllers and their two-way bound <em>$scope</em>.<br>Angular seemed to be fine for the beginning, when it was a simple application, but as the frontend application grew in complexity, this led to the <a href="https://toddmotto.com/no-scope-soup-bind-to-controller-angularjs/">scope soup problem</a> amongst other issues.<br>Additionally, the fear of <a href="https://angular.io/">Angular</a> 2’s release was on the horizon. By trying some samples, Shaun said:</p><blockquote><p><em>“Is this still Angular?”</em></p></blockquote><p>In the meantime, the backend had turned into a solid foundation based on DDD, CQRS and event sourcing.<br>During a late-night beer, Dorian told Shaun about <a href="https://reactjs.org/">React</a> and <a href="https://redux.js.org/">Redux</a>. He said that when he read about <a href="https://reactjs.org/">React</a>, <a href="https://redux.js.org/">Redux</a> and FLUX he immediately felt that this was a natural fit to the existing backend.<br>Finally, they convinced Patty to rewrite the whole frontend with these arguments:</p><p><img src="react.gif" alt="react" title="https://blog.gisspan.com"></p><ul><li>  <a href="https://angular.io/">Angular</a> was a framework vs. <a href="https://reactjs.org/">React</a> was a library</li><li>  the more flexible state management with <a href="https://redux.js.org/">Redux</a></li><li>  virtual DOM, one-way data flow, PropTypes and a well-defined component lifecycle</li><li>  the obvious natural fit with their backend</li><li>  single source of truth</li><li>  <a href="https://jsx.github.io/">JSX</a>, a natural evolution of Javascript</li><li>  <a href="https://reactjs.org/">React</a> has faster learning curve. It feels like learning faster.</li></ul><p>As with the last technology change, this time there was an <a href="https://www.i18next.com/">i18next</a> option. Just used the new <a href="https://react.i18next.com/">react-i18next</a> library and still the same <a href="https://github.com/adrai/i18next-main-differentiator/tree/master/locales">localization files</a>!</p><script src="https://gist.github.com/adrai/78ac88e6dd61b4249c05b535e896de35.js" alt="https://github.com/adrai/i18next-main-differentiator/tree/master/react"></script><p><em>To see how this could look like click</em> <a href="https://adrai.github.io/i18next-main-differentiator/react/"><em>here</em></a><em>.</em></p><hr><p>Around the year 2018, many freelancers and contractors were no longer in the team. Instead of them now younger developers started to ask for something new…</p><blockquote><p><em>“</em><a href="https://reactjs.org/"><em>React</em></a> <em>is ok, but what’s about</em> <a href="https://vuejs.org/"><em>Vue</em></a><em>?”</em></p></blockquote><p>Shaun and Dorian organized a little technical session and they explained that <a href="https://reactjs.org/">React</a> and <a href="https://vuejs.org/">Vue</a> had more similarities than differences:</p><ul><li>  both were fast and lightweight</li><li>  both had a component based architecture</li><li>  both used a virtual DOM</li><li>  both could be dropped into a single HTML file or be a module in a more sophisticated <a href="https://webpack.js.org/">webpack</a> setup</li><li>  both had separate router and state management libraries</li></ul><p>Long talk short, the session ended with the following sentence by Shaun:</p><blockquote><p>“Ok, let’s try to write our web app in <a href="https://vuejs.org/">Vue</a> and create a PoC…”</p></blockquote><p>Whether they’ve really switched to <a href="https://vuejs.org/">Vue</a>, we do not know, but what we know is that if that’s the case, then they’re sure to use <a href="https://github.com/panter/vue-i18next">vue-i18next</a> or a similar library.</p><script src="https://gist.github.com/adrai/54ccddbabbba736e0460c1f01e546179.js" alt="https://github.com/adrai/i18next-main-differentiator/tree/master/vue"></script><p><em>To see how this could look like click</em> <a href="https://adrai.github.io/i18next-main-differentiator/vue/"><em>here</em></a><em>.</em></p><hr><p><a href="https://www.i18next.com/">i18next</a> was right:</p><blockquote><p>“learn once — translate everywhere”!</p></blockquote><p><strong><em>Technologies and libraries come and go, but</em></strong> <a href="https://www.i18next.com/"><strong><em>i18next</em></strong></a> <strong><em>remains!</em></strong></p><h4 id="Post-credits-scene"><a href="#Post-credits-scene" class="headerlink" title="Post-credits scene"></a>Post-credits scene</h4><p>There are voices who say that they have also replaced their <a href="https://github.com/i18next/i18next-xhr-backend">i18next-xhr-backend</a> with that of <a href="https://github.com/locize/i18next-locize-backend">locize</a>.</p><p><em>To see how this could look like look at</em> <a href="https://youtu.be/kw-GEQbgmSc"><em>this video</em></a><a href="https://youtu.be/kw-GEQbgmSc%29.*"><em>.</em></a></p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/kw-GEQbgmSc" frameborder="0" loading="lazy" allowfullscreen></iframe></div>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> web </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unleash the hidden superpowers of react-intl</title>
      <link href="/blog/unleash-the-hidden-superpowers-of-react-intl/"/>
      <url>/blog/unleash-the-hidden-superpowers-of-react-intl/</url>
      
        <content type="html"><![CDATA[<p><img src="title.png" title="locize © inweso GmbH"></p><p>Let images speak to see what you will get:</p><p><img src="result.png" title="locize © inweso GmbH"></p><h2 id="We-do-not-like-this-clutter"><a href="#We-do-not-like-this-clutter" class="headerlink" title="We do not like this clutter:"></a>We do not like this clutter:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;John Doe&#x27;</span>;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">FormattedMessage</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">   <span class="attr">id</span>=<span class="string">&quot;welcome&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">   <span class="attr">defaultMessage</span>=<span class="string">&#123;</span>`<span class="attr">Hello</span> &#123;<span class="attr">name</span>&#125;!`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">   <span class="attr">values</span>=<span class="string">&#123;&#123;</span> <span class="attr">name:</span> &lt;<span class="attr">b</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span> &#125;&#125;</span></span><br><span class="line"><span class="xml">/&gt;</span></span><br></pre></td></tr></table></figure><p>While react-intl works awesome having those FormattedMessage everywhere does not really help keeping your code nice and readable. Wouldn’t it be nicer you just could write:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormattedMessage id=<span class="string">&quot;welcome&quot;</span>&gt;Hello &lt;b&gt;&#123;name&#125;&lt;<span class="regexp">/b&gt;!&lt;/</span>FormattedMessage&gt;</span><br></pre></td></tr></table></figure><h2 id="babel-macros-to-the-rescue"><a href="#babel-macros-to-the-rescue" class="headerlink" title="babel macros to the rescue"></a>babel macros to the rescue</h2><p>You could easily write a babel plugin to transform the above simplified markup to the needed react-intl FormattedMessage. But there is a better way using Kent C. Dodds babel macros (<a href="https://github.com/kentcdodds/babel-plugin-macros">https://github.com/kentcdodds/babel-plugin-macros</a>). There comes a big advantage with using macros (beside they are super simple to create) you can use those with applications created with <a href="https://github.com/facebook/create-react-app">create-react-app</a> without ejecting (on time of writing needs an alpha build v2.x.x).</p><p>A babel macro is basically just a function that gets a reference of the nodes using the macro:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createMacro &#125; = <span class="built_in">require</span>(<span class="string">&#x27;babel-plugin-macros&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = createMacro(myMacro)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myMacro</span>(<span class="params">&#123;references, state, babel&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// the FormattedMessage imported in below code snippet</span></span><br><span class="line">  <span class="keyword">const</span> &#123; FormattedMessage = [] &#125; = references;</span><br><span class="line">  <span class="comment">// transform each occurance</span></span><br><span class="line">  FormattedMessage.forEach(<span class="function"><span class="params">referencePath</span> =&gt;</span> &#123; <span class="comment">/* transform */</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We won’t go through all the details of the macro used to transform the simpler markup — but you can checkout the code here:</p><blockquote><p><a href="https://github.com/locize/locize-react-intl-example/blob/master/src/intl.macro.js">https://github.com/locize/locize-react-intl-example/blob/master/src/intl.macro.js</a></p></blockquote><p>You can use the macro like:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import the macro component</span></span><br><span class="line"><span class="keyword">import</span> &#123; FormattedMessage &#125; <span class="keyword">from</span> <span class="string">&quot;./intl.macro&quot;</span>;</span><br><span class="line"><span class="comment">// and use it</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">FormattedMessage</span> <span class="attr">id</span>=<span class="string">&quot;welcome&quot;</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span>!<span class="tag">&lt;/<span class="name">FormattedMessage</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>The macro will transform it to the react-intl FormattedMessage:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormattedMessage</span><br><span class="line">   id=<span class="string">&quot;welcome&quot;</span></span><br><span class="line">   defaultMessage=&#123;<span class="string">`Hello &#123;name&#125;!`</span>&#125;</span><br><span class="line">   values=&#123;&#123; <span class="attr">name</span>: <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="Plurals-and-Select"><a href="#Plurals-and-Select" class="headerlink" title="Plurals and Select"></a>Plurals and Select</h2><p>We could add some more macro magic to also simpler plurals and selects:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Select, Plural &#125; <span class="keyword">from</span> <span class="string">&quot;./intl.macro&quot;</span>;</span><br><span class="line"><span class="comment">// select</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">FormattedMessage</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">id</span>=<span class="string">&quot;avoid_bugs&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">defaultMessage</span>=<span class="string">&quot;&#123;gender,select,he&#123;He avoids bugs.&#125;she&#123;She avoids bugs.&#125;other&#123;They avoid bugs.&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">values</span>=<span class="string">&#123;&#123;</span> <span class="attr">count:</span> <span class="attr">10</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">/&gt;</span></span></span><br><span class="line"><span class="comment">// will become</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Select</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">id</span>=<span class="string">&quot;avoid_bugs&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">switch</span>=<span class="string">&#123;gender&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">male</span>=<span class="string">&quot;He avoids bugs.&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">female</span>=<span class="string">&quot;She avoids bugs.&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">other</span>=<span class="string">&quot;They avoid bugs.&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">/&gt;</span></span></span><br><span class="line"><span class="comment">// plurals</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">FormattedMessage</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">id</span>=<span class="string">&quot;items_count&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">defaultMessage</span>=<span class="string">&quot;&#123;count,plural,=0&#123;There is no item.&#125;one&#123;There is # item.&#125;other&#123;There are # items.&#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">values</span>=<span class="string">&#123;&#123;</span> <span class="attr">count:</span> <span class="attr">10</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">/&gt;</span></span></span><br><span class="line"><span class="comment">// will become:</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Plural</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">id</span>=<span class="string">&quot;items_count&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">count</span>=<span class="string">&#123;itemsCount1&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  $<span class="attr">0</span>=<span class="string">&quot;There is no item.&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">one</span>=<span class="string">&quot;There is # item.&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">other</span>=<span class="string">&quot;There are # items.&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><p>For more options (like nesting components) have a look at the sample usages:</p><blockquote><p><a href="https://github.com/locize/locize-react-intl-example/blob/master/src/ComponentUsingMacro.js">https://github.com/locize/locize-react-intl-example/blob/master/src/ComponentUsingMacro.js</a></p></blockquote><hr><p><img src="locize_editor.png"></p><p>Now after adopting all the features of the <a href="https://github.com/locize/locize-react-intl-example">demo project</a> you will be able to:</p><ul><li>split translations into multiple files</li><li>using an in-context editor</li><li>loading translations from CDN</li><li>detecting the user language</li><li>automatically add new missing strings to your translation project</li><li>updating changed strings in reference language</li><li>submitting the description to translation context</li><li>setting last used information so you can safely remove keys not used any longer</li></ul><h2 id="From-internationalization-to-localization"><a href="#From-internationalization-to-localization" class="headerlink" title="From internationalization to localization"></a>From internationalization to localization</h2><p>While the first part focused on helping developers writing nicer jsx markup we now will focus on helping your translators by making their work easier. One of the most important things in our fast-paced times is implementing a fast feedback loop, which is also recommended by all the common “Agile” methodologies.</p><p>So let’s go a step further:</p><h2 id="From-internationalization-to-continuous-localization"><a href="#From-internationalization-to-continuous-localization" class="headerlink" title="From internationalization to continuous localization"></a>From internationalization to continuous localization</h2><p>We like to innovate the localization process by breaking the old slow loop of exporting extracted translations, passing them to translators and importing them back again. This old process does not fit into a modern development environment using continuous development and agile methods.</p><p><strong>What we want:</strong> New content in your application should be immediately available in your translation management tool for your translators and newly finished translations should be passed down to the application without a developer needing to add a file to the repository or accepting a PR from the translation management.</p><h2 id="Connecting-your-application-to-your-translation-management"><a href="#Connecting-your-application-to-your-translation-management" class="headerlink" title="Connecting your application to your translation management"></a>Connecting your application to your translation management</h2><p>In this sample we will use <a href="https://locize.com/">https://locize.com</a> as our translation management tool — as it exposes all the needed functionality to bring localization to the level of continuous localization.</p><p>There is the locizer script available to connect your application with the translation project: <a href="https://github.com/locize/locizer">https://github.com/locize/locizer</a></p><p>With it you can load translation files, save or update translation segments.</p><h3 id="Step-1-We-need-a-way-to-extend-react-intl-components-during-development"><a href="#Step-1-We-need-a-way-to-extend-react-intl-components-during-development" class="headerlink" title="Step 1: We need a way to extend react-intl components during development"></a>Step 1: We need a way to extend react-intl components during development</h3><p>This should be rather easy:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FormattedMessage <span class="keyword">as</span> FM &#125; <span class="keyword">from</span> <span class="string">&#x27;react-intl&#x27;</span>;</span><br><span class="line"><span class="comment">// find out if our react app runs in dev mode</span></span><br><span class="line"><span class="keyword">const</span> IS_DEV = !process.env.NODE_ENV || process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line"><span class="comment">// export a extended replacer component while development and original while in production</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FormattedMessage = IS_DEV ? supportLocize()(FM) : FM;</span><br></pre></td></tr></table></figure><p>Now let’s learn what the supportLocize() is:</p><h3 id="Step-2-Let-the-component-send-new-content-to-the-translation-service"><a href="#Step-2-Let-the-component-send-new-content-to-the-translation-service" class="headerlink" title="Step 2: Let the component send new content to the translation service"></a>Step 2: Let the component send new content to the translation service</h3><p>In our code we have FormattedMessages like in regular react-intl projects but we consume our overridden component during development:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// see ./locize/index.js in development mode the</span></span><br><span class="line"><span class="comment">// react-intl components are extended to provide</span></span><br><span class="line"><span class="comment">// features like save of new ids, ...</span></span><br><span class="line"><span class="comment">// in production you get the regular unextended</span></span><br><span class="line"><span class="comment">// react-intl components</span></span><br><span class="line"><span class="keyword">import</span> &#123; FormattedMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;locize&#x27;</span>;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">FormattedMessage</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">id</span>=<span class="string">&quot;app.title&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">defaultMessage</span>=<span class="string">&quot;Welcome to &#123;what&#125; combined with locize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">description</span>=<span class="string">&quot;Welcome header on app main page&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  <span class="attr">values</span>=<span class="string">&#123;&#123;</span> <span class="attr">what:</span> &#x27;<span class="attr">react-intl</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><p>Our extended component will take those props and create new translation segments on locize using the <em>id</em> and <em>defaultMessage</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a hoc to extend components with locize features</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">supportLocize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">Wrapper</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LocizeExtension</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="title">constructor</span>(<span class="params">props, context</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(props, context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get needed props</span></span><br><span class="line">        <span class="keyword">const</span> &#123; id, defaultMessage, description, namespace &#125; = props;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get current value in message catalog</span></span><br><span class="line">        <span class="keyword">const</span> currentValue = translations[currentLocale] &amp;&amp; translations[currentLocale][namespace] &amp;&amp; translations[currentLocale][namespace][id]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// depeding on not yet exists or changed</span></span><br><span class="line">        <span class="comment">// save or update the value on locize</span></span><br><span class="line">        <span class="keyword">if</span> (SAVE_NEW_VALUES &amp;&amp; !currentValue) &#123;</span><br><span class="line">          locizer.add(namespace, id, defaultMessage, description);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (UPDATE_VALUES &amp;&amp; currentValue !== defaultMessage) &#123;</span><br><span class="line">          locizer.update(namespace, id, defaultMessage, description)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// render the wrapped component (react-intl&#x27;s FormattedMessage)</span></span><br><span class="line">      <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> withContext()(LocizeExtension);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Based on the defaultMessage already exists in the translations catalog or not, or the defaultMessage has changed we use the locizer functions to create or update the translation segment in the source language.</p><p>Awesome, now every time we add a new <code>FormattedMessage</code> or change a <code>defaultMessage</code> those values get added or changed in your translation project immediately.</p><h3 id="Step-3-Directly-load-translations"><a href="#Step-3-Directly-load-translations" class="headerlink" title="Step 3: Directly load translations"></a>Step 3: Directly load translations</h3><p>By overriding the <code>IntlProvider</code> we could use the <a href="https://github.com/locize/locizer">locizer</a> script to directly load the translations that get published to the localization CDN provided by <a href="https://locize.com/">locize</a>.</p><p>What the component basically does is taking a prop namespace to load the translation file and the needed intl locale-data:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load the given file form locize</span></span><br><span class="line"><span class="comment">// and detect language while doing so</span></span><br><span class="line">locizer.load(namespace, <span class="function">(<span class="params">err, messages, locale</span>) =&gt;</span> &#123;</span><br><span class="line">  currentLocale = locale;</span><br><span class="line">  translations[locale] = messages;</span><br><span class="line"><span class="comment">// load react intl locale data</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;react-intl/locale-data/&#x27;</span> + locale)</span><br><span class="line">    .then(<span class="function"><span class="params">localeData</span> =&gt;</span> &#123;</span><br><span class="line">      addLocaleData(localeData);</span><br><span class="line"><span class="comment">// update state to render children</span></span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">        locale,</span><br><span class="line">        messages</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The full code is very simple you can find the demo repository here: <a href="https://github.com/locize/locize-react-intl-example/blob/master/src/locize/index.js#L32">https://github.com/locize/locize-react-intl-example/blob/master/src/locize/index.js#L32</a></p><p>So this not only enables us to load one translation catalog, but by using that IntlProvider we could load multiple files and making translation a lot easier by splitting them into multiple smaller files.</p><h3 id="Step-4-Enable-translations-inside-the-context-of-your-application"><a href="#Step-4-Enable-translations-inside-the-context-of-your-application" class="headerlink" title="Step 4: Enable translations inside the context of your application"></a>Step 4: Enable translations inside the context of your application</h3><p><img src="locize_editor.png"></p><p>The integration of the locize editor is very simple:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">locizeEditor.init(&#123;</span><br><span class="line">  <span class="attr">lng</span>: locale,</span><br><span class="line">  <span class="attr">defaultNS</span>: DEFAULTNAMESPACE,</span><br><span class="line">  <span class="attr">referenceLng</span>: REFERENCELANGUAGE,</span><br><span class="line">  <span class="attr">projectId</span>: PROJECTID,</span><br><span class="line">  <span class="attr">private</span>: PRIVATE</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now you can open your website appending the querystring param <code>?locize=true</code> and you will see the in-context editor.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>You see internationalization is done rather easily and localization hasn’t to be harder. With the right tools you can not only keep your development — translation cycle short but you can also improve the quality, save time and money.</p><p>You can find the full sample here: <a href="https://github.com/locize/locize-react-intl-example">https://github.com/locize/locize-react-intl-example</a></p><p>Take the chance and try it yourself <a href="https://locize.com/">locize.com</a> comes with a 14 day free trial.</p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> i18next </tag>
            
            <tag> translation </tag>
            
            <tag> formatjs </tag>
            
            <tag> react </tag>
            
            <tag> react-intl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.js - from i18n to localization (l10n)</title>
      <link href="/blog/vue-js-from-internationalization-i18n-to-localization-l10n-and-back-again/"/>
      <url>/blog/vue-js-from-internationalization-i18n-to-localization-l10n-and-back-again/</url>
      
        <content type="html"><![CDATA[<p><img src="title.jpeg" title="locize © inweso GmbH"></p><h2 id="What-is-internationalization"><a href="#What-is-internationalization" class="headerlink" title="What is internationalization?!?"></a>What is internationalization?!?</h2><blockquote><p>Internationalization is the designing of a product in such a way that it will meet the needs of users in many countries or can be easily adapted to do so. Internationalization might mean designing a website so that when it is translated from English to Spanish the layout still works — many words in Spanish have more characters and therefore take up more space on the page in Spanish than in English.</p></blockquote><p><em>quote by: <a href="https://www.investopedia.com/terms/i/internationalization.asp">https://www.investopedia.com/terms/i/internationalization.asp</a></em></p><h2 id="Open-Source-to-the-rescue"><a href="#Open-Source-to-the-rescue" class="headerlink" title="Open Source to the rescue"></a>Open Source to the rescue</h2><p>Thanks to the restless open source community you won’t have to reinvent an i18n solution. Just to give you an idea let’s mention two mature solutions to translate your vue.js app here:</p><p><a href="https://github.com/kazupon/vue-i18n">vue-i18n</a> by kazuya kawaguchi (@kazupon on github)</p><ul><li>Made by @kazupon a core contributor of vue.js</li><li>Easy to get started with</li><li>powerful enough for most use cases <em>(lacks some features like proper pluralization for - languages having multiple pluralforms or possibility for gender specific translations)</em></li><li>learn more reading the <a href="https://kazupon.github.io/vue-i18n/">documentation</a></li></ul><p><a href="https://github.com/panter/vue-i18next/commits/master">vue-i18next</a> by Claudio Romano (@panter on github)</p><ul><li>based on <a href="https://www.i18next.com/">i18next</a>: learn once — translate everywhere</li><li>extendable, powerful i18n features</li><li>plugins for language detection, loading, caching, …</li><li>learn more reading the <a href="https://github.com/panter/vue-i18next">documentation</a> and the <a href="https://www.i18next.com/translation-function/essentials">i18next documentation</a> for translation functionalities like plural, context, …</li></ul><h2 id="From-internationalization-to-localization"><a href="#From-internationalization-to-localization" class="headerlink" title="From internationalization to localization"></a>From internationalization to localization</h2><p>As you can see in the <a href="https://kazupon.github.io/vue-i18n/guide/started.html">getting started guide</a> of vue-i18n making your vue.js application fit for translation is not as daunting as it seemed first. Honestly it’s rather easy.</p><p>Now let us show you how easy the next step could be doing the same for localization.</p><blockquote><p>After enabling the developers it’s time to enable your localization team to translate your product.</p></blockquote><h3 id="Step-1-Creating-a-fast-translation-loop-—-continuous-localization"><a href="#Step-1-Creating-a-fast-translation-loop-—-continuous-localization" class="headerlink" title="Step 1: Creating a fast translation loop — continuous localization"></a>Step 1: Creating a fast translation loop — continuous localization</h3><p>Our goal is to extend vue-i18n to to use it’s existing missing function to directly send new texts to the translation managment tool and to directly load translations from there.</p><p>This enables the localization team / translators to start with translations immediately plus keeps a fast feedback loop by having the translations in development without having to export and copy those files from the translation management to the codebase.</p><p>To make this magic happen we will use <a href="https://locize.com/">locize.com</a> as our weapon of choice:</p><blockquote><p>locize is a new online service that offers true continuous localization.</p></blockquote><p><em>quote by: <a href="https://alternativeto.net/software/locize/">https://alternativeto.net/software/locize/</a></em></p><blockquote><p>It’s time for some code — show me your code</p></blockquote><p>First we will need to add the provided <a href="https://github.com/locize/locizer">locizer script</a> to our page to connect the locize translation management with our code:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">”https://unpkg.com/vue/dist/vue.js</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">”https://unpkg.com/vue-i18n/dist/vue-i18n.js</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">”https://unpkg.com/locizer/locizer.min.js</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ...</span></span><br></pre></td></tr></table></figure><p>Now let’s use the new script to automatically detect the user language and to load the translations from locize:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">locizer</span></span><br><span class="line"><span class="javascript">  .init(&#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>, <span class="comment">// load this if detected lng is not support</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">referenceLng</span>: <span class="string">&#x27;en&#x27;</span>, <span class="comment">// the source language</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">projectId</span>: [PROJECTID], <span class="comment">// your locize project id</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">apiKey</span>: [APIKEY] <span class="comment">// your locize api key</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  .load(<span class="string">&#x27;translations&#x27;</span>, <span class="function">(<span class="params">err, translations, detectedLng</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">     <span class="comment">// build message catalog format</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> messages = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">     messages[detectedLng] = translations;</span></span><br><span class="line"><span class="javascript"><span class="comment">// Create VueI18n instance with options</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span></span><br><span class="line"><span class="javascript">       <span class="attr">locale</span>: detectedLng, <span class="comment">// set locale</span></span></span><br><span class="line"><span class="javascript">       <span class="attr">messages</span>: messages, <span class="comment">// set locale messages</span></span></span><br><span class="line"><span class="javascript">     &#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">// Create a Vue instance with `i18n` option</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">new</span> Vue(&#123; i18n &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>So now we’re already loading the translations from the locize CDN directly from our project. To switch language only append <code>?lng=[yourLanguage]</code> to your url (for more options have a look <a href="https://github.com/locize/locizer#init-options">detection options</a>).</p><p><img src="locize_editor.png"></p><p>Our translators could easily add new languages, translate the content or change existing content.</p><blockquote><p>Time to have new paths sent to locize automatically</p></blockquote><p>Just use the existing missing function of vue-i18n and pipe that call to the locizer script:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create VueI18n instance with options</span></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  <span class="attr">locale</span>: detectedLng, <span class="comment">// set locale</span></span><br><span class="line">  <span class="attr">messages</span>: messages, <span class="comment">// set locale messages</span></span><br><span class="line">  <span class="attr">missing</span>: <span class="function"><span class="keyword">function</span>(<span class="params">locale, path, vue</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// pipe to locize - that key will be created for you</span></span><br><span class="line">    locizer.add(<span class="string">&#x27;translations&#x27;</span>, path, path);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Awesome. Now we have our code connected with our translation management. Developers could create new content that is automatically passed to the translation management. Translators could do their job without having to beg for latest source files and do not need to send latest translations to development and wait for those files to be integrated into the latest build.</p><blockquote><p>The power of true continuous localization</p></blockquote><h3 id="Step-2-Enable-translations-to-be-in-high-quality"><a href="#Step-2-Enable-translations-to-be-in-high-quality" class="headerlink" title="Step 2: Enable translations to be in high quality"></a>Step 2: Enable translations to be in high quality</h3><p>Localization is hard. Even harder if you have to guess the context during translations. So lets improve this by enabling translations directly inside your vue.js app.</p><p><img src="locize_editor2.png"></p><p>To add the incontext editor we will need to add an additional script first:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/locize-editor/locize-editor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A little configuration:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">locizeEditor.init(&#123;</span><br><span class="line">  <span class="attr">lng</span>: detectedLng,</span><br><span class="line">  <span class="attr">defaultNS</span>: <span class="string">&#x27;translations&#x27;</span>,</span><br><span class="line">  <span class="attr">referenceLng</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">  <span class="attr">projectId</span>: [PROJECTID]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Now open your website with <code>?locize=true</code> and you will see the incontext editor. While turned on you can click on any text element on your page to directly jump to it and make the initial translation or the changes needed.</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>You see internationalization is done rather easily and localization hasn’t to be harder. With the right tools you can not only keep your development — translation cycle short but you can also improve the quality, save time and money.</p><p><strong>You can find the full sample here:</strong> <a href="https://github.com/locize/locize-vue-i18n-example">https://github.com/locize/locize-vue-i18n-example</a></p><p>Take the chance and try it yourself <a href="https://locize.com/">locize.com</a> comes with a 14 day free trial.</p><p><strong>Prefer using vue-i18next?</strong></p><p>Doing the same is easier by just using the i18next plugin system. Simply add <a href="https://github.com/locize/i18next-locize-backend">https://github.com/locize/i18next-locize-backend</a> and the editor <a href="https://github.com/locize/locize-editor">https://github.com/locize/locize-editor</a> to i18next. DONE.</p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> translation </tag>
            
            <tag> vue </tag>
            
            <tag> vue-i18n </tag>
            
            <tag> vue-i18next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>locize - Translation Software Distinguished by Platform for SaaS Reviews as a Great User Experience and Rising Star for 2018</title>
      <link href="/blog/locize-double-win-2018-for-translation-software/"/>
      <url>/blog/locize-double-win-2018-for-translation-software/</url>
      
        <content type="html"><![CDATA[<p>Efficient localization need not to be expensive, disorganized, and time-consuming for development and localization teams. We designed locize with this core ideas in mind, and a popular software review platform has recently recognized our efforts and affirmed that we have succeeded in our endeavor. FinancesOnline recently distinguished <a href="https://reviews.financesonline.com/p/locize/">locize</a> with the <strong>Great User Experience</strong> and <strong>Rising Star</strong> awards for 2018 due to our localization and internationalization software’s capability to satisfy the large demands of global businesses. </p><p><img src="User-Experience2018.png" alt="user experience 2018" title="locize © inweso GmbH"></p><p>locize earned FinancesOnline’s <strong>Great User Experience</strong> award under their <a href="https://translation.financesonline.com/">best translation software</a> for our offering an incredibly pleasing to use software for continuously localizing all kinds of languages and software. Project versioning for easy tracking of file changes, multiple file management and project progress tracking through the dashboard, and third-party integrations are some of the factors that contributed to this award. Their experts also praised our platform’s flexibility and responsiveness reflecting all translations on one’s website by simply embedding a single line of code, a feature that makes locize among the best <a href="https://financesonline.com/top-10-alternatives-one-hour-translation-popular-translation-software-solutions/">translation software competitors</a>. This also negates the need for manual inputting of all translations.</p><p><img src="Risign-Star2018.png" alt="rising star 2018" title="locize © inweso GmbH"></p><p>The FinancesOnline review team also regarded locize as a <strong>Rising Star</strong> for 2018 due to our highly positive traction with clients. It isn’t a surprise to see our software receive this distinction after FinancesOnline wrote positive remarks in their locize review such as <em>“cost-effective”</em>, <em>“always safe”</em> content thanks to our two-factor authentication, and accelerated and streamlined localization processes. </p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> continuous localization </tag>
            
            <tag> award </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Is your software ready for localization?</title>
      <link href="/blog/is-your-software-ready-for-localization/"/>
      <url>/blog/is-your-software-ready-for-localization/</url>
      
        <content type="html"><![CDATA[<meta name="robots" content="noindex, nofollow"><p><img src="title.png" alt="software ready for localization" title="locize © inweso GmbH"></p><blockquote><p>So you want people from all around the world to use and understand your software...</p></blockquote><blockquote><p>...but how to achieve that?</p></blockquote><h2 id="Which-format-should-I-use"><a href="#Which-format-should-I-use" class="headerlink" title="Which format should I use?"></a>Which format should I use?</h2><p>Think about the workflow of exporting strings of the software, having them translated and then importing them back into your software. This will give you many ideas on how to structure your strings.</p><p>Sometimes the used library already pretends a format.</p><h4 id="For-web-projects-for-example-this-can-be"><a href="#For-web-projects-for-example-this-can-be" class="headerlink" title="For web projects for example this can be:"></a>For web projects for example this can be:</h4><ul><li>JSON (i.e. used by <a href="https://i18next.com/">i18next</a>)</li><li>ICU Message syntax (i.e. used by <a href="https://formatjs.io/">formatjs</a>)</li><li><a href="../i18n-formats-javascript/">...</a></li></ul><h4 id="For-mobile-projects-for-example-this-can-be"><a href="#For-mobile-projects-for-example-this-can-be" class="headerlink" title="For mobile projects for example this can be:"></a>For mobile projects for example this can be:</h4><ul><li>Localizable.strings (i.e. used by iOS)</li><li>XML String Resource (i.e. used by Android)</li><li>...</li></ul><h4 id="For-system-apps-for-example-this-can-be"><a href="#For-system-apps-for-example-this-can-be" class="headerlink" title="For system apps for example this can be:"></a>For system apps for example this can be:</h4><ul><li>Java properties files (i.e. used by Java)</li><li>ResX files (i.e. used by .Net)</li><li>...</li></ul><h2 id="Do-you-hardcode-text-strings-in-the-source-code"><a href="#Do-you-hardcode-text-strings-in-the-source-code" class="headerlink" title="Do you hardcode text strings in the source code?"></a>Do you hardcode text strings in the source code?</h2><p>Resource files should store all text used in the software; do not leave text strings hardcoded!<br />Just don&#39;t!</p><h2 id="Can-the-order-of-variables-in-localized-strings-be-changed"><a href="#Can-the-order-of-variables-in-localized-strings-be-changed" class="headerlink" title="Can the order of variables in localized strings be changed?"></a>Can the order of variables in localized strings be changed?</h2><p>Implement a token system to ensure nouns, verbs, etc. can be placed in unique order by language.Different languages needs to know more information about the context. For example for pluralization or gender.The Italian language for example relies on gender. The words in the sentence change depending on whether you&#39;re talking about a man or a woman.Polish suppose you have a singular and then you have a different plural depending on whether the number of things ends with 2, 3 and 4 or some other digit.And Romanian need a different plural for any group of objects greater than 20.</p><h2 id="Does-the-interface-allow-for-long-translations"><a href="#Does-the-interface-allow-for-long-translations" class="headerlink" title="Does the interface allow for long translations?"></a>Does the interface allow for long translations?</h2><p>What about long translations in areas with single line text? Are there areas with multi-line text in your software?Sentences that take five syllables in English actually take a whole two paragraph description in some other language.</p><h2 id="Do-you-use-unique-string-IDs"><a href="#Do-you-use-unique-string-IDs" class="headerlink" title="Do you use unique string IDs?"></a>Do you use unique string IDs?</h2><p>Unique string IDs help keep development, translation and QA teams on the same page.Another reason for this is: if you have for example a text in English that is visible in 2 different places on your UI, but is potentially translated differently in other languages (because it fits better).</p><h2 id="What-about-fonts-Who-selects-their-types-and-sizes-in-the-software"><a href="#What-about-fonts-Who-selects-their-types-and-sizes-in-the-software" class="headerlink" title="What about fonts? Who selects their types and sizes in the software?"></a>What about fonts? Who selects their types and sizes in the software?</h2><p>Both localization and development teams should select fonts as a cooperative effort.And how do you decide on the proportion of fonts?While fonts for North American and European languages should be &quot;Proportional&quot;, &quot;Monospace&quot; is the right type for Asian languages.Are the fonts compatible with special characters for all languages?Different languages, different needs: for special characters, word order, even numbers.</p><h2 id="How-are-date-time-currency-and-numbers-displayed"><a href="#How-are-date-time-currency-and-numbers-displayed" class="headerlink" title="How are date, time, currency, and numbers displayed?"></a>How are date, time, currency, and numbers displayed?</h2><p>Allow date, time, currency, and numbers to be displayed with differing figures and number separators by language or even region.Make sure the date format is right because Americans do month/day/year Brit day/month/year and by the way in America the week starts on a Sunday and in Britain the week starts on Monday. Europe wants 24 hour clocks and America wants 12 hour clocks.<br />Regarding numbers, here a little list:<img src="numbers.png" alt="numbers" title="locize © inweso GmbH"><a href="https://en.wikipedia.org/wiki/Decimal_separator">source</a></p><h2 id="What-encoding-do-you-use-for-your-text-assets"><a href="#What-encoding-do-you-use-for-your-text-assets" class="headerlink" title="What encoding do you use for your text assets? "></a>What encoding do you use for your text assets? <a name="encoding"></a></h2><p>Choose an encoding that supports all target languages.If you don&#39;t know, just choose UTF-8.If you want to know <a href="http://codel10n.com/why-utf8-is-best-encoding-for-your-customers/">Why UTF-8 is the best encoding?</a> read this <a href="http://codel10n.com/why-utf8-is-best-encoding-for-your-customers/">article</a>.By the way, to tell apart assets intended for a particular locale use ISO 693-1 &amp; 3166-1 language and country codes to mark assets by locale.</p><h2 id="Do-the-art-assets-of-your-software-UI-have-text"><a href="#Do-the-art-assets-of-your-software-UI-have-text" class="headerlink" title="Do the art assets of your software UI have text?"></a>Do the art assets of your software UI have text?</h2><p>Be ready to swap art assets if they contain legible text.Sometimes even if there is no legible text you may want to adapt the art asset (i.e. an image) because of cultural reasons.There are some libraries that can help with this issue i.e. <a href="https://github.com/i18next/i18nextify#fragment-replacement-for-links-and-images">Fragment replacement for links and images</a></p><h2 id="Did-you-put-the-original-text-through-a-spelling-grammar-and-style-check"><a href="#Did-you-put-the-original-text-through-a-spelling-grammar-and-style-check" class="headerlink" title="Did you put the original text through a spelling, grammar, and style check?"></a>Did you put the original text through a spelling, grammar, and style check?</h2><p>Prevent back-and-forth rechecking that may stall the whole process.As an alternative you should be thinking of making some sort of <a href="../continuous-development-integration-and-localization-cd/">Continuous Localization</a>.With <a href="../continuous-development-integration-and-localization-cd/">Continuous Localization</a> you can take care of the translations from the first day and keep up with changes with ease.The process of translation and development are separated.</p><h2 id="Do-you-use-a-tracking-system"><a href="#Do-you-use-a-tracking-system" class="headerlink" title="Do you use a tracking system?"></a>Do you use a tracking system?</h2><p>Tracking every change on localizable content can be important to ensure that no content will be left behind when distributing your software.For certain projects or industries it&#39;s important to know which translator has done what change for auditing reasons.Some translation management systems offer a dedicated <a href="https://docs.locize.com/whats-inside/history">history feature</a>. This <a href="https://medium.com/@jamuhl/empower-your-localization-team-33e10ca9e333">empowers</a> you to prove anytime when a content fragment was changed.</p><h2 id="What-file-formats-are-you-sending-for-translation-work"><a href="#What-file-formats-are-you-sending-for-translation-work" class="headerlink" title="What file formats are you sending for translation work?"></a>What file formats are you sending for translation work?</h2><p>JSON, XML (or a derivative format i.e. XLIFF) is preferred over plain text or Excel files.Even better are localization management systems that offers a completely <a href="https://docs.locize.com/guides-tips-and-tricks/working-with-translators">integrated approach</a>.</p><h2 id="Where-are-the-localization-assets"><a href="#Where-are-the-localization-assets" class="headerlink" title="Where are the localization assets?"></a>Where are the localization assets?</h2><p>Store localization assets in an easy to access location, for swift access, import and export.With a proper <a href="../continuous-development-integration-and-localization-cd/">Continuous Localization</a> solution translations can be updated without the need to release an update of your app.For example: translations deployed to a <a href="https://docs.locize.com/whats-inside/cdn-content-delivery-network">CDN</a> and consumed from your application.</p><h2 id="Do-you-intend-to-have-the-texts-translated-into-more-than-one-language"><a href="#Do-you-intend-to-have-the-texts-translated-into-more-than-one-language" class="headerlink" title="Do you intend to have the texts translated into more than one language?"></a>Do you intend to have the texts translated into more than one language?</h2><p>Process resource files into separate language ones so all translators can work in parallel.A good <a href="https://locize.com/">localization management solution</a> can really help here. All team members can collaboratively work in parallel. In this way, you can get to your objective in a faster way.</p><h2 id="How-do-you-track-which-language-is-fully-translated"><a href="#How-do-you-track-which-language-is-fully-translated" class="headerlink" title="How do you track which language is fully translated?"></a>How do you track which language is fully translated?</h2><p>To say it in one sentence: &quot;Start thinking about the localization process early!&quot;The biggest mistake one can do is looking on localization as it’s only based on instrumenting your code and extract texts into resource files so you can translate them later.</p><p>You should keep full overview about what is translated and what not — even more if you order translations from the translation providers you also should keep track of your open orders.</p><h1 id="What-do-you-say-now-Are-you-ready-to-quot-play-quot-software-localization-monopoly"><a href="#What-do-you-say-now-Are-you-ready-to-quot-play-quot-software-localization-monopoly" class="headerlink" title="What do you say now? Are you ready to &quot;play&quot; software localization monopoly?"></a>What do you say now? Are you ready to &quot;play&quot; software localization monopoly?</h1><blockquote><p>Don&#39;t worry, <a href="https://locize.com/">locize</a> can help!</p></blockquote><p>Watch the demo video to learn more:</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/TFV_vhJs5DY" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><a href="https://locize.com/">locize</a> removes the pain in the translation process. No more delays in shipping your software because of missing translations. Translators can keep up with changes from day one. The continuous localization process keeps up with your demanding business.</p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
            <tag> i18next </tag>
            
            <tag> continuous development </tag>
            
            <tag> continuous integration </tag>
            
            <tag> continuous localization </tag>
            
            <tag> continuous delivery </tag>
            
            <tag> continuous translation </tag>
            
            <tag> formatjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8 signs you should improve your localization process</title>
      <link href="/blog/8-signs-you-should-improve-your-localization-process/"/>
      <url>/blog/8-signs-you-should-improve-your-localization-process/</url>
      
        <content type="html"><![CDATA[<p><img src="title.png" alt="localization process improvements" title="locize © inweso GmbH"></p><p>Very often, when you&#39;re engrossed in the everyday work, you do not realize how easily your localization process could be improved.For this reason, it is important to me to show you the following 8 warning signs you should look out for:</p><h2 id="1-Waste-of-time"><a href="#1-Waste-of-time" class="headerlink" title="1. Waste of time"></a>1. Waste of time</h2><p><em><strong>Are you mailing translation files around the world? Always struggling with this translation files?</strong></em></p><p><img src="waste.gif" alt="waste" title="locize © inweso GmbH"></p><p>Other people ask for the resource files to be translated and you hand them out and deep in your mind you know there will be some last minute changes the day before release and even more changes after release.Some time later (days or weeks) some translated files lands in your inbox and you copy them to your repository... But there are already a lot of changes... Some terms are not used anymore others are new and not yet translated and others are modified by the developers in the meanwhile.</p><h2 id="2-Waterfall-process"><a href="#2-Waterfall-process" class="headerlink" title="2. Waterfall process"></a>2. Waterfall process</h2><p><em><strong>Are you trying to switch the development process to a more agile approach but the localization process does not fit? Is there no time to translate during the development iteration or sprint?</strong></em></p><p><img src="process.gif" alt="process" title="locize © inweso GmbH"></p><p>By implementing more SaaS (Software as a Service) products today&#39;s organizations start to introduce CI/CD pipelines (Continuous Integration / Continuous Deployment).Developers focuses on instrumenting the code with the help of some i18n libraries and extract texts into resource files so someone can translate them later.Normally during a development iteration or sprint there is no time to translate the resources.That’s why some organizations opt to add an extra step to the process after which no text resource may be added, edited, or deleted.This <strong>“freeze”</strong> period gives technical writers and translators the necessary time to work. The more text needs to be handled the longer this period while take.This process slows down the release of the software in all languages quite a bit and will result in not really doing a continuous deployment process anymore.</p><h2 id="3-Missing-context"><a href="#3-Missing-context" class="headerlink" title="3. Missing context"></a>3. Missing context</h2><p><em><strong>Are the translated texts too long? Do you feel the translator did not understand what the product is?</strong></em></p><p><img src="context.png" alt="context" title="locize © inweso GmbH"></p><p>By handing over the resource files to the translators, it is very difficult for them to imagine the translated texts in the real product. That&#39;s why very often the translated texts feels wrong when imported back to the product.Doing proper translations needs more information by providing the context or even better by being done incontext.</p><h2 id="4-Hard-translation-management"><a href="#4-Hard-translation-management" class="headerlink" title="4. Hard translation management"></a>4. Hard translation management</h2><p><em><strong>Are translation texts suddenly deleted while translating? Is the format of the text corrupt after translating?</strong></em></p><p><img src="translation.gif" alt="translation" title="locize © inweso GmbH"></p><p>Translators and technical editors are humans too. Not only the lack of technical know how (html or markdown formatting, etc...) but also the power of their tooling is important and crucial.The worse the tooling the greater the danger of getting corrupt texts.</p><h2 id="5-Poor-integration"><a href="#5-Poor-integration" class="headerlink" title="5. Poor integration"></a>5. Poor integration</h2><p><em><strong>Do you wish using the same localization process for your product and other systems simultaneously, like your marketing website?</strong></em></p><p><img src="integration.png" alt="integration" title="locize © inweso GmbH"></p><p>Mostly the product development and the marketing department are split in multiple teams. In that way the localization process evolves in different ways. Not having a central team being responsible for offering internationalization libraries, apis and localization guidelines makes it difficult to find synergies across different products and teams.</p><h2 id="6-Locked-in"><a href="#6-Locked-in" class="headerlink" title="6. Locked in"></a>6. Locked in</h2><p><em><strong>Do you have troubles in finding open internationalization libraries compatible with your existing resource files or vice-versa find a localization solution compatible with your internationalization library?</strong></em></p><p><img src="locked.png" alt="locked" title="locize © inweso GmbH"></p><p>Very often the localization process enforces to develop very customized tools and helper scripts if not standardized or at least based on open specifications, formats and protocols.</p><h2 id="7-Unclear-project-progress"><a href="#7-Unclear-project-progress" class="headerlink" title="7. Unclear project progress"></a>7. Unclear project progress</h2><p><em><strong>Are your resource files all fully translated? What is missing? What is the expected effort to complete?</strong></em></p><p><img src="progress.png" alt="progress" title="locize © inweso GmbH"></p><p>Not having a centralized collaborative translation management system that is actively used by developers and translation editors makes it very difficult to forecast when a translation is fully translated and to plan its release.</p><h2 id="8-Expensive"><a href="#8-Expensive" class="headerlink" title="8. Expensive"></a>8. Expensive</h2><p><em><strong>Are your translation orders too expensive? Do you have multiple dedicated personal resources?</strong></em></p><p><img src="costs.png" alt="costs" title="locize © inweso GmbH"></p><p>There is not only the employee salary, but also the wasted time &quot;waiting&quot;, proofreading and correcting the translated resources.And finally, each delay of your time-to-market costs a lot of money.</p><h2 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h2><p><img src="infographic.png" alt="infographic" title="locize © inweso GmbH"></p><p>As we learned, localizing software releases is a nightmare and no translation tool really supports product managers, developers and translators well in software translations with continuous changes and additions. Someone started to work on <a href="http://locize.com/">locize.com</a> to bridge the gap between translation and development.</p><p>Watch the <a href="http://locize.com/#video">introduction video</a> to learn more.</p><div class="video-container"><iframe src="https://www.youtube-nocookie.com/embed/YQryHo1iHb8" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p><a href="http://locize.com/">locize</a> removes the pain in the translation process. No more delays in shipping your software because of missing translations. Translator could keep up with changes from day one. The continuous localization process keeps up with your demanding business.</p><p>Stop waiting - start localizing.</p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> localization </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How locize leverages serverless</title>
      <link href="/blog/how-locize-leverages-serverless/"/>
      <url>/blog/how-locize-leverages-serverless/</url>
      
        <content type="html"><![CDATA[<p><img src="title.png" title="locize © inweso GmbH"></p><p><em><a href="https://www.slideshare.net/adrai/locize-tech-talk">slides</a></em></p><h2 id="Why-we-choose-serverless"><a href="#Why-we-choose-serverless" class="headerlink" title="Why we choose serverless?"></a>Why we choose serverless?</h2><p><img src="why.png" alt="why" title="locize © inweso GmbH"></p><p>When we started with <a href="http://www.locize.com/">locize</a> we did not know how fast it would scale… serverless means we didn’t need to make that choice. The serverless architecture scales with our business model.</p><p>The next argument is, we hate maintaining and operating infrastructure. We believe in NoOps. Here serverless saves not only computing power but human resources too.</p><p>Finally you may ask: Why not a PaaS solution? =&gt; We are working with PaaS solutions since early 2011 and we always had the dream to have a platform where you really pay only when something is used (i.e. call of a function, query of a table, etc…) so you can fully concentrate to the business code.And last but not least: serverless is really cool!</p><h2 id="Why-we-choose-AWS"><a href="#Why-we-choose-AWS" class="headerlink" title="Why we choose AWS?"></a>Why we choose AWS?</h2><p><img src="why_aws.png" alt="why aws" title="locize © inweso GmbH"></p><p>We think AWS is the only production-ready FaaS provider (and more) that works out of the box and scales like you expected. It’s designed with an API-first approach, so everything can be automated.We think AWS has in mind a possible future where you can also run functions directly on the edge (directly on hardware).Additionally AWS has not only lambda but completes the serverless offering with:</p><ul><li>API Gateway</li><li>DynamoDB</li><li>Simple Storage Service (S3)</li><li>CloudFront</li><li>Simple Email Service (SES)</li><li>and a lot more...</li></ul><h2 id="The-basic-setup"><a href="#The-basic-setup" class="headerlink" title="The basic setup"></a>The basic setup</h2><p><img src="setup.png" alt="setup" title="locize © inweso GmbH"></p><p>When Developers/Translation Editors/Managers, etc… goes to <a href="http://www.locize.app/">www.locize.app</a>, the locize-app-client (which is hosted on S3 and exposed by CloudFront) is served. The client then accesses our lambda backend through the API-Gateway also exposed by CloudFront. Our main working storage (DynamoDB) is then accessed by our lambda functions.Each time someone publishes (or auto-publishes) a translation resource a lambda function will save that resource to S3. When published, the endusers of your product can access them via CDN edge locations offered and exposed by CloudFront too.</p><h2 id="Full-Stack-JavaScript"><a href="#Full-Stack-JavaScript" class="headerlink" title="Full-Stack JavaScript"></a>Full-Stack JavaScript</h2><p><img src="full_js.png" alt="full js" title="locize © inweso GmbH"></p><p>locize is a single language solution! Everything is JavaScript!The complete application backend, the api, the cli and other tools runs on <a href="https://nodejs.org/">node.js</a>… and the locize-app-client is a modern SPA based on <a href="https://facebook.github.io/react/">React</a> and <a href="http://redux.js.org/">Redux</a>.</p><h2 id="Lambda-functions"><a href="#Lambda-functions" class="headerlink" title="Lambda functions"></a>Lambda functions</h2><p><img src="types.png" alt="types" title="locize © inweso GmbH"></p><p>locize uses 3 different base lambda types.These are not real „AWS-defined“ lambda types but we&#39;ve defined these types ourself.</p><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><p><img src="express.png" alt="express" title="locize © inweso GmbH"></p><p>The first type is the express type.It defines RESTful APIs using the normal <a href="http://expressjs.com/">express</a> framework.You see the app.js file looks like a normal <a href="http://expressjs.com/">express</a>  based project.But at the end of the file you see that if this file is executed directly (like <code>node app.js</code>) it will start to listen on port 3000 and can be used to test locally.But if required by another file it exports the configured <a href="http://expressjs.com/">express</a> app.For this scenario there is an additional file (lambda.js) that uses the help of the npm module „aws-serverless-express“ to proxy and map the lambda function calls to http requests and responses. </p><h3 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h3><p><img src="async.png" alt="async" title="locize © inweso GmbH"></p><p>The second type is the async type.This lambda function is triggered by other lambda functions to compute non blocking tasks. i.e. calculation of current words in project, or publishing translation resources to S3, etc…The key element here is that a lambda function is able to call another lambda function by simply using the official aws-sdk npm module.With the help of AWS policies you can define exactly which function can be invoked.</p><h3 id="S3-event"><a href="#S3-event" class="headerlink" title="S3 event"></a>S3 event</h3><p><img src="s3.png" alt="s3" title="locize © inweso GmbH"></p><p>The last type is the S3 event type.This lambda function is i.e. triggered by a new CloudFront log file that was saved to s3 (this feature can be enabled on CloudFront).We use this to i.e. calculate the amount of downloads or to generate statistics.</p><h2 id="Our-tooling"><a href="#Our-tooling" class="headerlink" title="Our tooling"></a>Our tooling</h2><p><img src="claudia.png" alt="claudia js" title="locize © inweso GmbH"></p><p>Because we have a pure JavaScript landscape we’ve chosen <a href="https://claudiajs.com/">claudia.js</a>It automatically installs and configures a lot on AWS. From API-Gateway to Lambda versioning.<a href="https://claudiajs.com/">Claudia.js</a> does not abstract away AWS services. It’s really transparent and easy to understand.That’s why our advice is: if you want to build simple services and run them with AWS lambda, and you&#39;re looking for something low-overhead, easy to get started with, and you only want to use the <a href="https://nodejs.org/">node.js</a> runtime, Claudia is a good choice.</p>]]></content>
      
      
      
        <tags>
            
            <tag> serverless </tag>
            
            <tag> backend </tag>
            
            <tag> aws </tag>
            
            <tag> service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>locizify v2 - improvements</title>
      <link href="/blog/locizify-v2/"/>
      <url>/blog/locizify-v2/</url>
      
        <content type="html"><![CDATA[<h2 id="We-use-the-unpkg-CDN"><a href="#We-use-the-unpkg-CDN" class="headerlink" title="We use the unpkg CDN"></a>We use the unpkg CDN</h2><p>In the past we deployed the locizify script to our own CDN space. While this was ok migrating over to <a href="https://unpkg.com/">https://unpkg.com</a> allows us to provide you an improved usage. In the past your code was bound to the latest deployed script on our CDN. As we strongly respect <a href="http://semver.org/">semver</a> we just were able to update the script with non breaking updates.</p><p>Now as you could use the source from unpkg you&#39;re able to fix the version in your code like:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://unpkg.com/locizify // latest</span><br><span class="line">https://unpkg.com/locizify@2.0.1 // specific version</span><br><span class="line">https://unpkg.com/locizify@^2.0.0 // latest non breaking version 2.x.x</span><br></pre></td></tr></table></figure><p>full sample:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;locizify&quot;</span> <span class="attr">projectid</span>=<span class="string">&quot;[PROJECT_ID]&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">apikey</span>=<span class="string">&quot;[API_KEY]&quot;</span> <span class="attr">referencelng</span>=<span class="string">&quot;[LNG]&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fallbacklng</span>=<span class="string">&quot;[LNG]&quot;</span> <span class="attr">saveMissing</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/locizify@^2.0.0&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="New-Features"><a href="#New-Features" class="headerlink" title="New Features"></a>New Features</h2><h3 id="merging"><a href="#merging" class="headerlink" title="merging"></a>merging</h3><p>Sometimes you want to keep innerHTML of an element together to make it easier to translate.</p><p>Before:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Might be easier to translate this <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>the new way<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resulting keys</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Might be easier to translate this &quot;</span>: <span class="string">&quot;Might be easier to translate this &quot;</span>,</span><br><span class="line">  <span class="string">&quot;the new way&quot;</span>: <span class="string">&quot;the new way&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using merge:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">merge</span>&gt;</span>Might be easier to translate this <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>the new way<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resulting keys</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Might be easier to translate this &lt;a href=&quot;</span>#<span class="string">&quot;&gt;the new way&lt;/a&gt;&quot;</span>: <span class="string">&quot;Might be easier to translate this &lt;a href=&quot;</span>#<span class="string">&quot;&gt;the new way&lt;/a&gt;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>While you can set the <code>merge</code> attribute on every element you like to have this behaviour. You can also specify this globally on init:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/locizify@^2.0.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      locizify.init(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// merging content (eg. a tags in p tags)</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">mergeTags</span>: [], <span class="comment">// tags to merge innerHtml to one key</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">inlineTags</span>: [], <span class="comment">// tags to inline (eg. a, span, abbr, ...)</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">ignoreInlineOn</span>: [], <span class="comment">// tags to ignore inlining tags under inlineTags</span></span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h3 id="cleanup-for-keys"><a href="#cleanup-for-keys" class="headerlink" title="cleanup for keys"></a>cleanup for keys</h3><p>With v2 we improved the key generation from content by removing unused whitespaces:</p><p>Before:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  Having text</span><br><span class="line">  over multiple lines</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span> with space in front<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resulting keys</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;  Having text/n  over multiple lines&quot;</span>: <span class="string">&quot;  Having text/n  over multiple lines&quot;</span>,</span><br><span class="line">  <span class="string">&quot; with space in front&quot;</span>: <span class="string">&quot; with space in front&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using cleanup (default enabled in v2):</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  Having text</span><br><span class="line">  over multiple lines</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span> with space in front<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resulting keys</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Having text over multiple lines&quot;</span>: <span class="string">&quot;Having text over multiple lines&quot;</span>,</span><br><span class="line">  <span class="string">&quot;with space in front&quot;</span>: <span class="string">&quot;with space in front&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>All the unnecessary whitespaces get removed making translation more easy. You can manually toggle this off or ignore it for certain tags:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/locizify@^2.0.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      locizify.init(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// cleanup for keys</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">cleanIndent</span>: <span class="literal">true</span>, <span class="comment">// removes indent, eg. if a p tag spans multiple lines</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">ignoreCleanIndentFor</span>: [<span class="string">&#x27;PRE&#x27;</span>, <span class="string">&#x27;CODE&#x27;</span>], <span class="comment">// ignores cleaning up of indent for those tags needing that extra spaceing</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">cleanWhitespace</span>: <span class="literal">true</span>, <span class="comment">// removes surrounding whitespace from key</span></span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h3 id="Fragment-replacement-for-links-and-images"><a href="#Fragment-replacement-for-links-and-images" class="headerlink" title="Fragment replacement for links and images"></a>Fragment replacement for links and images</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/&#123;&#123;a.png&#125;&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;big A&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&#123;&#123;statistic&#125;&#125;&quot;</span>&gt;</span>Open my statistics<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You will find <code>a.png</code> and <code>statistic</code> to be a key in your translations - it&#39;s value can be replaced to eg. a-de.png for german (all other languages will fallback to a.png)</p><h3 id="Translate-other-then-default-attributes-on-elements"><a href="#Translate-other-then-default-attributes-on-elements" class="headerlink" title="Translate other then default attributes on elements"></a>Translate other then default attributes on elements</h3><p>eg: for validation error messages</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">data-parsley-error-message</span>=<span class="string">&quot;This field is required&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>Just add <code>data-parsley-error-message</code> to the <code>translateAttributes</code> Array on init:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/locizify@^2.0.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      locizify.init(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">translateAttributes</span>: [<span class="string">&#x27;placeholder&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;alt&#x27;</span>, <span class="string">&#x27;value#input.type=button&#x27;</span>, <span class="string">&#x27;value#input.type=submit&#x27;</span>],</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>You can define rules like:</p><p>``[attributeToTranslate]#element.andOrAttributeWithValue`</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">value#input <span class="comment">// all values on input</span></span><br><span class="line">value#type <span class="comment">// all values on elements having an attribute type</span></span><br><span class="line">value#input.type=button <span class="comment">// all values on input element having an attribute type set to button</span></span><br></pre></td></tr></table></figure><h2 id="Migration-from-v1"><a href="#Migration-from-v1" class="headerlink" title="Migration from v1"></a>Migration from v1</h2><p>To make v2 having the same behaviour as v1 you could change the init options like:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/locizify@^2.0.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">      locizify.init(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// cleanup for keys</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">cleanIndent</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">cleanWhitespace</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        ...</span></span><br><span class="line"><span class="javascript">      &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>This way you assert keys get not cleaned of whitespaces so they match the counterpart of v1.</p>]]></content>
      
      
      
        <tags>
            
            <tag> locizify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Localization should be fun</title>
      <link href="/blog/localization-fun/"/>
      <url>/blog/localization-fun/</url>
      
        <content type="html"><![CDATA[<p>Learn from our experience we made during using the locize service on our own new webapplication.</p><p><img src="thumb.png" title="working hard"></p><p>In an early stage of drafting out our plan to completely rewrite our locize webclient we decided to use our own service to manage the content on it. There was no plan on providing it in another language then english - but we strongly believed even not having the demand of translating we could profit of separating the content from the application logic. This way we could go full speed during development while working on final terminology later. As a plus we could change all the texts in production without having to deploy a new client.</p><p>Another reason was - we wanted to get a better feeling on how the experience is - creating a new project using our service. Our goal was to get a workflow that is faster, less error prone and more fun for everyone being part of the localization process.</p><h3 id="Our-past-workflow"><a href="#Our-past-workflow" class="headerlink" title="Our past workflow"></a>Our past workflow</h3><p>To have a comparison with the updated workflow we like to describe how things got done before using locize. <strong>If you like to direcly see how things worked with locize just skip this section</strong>.</p><h5 id="Developers-path"><a href="#Developers-path" class="headerlink" title="Developers path"></a>Developers path</h5><ul><li>Create a new component, page and get functionality to work</li><li>Replace all texts with instrumented code (calls to translation function)</li><li>Add all the new keys to the correct json file (manually resolving the nesting)</li><li>Restart server to load and serve the new translations files</li><li>See the json has an error -&gt; fix it -&gt; Restart again</li><li>See that some keys are still missing -&gt; add -&gt; Restart again</li></ul><h5 id="Technical-editor-Translator-path"><a href="#Technical-editor-Translator-path" class="headerlink" title="Technical editor / Translator path"></a>Technical editor / Translator path</h5><ul><li>Ask developer for latest resource files</li><li>Getting them a few days later -&gt; start changing texts to match terminology</li><li>Save the file and pass it back to development</li><li>Ask for new texts - getting only a file having all texts -&gt; going crazy as having no idea which stuff is new...start to compare with last file</li><li>Pass new texts to development</li><li>...</li></ul><h5 id="Poor-guys-path"><a href="#Poor-guys-path" class="headerlink" title="Poor guys path"></a>Poor guys path</h5><ul><li>tries to merge files coming from development and technical editor</li><li>Goes crazy and starts searching for a new job ;)</li></ul><p>Doing agile / continuous localization could be hard...you can improve this by doing the steps in waterfall manner: development -&gt; technical editor -&gt; translations. But not only takes this a lot longer but also the problems come back as soon as development starts work on next version having semi-finished texts from the technical editor.</p><p>Things need to get better - so lets have a look on how our experience was using locize:</p><h2 id="Having-locize-in-the-flow-early"><a href="#Having-locize-in-the-flow-early" class="headerlink" title="Having locize in the flow early"></a>Having locize in the flow early</h2><p>Developing new components / pages we directly instrumented the code. In the early stage we still started with having the texts in code and instrument after being functional working. With getting more used to the new workflow we just removed that step and directly used to call the translation function.</p><p><img src="1_instrument_code.png" title="instrumented code"></p><p>Using webpacks hot-module-reload feature we just needed to save the file and the webapplication did it&#39;s reload magic:</p><p><img src="2_trigger_savemissing.png" title="save missing was triggered"></p><p>This triggered the save missing feature which was enabled during development. So all the untranslated texts were passed automatically to our locize project.</p><p>Time to reload the new data on our locize project using the new filter &quot;was created by missing&quot; to only show newly submitted texts:</p><p><img src="3_managecontent.png" title="edit content"></p><p>Just fill the newly added keys with the content it should have - press save - and done. Reload the application and all the new texts are there:</p><p><img src="4_done.png" title="content loaded from locize"></p><p>From here the technical editor / translators could change texts as needed and verify those in the test environment completely independent of the development.</p><ul><li>Never ask for resource files again</li><li>Never wait for the new texts / translations to be merged and deployed</li><li>No need to beg your developers to change a text - not even in production</li></ul><p>What happened to the <strong>poor guy</strong>? He was not needed any longer and lost his job before having the chance to search for a new one - just kidding ;)</p><hr><p>Separating development and content editing made both sides work more efficient, with less errors and a lot faster. Developers, technical editor and translators could work hand in hand without disturbing each others work.</p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Continuous Development, Integration and Localization</title>
      <link href="/blog/continuous-development-integration-and-localization-cd/"/>
      <url>/blog/continuous-development-integration-and-localization-cd/</url>
      
        <content type="html"><![CDATA[<p><img src="hands_world.jpg" title="localization"></p><h3 id="Past-times"><a href="#Past-times" class="headerlink" title="Past times"></a>Past times</h3><p>In the past most organizations that have to write some software planned, developed and released their product in one-year or even multiple-year cycles. =&gt;Typical waterfall process.Every time the developer team had finished implementing the features, the product manager could start to organize and initiate the translation process.So the only thing the developers had to guarantee, was to be able to export and import text resources.That way the texts could be translated all together, by sending them to different agencies or regional market organizations, etc…When translations were done (after days, weeks or even months), they’d be sent back to the product manager who forwarded them to the developers.They then had taken the translations, imported and merged them into the product, and (re-)released.</p><h3 id="Status-Quo"><a href="#Status-Quo" class="headerlink" title="Status Quo"></a>Status Quo</h3><p>Most of today’s organizations are trying to switch the development process to a more agile approach.By implementing more SaaS (Software as a Service) products today’s organizations start to introduce CI/CD pipelines (Continuous Integration / Continuous Deployment).Developers focuses on instrumenting the code with the help of some i18n libraries like:</p><p><a href="http://i18next.com/"><img src="i18next.png" alt="http://i18next.com/"></a></p><p><a href="http://formatjs.io/"><img src="formatjs.png" alt="http://formatjs.io/"></a></p><p><a href="http://airbnb.io/polyglot.js/">http://airbnb.io/polyglot.js/</a></p><p>and extract texts into resource files so someone can translate them later.Normally during a development iteration or sprint there is no time to translate the resources, and not just because most people have this sort of attitude:</p><blockquote><p>&lt;&lt; We are not interested in the translation process itself. &gt;&gt;</p></blockquote><p>That’s why some organizations opt to add an extra step to the process after which no text resource may be added, edited, or deleted.This <strong>“freeze”</strong> period gives technical writers and translators the necessary time to work on. The more text needs to be handled the longer is this period.This process slows down the release of the software in all languages quite a bit and will result in not really doing a continuous deployment.</p><h3 id="True-Continuous-Deployment-with-Continuous-Localization"><a href="#True-Continuous-Deployment-with-Continuous-Localization" class="headerlink" title="True Continuous Deployment with Continuous Localization"></a>True Continuous Deployment with Continuous Localization</h3><p>Because software development never stops when the first version of a product is released (bug fixes, minor updates and at some point major new versions and releases) — continuously.Your localization and translation process should follow the same pattern as your software development.You should be able to deploy your translation files separated from your software so you can update and manage them independently. And if you do so, you have to make sure you can have more then one version of your translations; at least one for the current released version and one for the current development branch.That way your technical writers and translators can take care of the translations from the first day and keep up with changes with ease.By doing this it is even possible to change or add translations without shipping a new release of your software!</p><blockquote><p>Cool, but isn’t this a little over the top… an extra tooling and deployment — doesn’t all this just add more complexity and effort?</p></blockquote><h4 id="You-don’t-have-to-build-this-yourself-—-There-is-locize"><a href="#You-don’t-have-to-build-this-yourself-—-There-is-locize" class="headerlink" title="You don’t have to build this yourself!!! — There is locize"></a>You don’t have to build this yourself!!! — There is locize</h4><div class="contact" style="margin-top: 0px;"><hr /><p class="callout extra-margin">...give it a try: <strong><a href="https://www.locize.app/register">Register!</a></strong></p></div>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> internationalization </tag>
            
            <tag> l10n </tag>
            
            <tag> i18next </tag>
            
            <tag> continuous development </tag>
            
            <tag> continuous integration </tag>
            
            <tag> continuous localization </tag>
            
            <tag> continuous delivery </tag>
            
            <tag> continuous translation </tag>
            
            <tag> polyglot </tag>
            
            <tag> formatjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The freedom of choice…i18next, polyglot or formatJS</title>
      <link href="/blog/the-freedom-of-choice/"/>
      <url>/blog/the-freedom-of-choice/</url>
      
        <content type="html"><![CDATA[<p><img src="idea.jpg" title="locize flexibility"></p><p>When we started work on locize.com our localization as a service platform we basically had in mind to solve the translation process for developers using our i18n framework <a href="http://i18next.com/">i18next.com</a>.</p><blockquote><p>Translation Management Systems are a great help. But still there is a gap between development and translation process. Files need to be exported / imported / merged and all while new content get added to be translated. The chaos is inevitable. locize.com comes to the rescue. It’s like a translation service on steroid directly connected to your i18next instrumented webproject. (<a href="http://i18next.com/docs/process/">i18next</a>)</p></blockquote><p>A few weeks after the successful beta launch and adding a lot of third party services to order translations directly out of your locize project, we started wondering if we could also bring the awesomeness to other frontend internationalization frameworks like airbnb’s <a href="http://airbnb.io/polyglot.js/">polyglot</a> or yahoo’s <a href="http://formatjs.io/">formatJS</a>?</p><h3 id="polyglot-locize-com"><a href="#polyglot-locize-com" class="headerlink" title="polyglot + locize.com"></a>polyglot + locize.com</h3><p>Our first look at polyglot revealed that the implementation is rather similar to the i18next json format only the plurals are stored in a single key and separated by <code>||||</code>.</p><p>We decided to do a short spike using a node.js express server loading the resources from locize.com using its API and return a demo page using polyglot to translate it.</p><p><strong>Using request to load the translations:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params">lng, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">&#x27;https://api.locize.app/[YOUR_PROJECT_ID]/latest/&#123;&#123;lng&#125;&#125;/translation&#x27;</span>.replace(<span class="string">&#x27;&#123;&#123;lng&#125;&#125;&#x27;</span>, lng);</span><br><span class="line">  request(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, res, body</span>) </span>&#123;</span><br><span class="line">    callback(err, lng, body);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>The JSON we load from the locize project looks like:</strong></p><p><a href="https://api.locize.app/897381a6-125c-40b8-9b28-2f80ae9a3612/latest/en/translation">https://api.locize.app/897381a6-125c-40b8-9b28-2f80ae9a3612/latest/en/translation</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;interpolate&quot;</span>: <span class="string">&quot;Hello, %&#123;name&#125;.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;intro&quot;</span>: <span class="string">&quot;The locize.com platform is fully compatible with airbnb’s polyglot i18n module.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;plural&quot;</span>: <span class="string">&quot;%&#123;smart_count&#125; car |||| %&#123;smart_count&#125; cars&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;something&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;nested&quot;</span>: <span class="string">&quot;Nested value something.nested&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Using polyglot with locize.com&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>We return a html file injecting the loaded json when requesting the root:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lng = req.query.lng || <span class="string">&#x27;en&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  fs.readFile(__dirname + <span class="string">&#x27;/index.html&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">    data = data.toString().replace(<span class="string">&#x27;###locals###&#x27;</span>, <span class="built_in">JSON</span>.stringify(locals[lng])).replace(<span class="string">&#x27;###lng###&#x27;</span>, lng);</span><br><span class="line"></span><br><span class="line">    res.set(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>);</span><br><span class="line">    res.send(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>In the html we basically use polyglot as described on it’s website:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// initialize polyglot by settings phrases on server</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> polyglot = <span class="keyword">new</span> Polyglot(&#123; <span class="attr">phrases</span>: <span class="built_in">JSON</span>.parse(<span class="string">&#x27;###locals###&#x27;</span>), <span class="attr">locale</span>: <span class="string">&#x27;###lng###&#x27;</span> &#125;);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// translate</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;headline&#x27;</span>).innerHTML = polyglot.t(<span class="string">&#x27;title&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  ...</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can checkout this example on github: <a href="https://github.com/locize/locize-polyglot-example">https://github.com/locize/locize-polyglot-example</a>.</p><p>While it is a very basic sample the main focus stays on proving just that you can profit from using locize.com using polyglot. Adapt the sample to your backend language or just use xhr directly to load the data inside your client. You directly benefit from the same benefits just i18next developers had until now using locize.com.</p><h3 id="formatJS-locize-com"><a href="#formatJS-locize-com" class="headerlink" title="formatJS + locize.com"></a>formatJS + locize.com</h3><p>formatJS is well known for using the intl API to parse dates and numbers plus uses the ICU message format for translations. The format is rather different from what was used in i18next, but still it’s just keybased json.</p><p>So we started from what we did with polyglot. For the backend there was no change needed, so just scroll up to the polyglot sample where we use request o load the translations.</p><p><strong>The JSON we load from the locize project looks like:</strong></p><p><a href="https://api.locize.app/9ac4fb1f-be22-4028-bcbc-0da13010b35e/latest/en/translation">https://api.locize.app/9ac4fb1f-be22-4028-bcbc-0da13010b35e/latest/en/translation</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;interpolate&quot;</span>: <span class="string">&quot;Hello, &#123;name&#125;.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;intro&quot;</span>: <span class="string">&quot;The locize.com platform is fully compatible with yahoo&#x27;s format.js i18n module.&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;plural&quot;</span>: <span class="string">&quot;You have &#123;numPhotos, plural, =0 &#123;no photos.&#125;=1 &#123;one photo.&#125;other &#123;# photos.&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Using format.js with locize.com&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>In the html we use the <a href="https://github.com/yahoo/intl-messageformat">IntlMessageFormat</a> module and created a little helper function</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// initialize</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> resources = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;###locals###&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> lng = <span class="string">&#x27;###lng###&#x27;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// translation helper</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">key, opts</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    opts = opts || &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> m = <span class="keyword">new</span> IntlMessageFormat(resources[key], lng);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> m.format(opts);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// translate</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;headline&#x27;</span>).innerHTML = t(<span class="string">&#x27;title&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  ...</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>You can see the full example on github: <a href="https://github.com/locize/locize-formatjs-example">https://github.com/locize/locize-formatjs-example</a>.</p><p>The sample can easily be adapted to react-intl, ember-intl, handlebars-intl, dust-intl or any other framework using icu messageformat like eg. <a href="https://github.com/messageformat/messageformat.js">https://github.com/messageformat/messageformat.js</a>.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>While initially focused on <a href="http://i18next.com/docs/jsons/">i18next json format</a> when building locize.com we found out that you can profit from the locize.com service using <a href="http://airbnb.io/polyglot.js/">polyglot</a> or any libary using messageformat (<a href="http://formatjs.io/">formatJS</a> and others) too.</p><p>We love flexibility so we’re looking forward to our first customer creating a project using airbnb’s or yahoo’s i18n framework.</p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> i18next </tag>
            
            <tag> polyglot </tag>
            
            <tag> formatjs </tag>
            
            <tag> locizify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>how we eat our own dogfood</title>
      <link href="/blog/eat-our-own-dogfood/"/>
      <url>/blog/eat-our-own-dogfood/</url>
      
        <content type="html"><![CDATA[<p>After relaunching our website with new templates for our documentation, post pages and adding a new landing page, we decided to have at least the landing page translated.</p><p>As we use <a href="https://hexo.io/">hexo</a> to generate our static content it was just a natural fit to use our <a href="http://locize.com/integration.html">locizify script</a> so we don&#39;t have to instrument the page ourself.</p><p>As we might add other areas later we decided to have a fixed namespace (filename) for the landing page. We used the advanced option to init locizify like described <a href="https://github.com/locize/locizify#via-init-function">here</a>.</p><p>We ended with following snipplet:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://unpkg.com/locizify@^2.0.0&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  locizify.init(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">namespace</span>: <span class="string">&#x27;landingpage&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">saveMissing</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">fallbackLng</span>: <span class="string">&#x27;en&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">backend</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">projectId</span>: <span class="string">&#x27;3d0aa5aa-4660-4154-b6d9-907dbef10bb2&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">apiKey</span>: <span class="string">&#x27;******** private ********&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">referenceLng</span>: <span class="string">&#x27;en&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">version</span>: <span class="string">&#x27;production&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// ignore some dynamic widgets</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">ignoreIds</span>: [<span class="string">&#x27;nudgespotInappContainer&#x27;</span>, <span class="string">&#x27;nudgespotInappMessagesContainer&#x27;</span>, <span class="string">&#x27;nudgespotInappConversationsContainer&#x27;</span>, <span class="string">&#x27;__bs_notify__&#x27;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">ignoreClasses</span>: [<span class="string">&#x27;nudgespot-clean&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>After reloading the page we had the source content in english inside our project. We translated that to german and italian in no time using our editor.</p><p><img src="translate.png" title="translate to german"></p><p>As the latest version gets auto published reloading the page with the additional querystring parameter <code>?lng=de</code> (or switching browser language) was enough to test the translation.</p><p>Next we created a production version (going to project settings -&gt; versions) so we can change or prepare new content during development without messing with the currently released page version.</p><p><img src="version.png" title="translate to german"></p><p>After that we wanted to avoid the flickering on initial load where the page first gets displayed in the source language until locizify loaded and initial translated the page.</p><p>To optimize this we just needed to add <code>display: none</code> to body <a href="https://github.com/locize/locizify#avoid-flickering-on-initial-load">(more info)</a>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Finally we needed a solution to let the user change the language on our page. We started with a simple list of links:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/?lng=en&quot;</span>&gt;</span>english<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/?lng=de&quot;</span>&gt;</span>deutsch<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/?lng=it&quot;</span>&gt;</span>italiano<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>But decided a select element would fit more to our current layout. We needed to add binding to i18next <a href="http://i18next.com/docs/api/#on-language-changed">changeLanguage event</a> to select current language and handle the select <code>onChange</code> event.</p><p>Further we use <code>locizify.getLanguages</code> to get current available languages in our project, so we don&#39;t have to touch the code when we add new languages:</p><p><strong>the select element:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;languageSelect&quot;</span> <span class="attr">onChange</span>=<span class="string">&quot;handleSelectChange()&quot;</span> <span class="attr">translated</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>the script:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the select element</span></span><br><span class="line"><span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;languageSelect&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> availableLngs = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// create select options based on project languages</span></span><br><span class="line">locizify.getLanguages(<span class="function"><span class="keyword">function</span>(<span class="params">err, lngs</span>) </span>&#123;</span><br><span class="line">  availableLngs = <span class="built_in">Object</span>.keys(lngs || &#123;&#125;);</span><br><span class="line">  availableLngs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">l</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lng = lngs[l];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return if not at least 90% is translated</span></span><br><span class="line">    <span class="keyword">if</span> (lng.translated.production &lt; <span class="number">0.9</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// append ele</span></span><br><span class="line">    <span class="keyword">var</span> optEle = <span class="built_in">document</span>.createElement(<span class="string">&quot;OPTION&quot;</span>);</span><br><span class="line">    optEle.setAttribute(<span class="string">&#x27;value&#x27;</span>, l);</span><br><span class="line">    optEle.innerHTML = lng.nativeName;</span><br><span class="line">    ele.appendChild(optEle);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  updateSelect();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// selects the value based on i18next lngs</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateSelect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> selected;</span><br><span class="line">  locizify.i18next.languages.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">l</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!selected &amp;&amp; availableLngs.indexOf(l) &gt; -<span class="number">1</span>) selected = l;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ele.value = selected || <span class="string">&#x27;en&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reload page on selection</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleSelectChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> value = ele.options[ele.selectedIndex].value;</span><br><span class="line">  <span class="built_in">window</span>.location = updateQueryStringParameter(<span class="built_in">window</span>.location.href, <span class="string">&#x27;lng&#x27;</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bind i18next change language event</span></span><br><span class="line">locizify.i18next.on(<span class="string">&#x27;languageChanged&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">lng</span>) </span>&#123;</span><br><span class="line">  updateSelect();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// just a helper to update uri with new params</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateQueryStringParameter</span>(<span class="params">uri, key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;([?&amp;])&quot;</span> + key + <span class="string">&quot;=.*?(&amp;|$)&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> separator = uri.indexOf(<span class="string">&#x27;?&#x27;</span>) !== -<span class="number">1</span> ? <span class="string">&quot;&amp;&quot;</span> : <span class="string">&quot;?&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (uri.match(re)) &#123;</span><br><span class="line">    <span class="keyword">return</span> uri.replace(re, <span class="string">&#x27;$1&#x27;</span> + key + <span class="string">&quot;=&quot;</span> + value + <span class="string">&#x27;$2&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> uri + separator + key + <span class="string">&quot;=&quot;</span> + value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>That&#39;s all. Our project was translated in no time including a custom language selector:</p><p><img src="result.png" title="translated to german"></p><p>We are very pleased with the outcome of eating our own dogfood. Next step will be to order professional translations for the languages we can&#39;t translate ourself...</p>]]></content>
      
      
      
        <tags>
            
            <tag> locize </tag>
            
            <tag> locizify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>technology stack - locize is serverless</title>
      <link href="/blog/technology-stack/"/>
      <url>/blog/technology-stack/</url>
      
        <content type="html"><![CDATA[<h3 id="No-Servers"><a href="#No-Servers" class="headerlink" title="No Servers?"></a>No Servers?</h3><p>We believe that the best DevOps is <strong>NoOps</strong>.Nothing against DevOps or DevOps people. On the contrary, but we think we could do differently!</p><p>Instead of spending time on setting up virtual machines and maintaining them, we setup our stack directly on different services – leaving ourselves more time to work on great features.</p><p><strong>locize</strong> gave us a chance to have a look around at new paths for building long lasting components.</p><p>We used a set of AWS solutions:</p><ul><li><a href="https://aws.amazon.com/dynamodb">AWS DynamoDB</a></li><li><a href="https://aws.amazon.com/de/cloudfront">AWS CloudFront CDN</a></li><li><a href="https://aws.amazon.com/s3">AWS Simple Storage Service S3</a></li></ul><p>but specifically:</p><ul><li><a href="https://aws.amazon.com/api-gateway">AWS API Gateway</a></li><li><a href="https://aws.amazon.com/lambda">AWS Lambda</a></li></ul><h3 id="Amazon-Lambda"><a href="#Amazon-Lambda" class="headerlink" title="Amazon Lambda"></a>Amazon Lambda</h3><p><a href="https://aws.amazon.com/lambda">AWS Lambda</a> is a compute service where you can upload your code to AWS Lambda and the service can run the code on your behalf using AWS infrastructure.All this without the hassle of own virtual machines, containers or any infrastructure for that matter.It integrates very well with <a href="https://aws.amazon.com/s3">S3</a> <em>(where we serve the localized files)</em> and with <a href="https://aws.amazon.com/dynamodb">DynamoDB</a> <em>(our main work storage)</em>.We don’t have to worry about scaling, multi-server communication and other problems related to distributed systems.We use the <a href="https://nodejs.org/">node.js</a> runtime for all our lambda functions.<img src="nodejs-new-pantone-black.png" title="node.js"></p><h3 id="Amazon-API-Gateway"><a href="#Amazon-API-Gateway" class="headerlink" title="Amazon API Gateway"></a>Amazon API Gateway</h3><p><a href="https://aws.amazon.com/api-gateway">AWS API Gateway</a> lets you create a RESTful API to expose selected back-end features. The back end can be another AWS service, such as <a href="https://aws.amazon.com/lambda">AWS Lambda</a> or <a href="https://aws.amazon.com/dynamodb">AWS DynamoDB</a>, or it can be an existing web application.</p><h3 id="Below-you-can-see-how-locize-uses-this-services"><a href="#Below-you-can-see-how-locize-uses-this-services" class="headerlink" title="Below you can see how locize uses this services"></a>Below you can see how <strong>locize</strong> uses this services</h3><p><img src="aws.png" title="locize © inweso GmbH"></p><h3 id="What-about-the-client-side"><a href="#What-about-the-client-side" class="headerlink" title="What about the client side?"></a>What about the client side?</h3><p>In an other blog post ;-)</p>]]></content>
      
      
      
        <tags>
            
            <tag> backend </tag>
            
            <tag> aws </tag>
            
            <tag> service </tag>
            
            <tag> technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day zero - how all began</title>
      <link href="/blog/day-zero/"/>
      <url>/blog/day-zero/</url>
      
        <content type="html"><![CDATA[<h3 id="Back-in-2011"><a href="#Back-in-2011" class="headerlink" title="Back in 2011"></a>Back in 2011</h3><p>All started back in 2011 when we were in search for a internationalization library that meets our demand - allowing to run both on serverside node.js and on our clientside singlepage applications. <a href="http://www.i18next.com/">I18next</a> was born and fastly grown to one of the most used frameworks for translating webapplications and in node.js. The response of the community was amazing and a fast growing ecosystem established itself around i18next.</p><h3 id="internationalization-is-not-enough"><a href="#internationalization-is-not-enough" class="headerlink" title="internationalization is not enough"></a>internationalization is not enough</h3><p>Our community provided us with great feedback. Out of that response and our own experiences we learnt providing instrumentation for doing proper internationalization just is not enough.</p><p>Helping developers to get their applications translated is great - but there is more to it.</p><ul><li>How do you integrate any translation services / agency?</li><li>How do you keep track of new or removed content?</li><li>How do you handle proper versioning?</li><li>How do you deploy translation changes without deploying your complete application?</li></ul><h3 id="locize-to-the-rescue"><a href="#locize-to-the-rescue" class="headerlink" title="locize to the rescue"></a>locize to the rescue</h3><p>Having created the foundation with <strong>i18next</strong> it was a long journey to <strong>localization as a service</strong>.</p><p>But the journey ends this year with <strong>locize</strong>.</p><ul><li>Easy to integrate</li><li>Order professional translations</li><li>Analytics &amp; Statistics</li><li>Profit from our content delivery network</li><li>Versioning of your translations</li><li>Riskfree: Take your data with you</li><li>Transparent and fair pricing</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> i18next </tag>
            
            <tag> beginning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
